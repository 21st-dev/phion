const vscode = require("vscode");
const http = require("http");
const { exec, spawn } = require("child_process");
const path = require("path");
const fs = require("fs");

// –¢–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—Ç Vite
const DEFAULT_VITE_PORT = 5173;

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏—è
let hasAutoOpened = false;
let serverCheckInterval = null;

let DEBUG_MODE = false;
let AUTO_START_NEW_PROJECT = false;
let AUTO_OPTIMIZE_WORKSPACE = true;

const debugLog = (msg) => {
  if (DEBUG_MODE) {
    console.log(`[Vybcel][DEBUG] ${msg}`);
  }
};

function updateDebugMode() {
  try {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders || workspaceFolders.length === 0) return;

    const rootPath = workspaceFolders[0].uri.fsPath;
    const configPath = path.join(rootPath, "vybcel.config.json");

    if (fs.existsSync(configPath)) {
      const config = JSON.parse(fs.readFileSync(configPath, "utf8"));
      DEBUG_MODE = config?.debug === true;
      AUTO_START_NEW_PROJECT = config?.autoStartOnNewProject === true;
      AUTO_OPTIMIZE_WORKSPACE = config?.autoOptimizeWorkspace !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
      debugLog(
        `Config loaded: debug=${DEBUG_MODE}, autoStartOnNewProject=${AUTO_START_NEW_PROJECT}, autoOptimizeWorkspace=${AUTO_OPTIMIZE_WORKSPACE}`
      );
    }
  } catch (error) {
    debugLog(`Error reading config: ${error.message}`);
    // Ignore errors, keep DEBUG_MODE as false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—Å–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –ø—Ä–æ–µ–∫—Ç –≤ —ç—Ç–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
 */
function hasProjectBeenStarted(context) {
  const workspaceFolders = vscode.workspace.workspaceFolders;
  if (!workspaceFolders || workspaceFolders.length === 0) return true;

  const workspaceId = workspaceFolders[0].uri.fsPath;
  const startedProjects = context.globalState.get("vybcelStartedProjects", []);

  debugLog(`Checking if project was started before: ${workspaceId}`);
  debugLog(`Previously started projects: ${JSON.stringify(startedProjects)}`);

  return startedProjects.includes(workspaceId);
}

/**
 * –û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π
 */
function markProjectAsStarted(context) {
  const workspaceFolders = vscode.workspace.workspaceFolders;
  if (!workspaceFolders || workspaceFolders.length === 0) return;

  const workspaceId = workspaceFolders[0].uri.fsPath;
  const startedProjects = context.globalState.get("vybcelStartedProjects", []);

  if (!startedProjects.includes(workspaceId)) {
    startedProjects.push(workspaceId);
    context.globalState.update("vybcelStartedProjects", startedProjects);
    debugLog(`Marked project as started: ${workspaceId}`);
  }
}

/**
 * –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function resetProjectHistory(context) {
  context.globalState.update("vybcelStartedProjects", []);
  debugLog("Project history reset");
  vscode.window.showInformationMessage("Vybcel: Project history cleared");
}

/**
 * –£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
 */
function killPortProcesses(ports) {
  return Promise.all(ports.map((port) => killPortProcess(port)));
}

/**
 * –£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Ä—Ç—É
 */
function killPortProcess(port) {
  return new Promise((resolve) => {
    debugLog(`Killing processes on port ${port}`);
    const command =
      process.platform === "win32"
        ? `netstat -ano | findstr :${port} | for /f "tokens=5" %a in ('findstr LISTENING') do taskkill /F /PID %a`
        : `lsof -ti:${port} | xargs kill -9`;

    exec(command, (error, stdout, stderr) => {
      if (error) {
        debugLog(`Port ${port} was already free or error: ${error.message}`);
      } else {
        debugLog(`Successfully killed process on port ${port}`);
      }
      resolve();
    });
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 5173
 */
function checkWebsiteServer() {
  return new Promise((resolve) => {
    const req = http.request(
      {
        hostname: "localhost",
        port: DEFAULT_VITE_PORT,
        method: "GET",
        path: "/",
        timeout: 3000,
      },
      (res) => {
        resolve(true);
      }
    );

    req.on("error", () => {
      resolve(false);
    });

    req.on("timeout", () => {
      req.destroy();
      resolve(false);
    });

    req.end();
  });
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä
 */
async function autoDetectAndOpen() {
  debugLog("Checking if Vite server is up...");
  if (hasAutoOpened) return;

  const isServerActive = await checkWebsiteServer();

  if (isServerActive) {
    hasAutoOpened = true;
    debugLog("Vite server detected. Opening preview...");

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (serverCheckInterval) {
      clearInterval(serverCheckInterval);
      serverCheckInterval = null;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    setTimeout(async () => {
      await openPreview();
    }, 2000);
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
 */
function startServerMonitoring() {
  debugLog("Started server monitoring loop");
  console.log("üîç Monitoring for Vite server startup...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  serverCheckInterval = setInterval(autoDetectAndOpen, 2000);

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
  setTimeout(() => {
    if (serverCheckInterval && !hasAutoOpened) {
      clearInterval(serverCheckInterval);
      serverCheckInterval = null;
      debugLog("Monitoring timeout - server not detected");
      console.log("‚è∞ Server monitoring timeout - no server detected");
    }
  }, 60000);
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π pnpm start
 */
async function startProject(context, isAutoStart = false) {
  debugLog(`Command: startProject triggered (auto: ${isAutoStart})`);
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
      vscode.window.showErrorMessage(
        "No workspace folder found. Please open your project folder first."
      );
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏—è
    hasAutoOpened = false;

    const terminal = vscode.window.createTerminal({
      name: "Project Server",
      cwd: workspaceFolders[0].uri.fsPath,
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    terminal.show();
    debugLog("Opening terminal and executing 'pnpm start'");
    terminal.sendText("pnpm start");

    // –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π
    if (context) {
      markProjectAsStarted(context);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
    startServerMonitoring();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const message = isAutoStart
      ? "üöÄ Auto-starting your project... Browser will open automatically."
      : "üöÄ Starting your project... Browser will open automatically.";

    vscode.window.showInformationMessage(message);
  } catch (error) {
    debugLog(`startProject error: ${error.message}`);
    console.error("Failed to start project:", error);
    vscode.window.showErrorMessage(`Could not start project: ${error.message}`);
  }
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Simple Browser –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∞–π—Ç–∞
 */
async function openPreview() {
  const url = `http://localhost:${DEFAULT_VITE_PORT}`;
  debugLog(`Attempting to open preview at ${url}`);

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω
    const isServerActive = await checkWebsiteServer();

    if (!isServerActive) {
      vscode.window.showWarningMessage(
        `Your website is not running. Start with 'pnpm start' first.`
      );
      return false;
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º Simple Browser
    await vscode.commands.executeCommand("simpleBrowser.show", url);
    console.log(`üåê Opened preview: ${url}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if (AUTO_OPTIMIZE_WORKSPACE) {
      setTimeout(async () => {
        try {
          debugLog("Setting up optimal workspace layout...");

          // 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å (Explorer)
          await vscode.commands.executeCommand("workbench.action.closeSidebar");
          debugLog("Closed Explorer sidebar");

          // 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª
          await vscode.commands.executeCommand("workbench.action.closePanel");
          debugLog("Closed bottom panel (terminal)");

          // 3. –û—Ç–∫—Ä—ã–≤–∞–µ–º AI —á–∞—Ç (—Ñ–æ–∫—É—Å –∏ –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å)
          await vscode.commands.executeCommand("workbench.view.chat");
          await vscode.commands.executeCommand("workbench.action.chat.new");
          debugLog("Opened AI chat view (new session)");

          console.log("‚ú® Workspace optimized for development");
        } catch (error) {
          debugLog(`Workspace setup error: ${error.message}`);
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
      }, 1500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    vscode.window.showInformationMessage(
      `üöÄ Website preview opened: ${url}`,
      "Hide"
    );

    return true;
  } catch (error) {
    debugLog(`openPreview error: ${error.message}`);
    console.error("Failed to open preview:", error);

    // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    const action = await vscode.window.showWarningMessage(
      `Could not open preview. Try again?`,
      "Copy URL",
      "Try Again"
    );

    if (action === "Copy URL") {
      await vscode.env.clipboard.writeText(url);
      vscode.window.showInformationMessage("URL copied to clipboard");
    } else if (action === "Try Again") {
      return await openPreview();
    }

    return false;
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç–æ–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
 */
async function clearPortsAndOpenPreview() {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    vscode.window.withProgress(
      {
        location: vscode.ProgressLocation.Notification,
        title: "Fixing connection issues...",
        cancellable: false,
      },
      async (progress) => {
        progress.report({
          increment: 0,
          message: "Clearing connection issues...",
        });

        // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö Vite
        await killPortProcesses([5173, 5174, 5175, 4173]);

        progress.report({
          increment: 50,
          message: "Waiting for system to update...",
        });

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Ä—Ç—ã –æ—Å–≤–æ–±–æ–¥–∏–ª–∏—Å—å
        await new Promise((resolve) => setTimeout(resolve, 1000));

        progress.report({ increment: 80, message: "Opening your website..." });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        await openPreview();

        progress.report({ increment: 100, message: "Done!" });
      }
    );
  } catch (error) {
    vscode.window.showErrorMessage(
      `Could not fix connection: ${error.message}`
    );
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 */
async function fixConnectionCommand() {
  try {
    const action = await vscode.window.showWarningMessage(
      "Fix connection issues? This will restart your website connection.",
      "Yes, fix it",
      "Cancel"
    );

    if (action === "Yes, fix it") {
      vscode.window.withProgress(
        {
          location: vscode.ProgressLocation.Notification,
          title: "Fixing connection issues...",
          cancellable: false,
        },
        async (progress) => {
          await killPortProcesses([5173, 5174, 5175, 4173]);
          vscode.window.showInformationMessage("‚úÖ Connection issues fixed!");
        }
      );
    }
  } catch (error) {
    vscode.window.showErrorMessage(
      `Could not fix connection: ${error.message}`
    );
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ —ç—Ç–æ Vybcel –ø—Ä–æ–µ–∫—Ç
 */
function isVybcelProject() {
  const workspaceFolders = vscode.workspace.workspaceFolders;
  if (!workspaceFolders) return false;

  const rootPath = workspaceFolders[0].uri.fsPath;
  const vybcelConfigPath = path.join(rootPath, "vybcel.config.json");
  const packageJsonPath = path.join(rootPath, "package.json");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ vybcel.config.json –∏–ª–∏ vybcel –≤ package.json
  if (fs.existsSync(vybcelConfigPath)) {
    return true;
  }

  if (fs.existsSync(packageJsonPath)) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf8"));
      return !!(
        packageJson.dependencies?.vybcel || packageJson.devDependencies?.vybcel
      );
    } catch (error) {
      return false;
    }
  }

  return false;
}

/**
 * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function activate(context) {
  updateDebugMode();
  debugLog("Extension activated (debug mode ON)");
  console.log("üöÄ Vybcel extension activated");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ Vybcel –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  if (isVybcelProject()) {
    debugLog("üéØ Vybcel project detected!");

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
    checkWebsiteServer().then((isServerActive) => {
      if (isServerActive && !hasAutoOpened) {
        debugLog("Existing server detected on startup - opening preview");
        hasAutoOpened = true;
        setTimeout(async () => {
          await openPreview();
        }, 1000);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
      if (AUTO_START_NEW_PROJECT && !hasProjectBeenStarted(context)) {
        debugLog("New project detected - auto-starting...");
        vscode.window.showInformationMessage(
          "üéâ New Vybcel project detected! Auto-starting..."
        );

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
          startProject(context, true);
        }, 2000);
      } else {
        debugLog(
          "Project already started before or auto-start disabled - only monitoring"
        );
        // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
        setTimeout(() => {
          startServerMonitoring();
        }, 3000);
      }
    });
  } else {
    debugLog("Not a Vybcel project - extension inactive");
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  const startProjectCommand = vscode.commands.registerCommand(
    "vybcel.startProject",
    () => startProject(context, false)
  );

  const openPreviewCommand = vscode.commands.registerCommand(
    "vybcel.openPreview",
    openPreview
  );

  const clearPortsCommand = vscode.commands.registerCommand(
    "vybcel.clearPortsAndOpen",
    clearPortsAndOpenPreview
  );

  const fixConnectionCommand = vscode.commands.registerCommand(
    "vybcel.fixConnection",
    fixConnectionCommand
  );

  const resetHistoryCommand = vscode.commands.registerCommand(
    "vybcel.resetProjectHistory",
    () => resetProjectHistory(context)
  );

  context.subscriptions.push(
    startProjectCommand,
    openPreviewCommand,
    clearPortsCommand,
    fixConnectionCommand,
    resetHistoryCommand
  );

  // –¢–∏—Ö–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
}

/**
 * –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
function deactivate() {
  console.log("üõë Vybcel extension deactivated");

  // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  if (serverCheckInterval) {
    clearInterval(serverCheckInterval);
    serverCheckInterval = null;
  }
}

module.exports = {
  activate,
  deactivate,
};
