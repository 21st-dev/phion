#!/usr/bin/env node

import { io } from "socket.io-client";
import chokidar from "chokidar";
import fs from "fs";
import path from "path";
import crypto from "crypto";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PROJECT_ID = process.env.SHIPVIBES_PROJECT_ID || "__PROJECT_ID__"; // –ó–∞–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const WS_URL = process.env.SHIPVIBES_WS_URL || "ws://localhost:8080";
// –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É

class ShipvibesAgent {
  constructor() {
    this.socket = null;
    this.watcher = null;
    this.isConnected = false;
    this.isGitRepo = false;
    // –£–±–∏—Ä–∞–µ–º pending changes - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É
  }

  async start() {
    console.log("üöÄ Shipvibes Development Agent");
    console.log(`üì° Connecting to: ${WS_URL}`);
    console.log(`üÜî Project ID: ${PROJECT_ID}`);
    console.log("");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    await this.checkGitRepository();

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    await this.connectWebSocket();

    // –ó–∞–ø—É—Å–∫–∞–µ–º file watcher
    this.startFileWatcher();

    console.log("‚úÖ Shipvibes Agent is running!");
    console.log("üìù Edit your files and see changes sync automatically");
    console.log("üåê Check your Shipvibes dashboard for updates");
    if (this.isGitRepo) {
      console.log("üîÑ Git commands available for sync and rollback");
    }
    console.log("");
    console.log("Press Ctrl+C to stop");
  }

  async checkGitRepository() {
    try {
      await execAsync("git rev-parse --git-dir");
      this.isGitRepo = true;
      console.log("‚úÖ Git repository detected");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º remote origin
      try {
        const { stdout } = await execAsync("git remote get-url origin");
        console.log(`üîó Remote origin: ${stdout.trim()}`);
      } catch (error) {
        console.log("‚ö†Ô∏è No remote origin configured");
      }
    } catch (error) {
      this.isGitRepo = false;
      console.log("‚ö†Ô∏è Not a git repository - git commands will be disabled");
    }
  }

  async connectWebSocket() {
    return new Promise((resolve, reject) => {
      this.socket = io(WS_URL, {
        transports: ["websocket"],
        timeout: 10000,
        reconnection: true,
        reconnectionAttempts: 5,
        reconnectionDelay: 2000,
      });

      this.socket.on("connect", () => {
        console.log("‚úÖ Connected to Shipvibes");

        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        this.socket.emit("authenticate", {
          projectId: PROJECT_ID,
          clientType: "agent",
        });
      });

      this.socket.on("authenticated", (data) => {
        console.log(`üîê Authenticated for project: ${data.projectId}`);
        this.isConnected = true;
        resolve();
      });

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => {
        if (!this.isConnected) {
          console.log("‚è∞ Connection timeout, but continuing anyway...");
          resolve();
        }
      }, 15000);

      this.socket.on("file_saved", (data) => {
        console.log(`üíæ File saved: ${data.filePath}`);
      });

      this.socket.on("file_updated", (data) => {
        console.log(`üîÑ File updated by another client: ${data.filePath}`);
      });

      // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è git –∫–æ–º–∞–Ω–¥
      this.socket.on("discard_local_changes", async (data) => {
        console.log("üîÑ Received discard local changes command");
        await this.discardLocalChanges();
      });

      this.socket.on("git_pull_with_token", async (data) => {
        console.log("üì• Received git pull command with token");
        await this.gitPullWithToken(data.token, data.repoUrl);
      });

      this.socket.on("update_local_files", async (data) => {
        console.log("üìÑ Received file updates from server");
        await this.updateLocalFiles(data.files);
      });

      this.socket.on("error", (error) => {
        console.error("‚ùå WebSocket error:", error.message);
      });

      this.socket.on("disconnect", (reason) => {
        console.log(`‚ùå Disconnected: ${reason}`);
        this.isConnected = false;

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          console.log("üîÑ Attempting to reconnect...");
          this.socket.connect();
        }, 5000);
      });

      this.socket.on("connect_error", (error) => {
        console.error("‚ùå Connection failed:", error.message);
        console.log("üîÑ Will retry connection...");
        // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å—Ä–∞–∑—É, –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      });
    });
  }

  /**
   * –û—Ç–∫–∞—Ç –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ git reset
   */
  async discardLocalChanges() {
    if (!this.isGitRepo) {
      console.log("‚ö†Ô∏è Not a git repository - cannot discard changes");
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "discard",
        success: false,
        error: "Not a git repository",
      });
      return;
    }

    try {
      console.log("üîÑ Discarding all local changes...");

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º file watcher –Ω–∞ –≤—Ä–µ–º—è git –æ–ø–µ—Ä–∞—Ü–∏–π
      if (this.watcher) {
        this.watcher.close();
      }

      // 1. git reset --hard HEAD (–æ—Ç–∫–∞—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
      await execAsync("git reset --hard HEAD");
      console.log("‚úÖ Reset to HEAD completed");

      // 2. git clean -fd (—É–¥–∞–ª–µ–Ω–∏–µ untracked —Ñ–∞–π–ª–æ–≤)
      await execAsync("git clean -fd");
      console.log("‚úÖ Cleaned untracked files");

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± —É—Å–ø–µ—Ö–µ
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "discard",
        success: true,
      });

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º file watcher
      this.startFileWatcher();
      console.log("‚úÖ Local changes discarded successfully");
    } catch (error) {
      console.error("‚ùå Error discarding local changes:", error.message);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—à–∏–±–∫–µ
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "discard",
        success: false,
        error: error.message,
      });

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º file watcher –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.startFileWatcher();
    }
  }

  /**
   * Git pull —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
   */
  async gitPullWithToken(token, repoUrl) {
    if (!this.isGitRepo) {
      console.log("‚ö†Ô∏è Not a git repository - cannot pull");
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "pull",
        success: false,
        error: "Not a git repository",
      });
      return;
    }

    try {
      console.log("üì• Pulling latest changes from GitHub...");

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º file watcher –Ω–∞ –≤—Ä–µ–º—è git –æ–ø–µ—Ä–∞—Ü–∏–π
      if (this.watcher) {
        this.watcher.close();
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ pull
      const authenticatedUrl = repoUrl.replace(
        "https://github.com/",
        `https://x-access-token:${token}@github.com/`
      );

      // –í—ã–ø–æ–ª–Ω—è–µ–º git pull —Å —Ç–æ–∫–µ–Ω–æ–º
      await execAsync(`git pull ${authenticatedUrl} main`);
      console.log("‚úÖ Git pull completed successfully");

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± —É—Å–ø–µ—Ö–µ
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "pull",
        success: true,
      });

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º file watcher
      this.startFileWatcher();
    } catch (error) {
      console.error("‚ùå Error during git pull:", error.message);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—à–∏–±–∫–µ
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "pull",
        success: false,
        error: error.message,
      });

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º file watcher –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.startFileWatcher();
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–µ–∑ git (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
   */
  async updateLocalFiles(files) {
    try {
      console.log(`üìÑ Updating ${files.length} local files...`);

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º file watcher –Ω–∞ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      if (this.watcher) {
        this.watcher.close();
      }

      for (const file of files) {
        try {
          // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          const dir = path.dirname(file.path);
          if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
          }

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          fs.writeFileSync(file.path, file.content, "utf8");
          console.log(`‚úÖ Updated: ${file.path}`);
        } catch (fileError) {
          console.error(
            `‚ùå Error updating file ${file.path}:`,
            fileError.message
          );
        }
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± —É—Å–ø–µ—Ö–µ
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "update_files",
        success: true,
      });

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º file watcher
      this.startFileWatcher();
      console.log("‚úÖ Local files updated successfully");
    } catch (error) {
      console.error("‚ùå Error updating local files:", error.message);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ–± –æ—à–∏–±–∫–µ
      this.socket?.emit("git_command_result", {
        projectId: PROJECT_ID,
        command: "update_files",
        success: false,
        error: error.message,
      });

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º file watcher –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.startFileWatcher();
    }
  }

  startFileWatcher() {
    if (this.watcher) {
      return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
    }

    console.log("üëÄ Watching for file changes...");

    this.watcher = chokidar.watch(".", {
      ignored: [
        "node_modules/**",
        ".git/**",
        "dist/**",
        "build/**",
        ".next/**",
        ".turbo/**",
        "*.log",
        "shipvibes-dev.js",
        ".env*",
      ],
      ignoreInitial: true,
      persistent: true,
    });

    this.watcher.on("change", (filePath) => {
      this.handleFileChange(filePath);
    });

    this.watcher.on("add", (filePath) => {
      this.handleFileChange(filePath);
    });

    this.watcher.on("unlink", (filePath) => {
      this.handleFileDelete(filePath);
    });

    this.watcher.on("error", (error) => {
      console.error("‚ùå File watcher error:", error);
    });
  }

  async handleFileChange(filePath) {
    if (!this.isConnected) {
      console.log(`‚è≥ Not connected, skipping: ${filePath}`);
      return;
    }

    try {
      const content = fs.readFileSync(filePath, "utf-8");
      const hash = crypto.createHash("sha256").update(content).digest("hex");

      console.log(`üìù Sending change: ${filePath}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      this.socket.emit("file_change", {
        projectId: PROJECT_ID,
        filePath: filePath.replace(/\\/g, "/"),
        content: content,
        hash: hash,
        timestamp: Date.now(),
      });

      console.log(`‚úÖ Change sent: ${filePath}`);
    } catch (error) {
      console.error(`‚ùå Error reading file ${filePath}:`, error.message);
    }
  }

  handleFileDelete(filePath) {
    if (!this.isConnected) {
      console.log(`‚è≥ Queuing deletion: ${filePath} (not connected)`);
      return;
    }

    console.log(`üóëÔ∏è Deleted: ${filePath}`);

    this.socket.emit("file_delete", {
      projectId: PROJECT_ID,
      filePath: filePath.replace(/\\/g, "/"),
      timestamp: Date.now(),
    });
  }

  stop() {
    console.log("\nüõë Stopping Shipvibes Agent...");

    if (this.watcher) {
      this.watcher.close();
    }

    if (this.socket) {
      this.socket.disconnect();
    }

    console.log("‚úÖ Agent stopped");
  }
}

// –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
const agent = new ShipvibesAgent();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (Ctrl+S –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
process.stdin.setRawMode(true);
process.stdin.resume();
process.stdin.on("data", (key) => {
  // Ctrl+C (ASCII 3) –¥–ª—è –≤—ã—Ö–æ–¥–∞
  if (key[0] === 3) {
    agent.stop();
    process.exit(0);
  }
});

process.on("SIGINT", () => {
  agent.stop();
  process.exit(0);
});

process.on("SIGTERM", () => {
  agent.stop();
  process.exit(0);
});

agent.start().catch((error) => {
  console.error("‚ùå Failed to start agent:", error.message);
  process.exit(1);
});
