#!/usr/bin/env tsx

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub App –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: pnpm tsx scripts/diagnose-github-app.ts
 */

import * as dotenv from 'dotenv';
import * as jwt from 'jsonwebtoken';
import fetch from 'node-fetch';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });
dotenv.config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–∫–∂–µ .env –∫–∞–∫ fallback

interface GitHubAppInfo {
  id: number;
  name: string;
  owner: {
    login: string;
    type: string;
  };
  permissions: Record<string, string>;
  events: string[];
  installations_count: number;
}

interface GitHubInstallation {
  id: number;
  account: {
    login: string;
    type: string;
  };
  permissions: Record<string, string>;
  repository_selection: string;
}

interface GitHubInstallationToken {
  token: string;
  expires_at: string;
  permissions: Record<string, string>;
  repositories?: Array<{
    id: number;
    name: string;
    full_name: string;
  }>;
}

class GitHubAppDiagnostic {
  private readonly appId: string;
  private readonly installationId: string;
  private readonly privateKey: string;
  private readonly baseUrl = 'https://api.github.com';

  constructor() {
    this.appId = process.env.GITHUB_APP_ID || '';
    this.installationId = process.env.GITHUB_APP_INSTALLATION_ID || '';
    this.privateKey = process.env.GITHUB_APP_PRIVATE_KEY || '';

    console.log('üîç GitHub App Diagnostic Tool');
    console.log('============================\n');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  checkEnvironmentVariables(): boolean {
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    
    let allPresent = true;
    
    if (!this.appId) {
      console.log('‚ùå GITHUB_APP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      allPresent = false;
    } else {
      console.log(`‚úÖ GITHUB_APP_ID: ${this.appId}`);
    }
    
    if (!this.installationId) {
      console.log('‚ùå GITHUB_APP_INSTALLATION_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      allPresent = false;
    } else {
      console.log(`‚úÖ GITHUB_APP_INSTALLATION_ID: ${this.installationId}`);
    }
    
    if (!this.privateKey) {
      console.log('‚ùå GITHUB_APP_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      allPresent = false;
    } else {
      console.log(`‚úÖ GITHUB_APP_PRIVATE_KEY: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (${this.privateKey.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    }
    
    console.log('');
    return allPresent;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è GitHub App
   */
  generateJWT(): string {
    try {
      const now = Math.floor(Date.now() / 1000);
      const payload = {
        iat: now - 60,
        exp: now + (10 * 60),
        iss: this.appId,
      };

      return jwt.sign(payload, this.privateKey, { algorithm: 'RS256' });
    } catch (error) {
      throw new Error(`Failed to generate JWT: ${error}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GitHub App
   */
  async checkAppInfo(): Promise<GitHubAppInfo | null> {
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GitHub App:');
    
    try {
      const jwtToken = this.generateJWT();
      console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      const response = await fetch(`${this.baseUrl}/app`, {
        headers: {
          'Authorization': `Bearer ${jwtToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Shipvibes-Diagnostic/1.0',
        },
      });

      if (!response.ok) {
        const error = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ App: ${response.status} ${error}`);
        return null;
      }

      const appInfo = await response.json() as GitHubAppInfo;
      
      console.log(`‚úÖ App Name: ${appInfo.name}`);
      console.log(`‚úÖ App ID: ${appInfo.id}`);
      console.log(`‚úÖ Owner: ${appInfo.owner.login} (${appInfo.owner.type})`);
      console.log(`‚úÖ Installations: ${appInfo.installations_count}`);
      console.log('‚úÖ Permissions:');
      Object.entries(appInfo.permissions).forEach(([perm, level]) => {
        console.log(`   - ${perm}: ${level}`);
      });
      console.log('');
      
      return appInfo;
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ App: ${error}`);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É GitHub App
   */
  async checkInstallation(): Promise<GitHubInstallation | null> {
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GitHub App:');
    
    try {
      const jwtToken = this.generateJWT();

      const response = await fetch(`${this.baseUrl}/app/installations/${this.installationId}`, {
        headers: {
          'Authorization': `Bearer ${jwtToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Shipvibes-Diagnostic/1.0',
        },
      });

      if (!response.ok) {
        const error = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ: ${response.status} ${error}`);
        return null;
      }

      const installation = await response.json() as GitHubInstallation;
      
      console.log(`‚úÖ Installation ID: ${installation.id}`);
      console.log(`‚úÖ Account: ${installation.account.login} (${installation.account.type})`);
      console.log(`‚úÖ Repository Selection: ${installation.repository_selection}`);
      console.log('‚úÖ Permissions:');
      Object.entries(installation.permissions).forEach(([perm, level]) => {
        console.log(`   - ${perm}: ${level}`);
      });
      console.log('');
      
      return installation;
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error}`);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ installation —Ç–æ–∫–µ–Ω–∞
   */
  async checkInstallationToken(): Promise<GitHubInstallationToken | null> {
    console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è installation —Ç–æ–∫–µ–Ω–∞:');
    
    try {
      const jwtToken = this.generateJWT();

      const response = await fetch(`${this.baseUrl}/app/installations/${this.installationId}/access_tokens`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${jwtToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Shipvibes-Diagnostic/1.0',
        },
      });

      if (!response.ok) {
        const error = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è installation —Ç–æ–∫–µ–Ω–∞: ${response.status} ${error}`);
        return null;
      }

      const tokenData = await response.json() as GitHubInstallationToken;
      
      console.log('‚úÖ Installation —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`‚úÖ Expires at: ${tokenData.expires_at}`);
      console.log('‚úÖ Permissions:');
      Object.entries(tokenData.permissions).forEach(([perm, level]) => {
        console.log(`   - ${perm}: ${level}`);
      });
      
      if (tokenData.repositories) {
        console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: ${tokenData.repositories.length}`);
        tokenData.repositories.forEach(repo => {
          console.log(`   - ${repo.full_name}`);
        });
      }
      console.log('');
      
      return tokenData;
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è installation —Ç–æ–∫–µ–Ω–∞: ${error}`);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  async testRepositoryCreation(token: string): Promise<boolean> {
    console.log('5Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:');
    
    try {
      const testRepoName = `test-repo-${Date.now()}`;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ shipvibes...');
      const orgResponse = await fetch(`${this.baseUrl}/orgs/shipvibes`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Shipvibes-Diagnostic/1.0',
        },
      });

      if (!orgResponse.ok) {
        const orgError = await orgResponse.text();
        console.log(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${orgResponse.status} ${orgError}`);
      } else {
        const orgData = await orgResponse.json() as any;
        console.log(`‚úÖ –î–æ—Å—Ç—É–ø –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${orgData.login} (ID: ${orgData.id})`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...');
      const reposResponse = await fetch(`${this.baseUrl}/orgs/shipvibes/repos?per_page=5`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Shipvibes-Diagnostic/1.0',
        },
      });

      if (reposResponse.ok) {
        const repos = await reposResponse.json() as any[];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${repos.length}`);
        repos.forEach(repo => {
          console.log(`   - ${repo.name} (${repo.private ? 'private' : 'public'})`);
        });
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: ${reposResponse.status}`);
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
      console.log(`üìã Request body:`, {
        name: testRepoName,
        description: 'Test repository for Shipvibes diagnostic',
        private: true,
        auto_init: false,
      });

      const response = await fetch(`${this.baseUrl}/orgs/shipvibes/repos`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Shipvibes-Diagnostic/1.0',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: testRepoName,
          description: 'Test repository for Shipvibes diagnostic',
          private: true,
          auto_init: false,
        }),
      });

      console.log(`üìä Response status: ${response.status}`);
      console.log(`üìä Response headers:`, Object.fromEntries(response.headers.entries()));

      if (response.ok) {
        const repo = await response.json() as any;
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω: ${repo.html_url}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
        const deleteResponse = await fetch(`${this.baseUrl}/repos/shipvibes/${testRepoName}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/vnd.github.v3+json',
            'User-Agent': 'Shipvibes-Diagnostic/1.0',
          },
        });

        if (deleteResponse.ok) {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–¥–∞–ª–µ–Ω');
        } else {
          console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ —É–¥–∞–ª–µ–Ω (–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)');
        }
        
        return true;
      } else {
        const errorText = await response.text();
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${response.status}`);
        console.log(`üìÑ Error response body:`, errorText);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É –∫–∞–∫ JSON
        try {
          const errorJson = JSON.parse(errorText);
          if (errorJson.message) {
            console.log(`üí¨ Error message: ${errorJson.message}`);
          }
          if (errorJson.errors) {
            console.log(`üîç Detailed errors:`, errorJson.errors);
          }
        } catch (e) {
          console.log(`üìÑ Raw error text: ${errorText}`);
        }
        
        return false;
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${error}`);
      return false;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
   */
  async runDiagnostic(): Promise<void> {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (!this.checkEnvironmentVariables()) {
        console.log('üí• –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
        return;
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GitHub App
      const appInfo = await this.checkAppInfo();
      if (!appInfo) {
        console.log('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GitHub App. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
        return;
      }

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      const installation = await this.checkInstallation();
      if (!installation) {
        console.log('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
        return;
      }

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ installation —Ç–æ–∫–µ–Ω–∞
      const tokenData = await this.checkInstallationToken();
      if (!tokenData) {
        console.log('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å installation —Ç–æ–∫–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
        return;
      }

      // 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      const canCreateRepo = await this.testRepositoryCreation(tokenData.token);
      
      console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:');
      console.log('========================');
      if (canCreateRepo) {
        console.log('‚úÖ GitHub App –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏');
      } else {
        console.log('‚ùå GitHub App –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏');
        console.log('\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ GitHub App –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ shipvibes');
        console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ App —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ "Contents: Write" –∏ "Administration: Write"');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Installation ID –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
        console.log('4. App URL: https://github.com/organizations/shipvibes/settings/apps/shipvibes-bot');
      }
      
    } catch (error) {
      console.log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function main() {
  const diagnostic = new GitHubAppDiagnostic();
  await diagnostic.runDiagnostic();
}

main().catch(console.error); 