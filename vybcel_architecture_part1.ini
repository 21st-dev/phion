sequenceDiagram
    participant U as 👤 Пользователь
    participant W as 🌐 Web App Next.js порт 3004
    participant V as 💻 VSCode/Cursor с Extension
    participant T as 🛠️ Phion Toolbar (npm пакет)
    participant C as 📦 CLI Agent (npm phion)
    participant WS as 📡 WebSocket Server Railway порт 8080
    participant DB as 🗃️ Supabase PostgreSQL Database
    participant APP as 🤖 GitHub App ID 1390062
    participant GH as 🐙 GitHub API организация phion
    participant N as 🔥 Netlify Deploy Service

    Note over U,N: 🚀 Phion PRODUCTION ARCHITECTURE - PART 1: PROJECT CREATION & SETUP

    %% === 0. PREDEFINED SETUP ===
    rect rgb(230, 230, 250)
        Note over APP,GH: 0️⃣ PREDEFINED SETUP - выполнено для платформы
        
        Note over APP: GitHub App "Phion Bot" ID 1390062 создан и настроен
        APP->>GH: Установлен в организацию phion с Installation ID 70719351
        Note right of APP: User access not required - приложение работает автономно
        Note right of APP: Права: repo contents metadata webhooks
        
        Note over W: Backend хранит private key в переменных окружения
        Note right of W: Может получать installation tokens действуют 60 минут
        Note right of W: GITHUB_APP_ID=1390062 GITHUB_APP_INSTALLATION_ID=70719351
        
        Note over U,N: 🔑 КЛЮЧЕВАЯ ОСОБЕННОСТЬ - пользователь НИКОГДА не логинится в GitHub
    end

    %% === 1. PROJECT CREATION ===
    rect rgb(240, 248, 255)
        Note over U,N: 1️⃣ СОЗДАНИЕ ПРОЕКТА - WebSocket сервер выполняет все тяжелые операции
        U->>W: Заходит на страницу /dashboard в браузере
        Note right of U: Пользователь видит кнопку "Create New Project"
        
        U->>W: Клик по кнопке "Create New Project" создать новый проект
        Note right of W: POST /api/projects обрабатывает запрос создания проекта
        
        W->>DB: ProjectQueries.createProject создает запись в таблице projects
        Note right of DB: INSERT INTO projects с user_id name template_type
        DB-->>W: Возвращает созданный объект проекта с уникальным ID
        
        W->>WS: POST /api/projects/create-repository вызывает WebSocket сервер
        Note right of W: Переносим создание GitHub репо в Railway (безопасно для serverless)
        Note right of W: Next.js выполняет только быстрые HTTP вызовы к WebSocket серверу
        
        WS->>APP: Запрашивает installation token для GitHub App ID 1390062
        Note right of APP: Генерирует JWT с private key и получает installation token
        APP->>APP: POST /app/installations/70719351/access_tokens создает токен
        APP-->>WS: Возвращает installation_token действует 60 минут
        
        WS->>GH: GitHub API POST /orgs/phion/repos создает приватный репозиторий
        Note right of GH: Создается приватный репозиторий phion-project-{projectId}
        Note right of GH: Authorization Bearer {installation_token} + auto_init true
        GH->>GH: Инициализация репозитория с initial commit и README в организации phion
        GH-->>WS: Возвращает github_repo_url clone_url и repo details
        
        WS->>DB: ProjectQueries.updateGitHubInfo обновляет проект с данными GitHub
        Note right of DB: Сохраняет github_repo_url github_repo_name owner phion
        
        WS-->>W: Возвращает успешный ответ с данными репозитория
        Note right of W: Получает github_repo_url github_repo_name для дальнейшего использования
        
        W->>DB: ProjectQueries.updateProject устанавливает статус pending
        Note right of DB: deploy_status = pending пока проект инициализируется
        
        W->>WS: POST /api/projects/initialize вызывает инициализацию шаблона
        Note right of W: Переносим заливку шаблона в Railway (безопасно для serverless)
        Note right of W: WebSocket сервер запускает initializeProjectInBackground в фоне
        
        WS-->>W: Возвращает немедленный ответ о начале инициализации
        Note right of WS: Railway не засыпает - фоновая задача гарантированно выполнится
        
        W-->>U: Возвращает ответ мгновенно статус pending downloadUrl
        Note right of U: Получает проект со статусом pending + ссылку скачивания (заблокированную)
        Note right of U: Все тяжелые операции переданы в Railway WebSocket сервер
        
        par Фоновый процесс initializeProjectInBackground в Railway
            WS->>WS: generateTemplateFiles создает файлы шаблона проекта
            Note right of WS: Берет шаблон из папки templates/vite-react и настраивает его
            WS->>WS: Заменяет __PROJECT_ID__ на реальный ID в phion.config.json
            WS->>WS: Заменяет __WS_URL__ на URL WebSocket сервера
            
            WS->>WS: import('./services/github.js') динамический импорт GitHub сервиса
            Note right of WS: Railway окружение поддерживает полный Node.js функционал
            
            WS->>GH: GitHub API GET /repos/phion/repo/git/refs/heads/main получает parent commit
            Note right of GH: Получает SHA последнего коммита для создания нового коммита
            GH-->>WS: Возвращает parent commit SHA для tree API
            
            loop Обработка файлов чанками по 5 штук
                WS->>GH: GitHub API POST /repos/phion/repo/git/blobs создает 5 blobs
                Note right of GH: Создает blob объекты для чанка файлов с задержкой 100ms
                GH-->>WS: Возвращает SHA для каждого blob объекта в чанке
            end
            
            WS->>GH: GitHub API POST /repos/phion/repo/git/trees создает tree со всеми файлами
            Note right of GH: Создает tree объект содержащий все файлы проекта
            GH-->>WS: Возвращает tree SHA
            
            WS->>GH: GitHub API POST /repos/phion/repo/git/commits создает единый коммит
            Note right of GH: Создает один коммит со всеми файлами шаблона + parent commit SHA
            GH-->>WS: Возвращает commit SHA
            
            WS->>GH: GitHub API PATCH /repos/phion/repo/git/refs/heads/main обновляет main
            Note right of GH: Обновляет main ветку на новый коммит
            GH-->>WS: Подтверждение обновления main ветки
            
            WS->>DB: CommitHistoryQueries.createCommitHistory создает запись
            Note right of DB: Сохраняет commit SHA количество файлов в commit_history
            
            WS->>DB: ProjectQueries.updateProject обновляет статус ready
            Note right of DB: Статус меняется с pending на ready (проект готов)
            Note right of DB: Netlify сайт будет создан при первом Save All Changes
            
            WS->>WS: io.to(`project_${projectId}`).emit('deploy_status_update') отправляет событие
            Note right of WS: Прямое WebSocket уведомление без HTTP вызовов
            Note right of WS: Railway окружение поддерживает прямую отправку событий
            
            WS->>W: WebSocket событие deploy_status_update уведомляет браузер
            Note right of W: UI мгновенно обновляется - кнопка скачивания разблокируется
            Note right of W: Пользователь видит что проект готов к скачиванию
        end
        
        alt Пользователь пытается скачать проект ДО завершения инициализации
            U->>W: Клик по кнопке скачивания на онбординге (deploy_status = pending)
            Note right of U: Кнопка показывает "Initializing..." и заблокирована
            Note right of U: Показывается спиннер и текст "Project is being initialized"
            Note right of U: WebSocket подключение отслеживает статус инициализации в реальном времени
            Note right of U: Скачивание невозможно пока файлы шаблона загружаются в GitHub
            
            WS->>W: deploy_status_update событие при завершении инициализации
            Note right of W: UI автоматически обновляется через WebSocket без перезагрузки
            Note right of W: Кнопка скачивания разблокируется мгновенно
        else Пользователь скачивает проект ПОСЛЕ завершения инициализации
            U->>W: Клик по ссылке скачивания проекта (deploy_status != pending)
            W->>W: GET /api/projects/projectId/download обрабатывает запрос
            W->>GH: downloadProjectFromGitHub получает свежий ZIP из репозитория
            GH-->>W: Отправляет содержимое main ветки как ZIP архив
            W-->>U: Браузер скачивает project.zip на компьютер пользователя
            Note right of U: Проект содержит все файлы шаблона + phion агент с PROJECT_ID + VS Code extension
        end
    end

    %% === 2. LOCAL SETUP AND AGENT CONNECTION ===
    rect rgb(250, 255, 250)
        Note over U,C: 2️⃣ ЛОКАЛЬНАЯ НАСТРОЙКА - распаковка проекта и запуск синхронизации
        U->>U: Распаковывает ZIP архив в папку проекта на компьютере
        Note right of U: Получает готовую папку с package.json phion агент и git remote
        
        U->>V: Открывает папку проекта в редакторе VSCode или Cursor
        Note right of V: Редактор показывает структуру проекта и готов к редактированию
        Note right of V: VS Code Extension автоматически определяет Phion проект через phion.config.json
        
        V->>V: VSCode Extension активируется при обнаружении phion.config.json
        Note right of V: Файл расширения: templates/vite-react/scripts/auto-browser-extension/extension.js
        Note right of V: Команды: phion.startProject, phion.openPreview, phion.fixConnection
        Note right of V: Расположение: scripts/auto-browser-extension/ внутри проекта
        
        U->>U: Выполняет команды в терминале для установки зависимостей
        Note right of U: pnpm install устанавливает все зависимости проекта включая phion
        Note right of U: phion пакет содержит CLI агент и Vite plugin с toolbar
        
        U->>U: Запускает команду pnpm start для старта разработки
        Note right of U: Команда запускает одновременно pnpm dev и pnpm sync
        Note right of U: pnpm start = "pnpm install && node scripts/start-with-browser.js"
        
        par VS Code Extension автоматические действия
            V->>V: Extension проверяет запускался ли проект ранее через context.globalState
            Note right of V: Отслеживает запущенные проекты чтобы избежать дублирования auto-start
            
            alt Первое открытие проекта (AUTO_START_NEW_PROJECT = true)
                V->>V: Extension автоматически выполняет команду phion.startProject
                Note right of V: Создает терминал и запускает "pnpm start"
                V->>V: markProjectAsStarted(context) запоминает проект как запущенный
                
                V->>V: startServerMonitoring() начинает мониторинг localhost:5173
                Note right of V: Опрашивает dev сервер каждые 2 секунды ожидая готовности
                
                V->>V: Когда сервер готов, автоматически выполняет phion.openPreview
                Note right of V: Открывает http://localhost:5173 в VS Code Simple Browser
                Note right of V: Оптимизирует workspace: закрывает sidebar, terminal, открывает AI chat
            else Проект уже запускался ранее
                V->>V: Только запускает мониторинг сервера без auto-start
                Note right of V: Уважает выбор пользователя не перезапускать автоматически
            end
        end
        
        par CLI Agent запуск
            C->>C: Phion CLI агент запускается командой pnpm sync (которая вызывает "phion")
            Note right of C: CLI файл: packages/dev-agent/src/cli.ts с bin командой
            Note right of C: Читает конфигурацию из phion.config.json
            Note right of C: npm пакет "phion" версии latest установлен в проекте
            
            C->>C: checkGitRepository проверяет наличие git репозитория
            Note right of C: Если .git не найден, инициализирует репозиторий автоматически
            
            alt Git репозиторий не найден
                C->>C: initializeGitRepository автоматически настраивает git
                Note right of C: git init + remote add origin к GitHub репозиторию проекта
                C->>C: Создает initial commit с текущими файлами
                Note right of C: git add . && git commit -m "Initial commit from template"
            else Git уже настроен
                C->>C: Проверяет remote origin
                Note right of C: Выводит информацию о настроенном remote
            end
            
            C->>WS: WebSocket подключение к ws://localhost:8080/ или production URL
            Note right of C: Устанавливает постоянное соединение с облачным сервером
            Note right of C: Оптимизированное подключение - предотвращает множественные соединения
            Note right of C: Автоматическое переподключение при разрыве связи
            
            C->>WS: emit authenticate отправляет projectId и clientType agent
            Note right of C: Агент сообщает серверу к какому проекту он относится
            
            WS->>WS: socket.on authenticate обрабатывает аутентификацию в index.ts
            Note right of WS: Проверяет права доступа и добавляет в комнату проекта
            
            WS->>DB: ProjectQueries.getProjectById получает данные проекта включая GitHub repo
            Note right of DB: Возвращает github_repo_url github_repo_name owner для синхронизации
            DB-->>WS: Объект проекта с github_repo_url deploy_status created_at
            
            WS->>WS: socket.join добавляет в комнату project projectId
            Note right of WS: Все клиенты проекта получат уведомления об изменениях
            
            WS->>WS: connectedAgents.set сохраняет socketId агента
            Note right of WS: Отслеживание активных агентов для каждого проекта
            
            WS-->>C: emit authenticated подтверждает успешную аутентификацию
            Note right of C: Агент получает подтверждение и готов к работе
            
            WS->>W: io.to broadcast отправляет agent_connected всем клиентам проекта
            Note right of W: Браузер в онбординге получает уведомление о подключении агента
            
            W->>W: UI обновляет статус подключения агента в онбординге
            Note right of W: Показывает зеленую галочку "Connected!" и активирует кнопку
            Note right of W: НО НЕ ДЕЛАЕТ автоматический редирект - ждет действия пользователя
            
            C->>C: startFileWatcher запускает chokidar.watch с настройками
            Note right of C: Начинает следить за всеми файлами кроме node_modules .git dist
            Note right of C: packages/dev-agent/src/agent.ts - основной код агента
        end
        
        par Toolbar интеграция
            T->>T: Toolbar инициализируется автоматически при загрузке страницы
            Note right of T: Vite plugin из npm пакета phion автоматически внедряет toolbar
            Note right of T: НЕТ системы автообновления - toolbar распространяется через npm
            Note right of T: packages/dev-agent/src/plugin.ts обслуживает toolbar из npm пакета
            
            T->>WS: WebSocket подключение к облачному серверу
            Note right of T: Устанавливает соединение для получения статуса проекта
            T->>WS: emit toolbar_get_status отправляет PROJECT_ID
            
            WS->>WS: Добавляет toolbar в комнату проекта для уведомлений
            WS->>DB: Проверяет статус проекта и pending changes
            WS-->>T: Возвращает начальное состояние проекта
            
            T->>T: Обновляет UI на основе полученных данных
            Note right of T: Показывает количество pending changes и статус деплоя
            Note right of T: Кнопки Save All и Discard All становятся активными при наличии изменений
            Note right of T: packages/dev-agent/src/toolbar/Toolbar.tsx - основной компонент
        end
        
        alt Пользователь остается на онбординге и нажимает кнопку
            U->>W: Видит статус "Connected!" и нажимает "Continue to Development"
            Note right of U: Кнопка активна только после подключения агента
            
            W->>W: handleSetupComplete выполняет редирект на overview
            Note right of W: router.push(`/project/${project.id}/overview`)
            
            W-->>U: Перенаправляет на страницу Overview проекта
            Note right of U: Пользователь переходит к основной работе с проектом
        else Пользователь закрывает браузер или переходит по другой ссылке
            Note right of U: Локальный агент продолжает работать и синхронизировать файлы
            Note right of U: При следующем заходе на проект - автоматический редирект на overview
        end
    end

    %% === 3. FILE EDITING AND STAGING ===
    rect rgb(255, 250, 240)
        Note over V,DB: 3️⃣ РЕДАКТИРОВАНИЕ ФАЙЛОВ - изменения попадают в staging area pending_changes
        
        loop Пользователь редактирует файлы в редакторе
            U->>V: Редактирует файл например src/App.tsx в редакторе
            Note right of V: Вносит изменения в код компонента или стили
            
            V->>V: Пользователь нажимает Ctrl+S или Cmd+S для сохранения файла
            Note right of V: Файл сохраняется в локальную файловую систему
            
            V->>C: chokidar обнаруживает событие изменения файла src/App.tsx
            Note right of C: Библиотека chokidar отслеживает изменения в файловой системе
            
            C->>C: Читает новое содержимое файла с помощью fs.readFileSync
            Note right of C: Получает полный текст измененного файла
            
            C->>WS: emit file_change отправляет данные измененного файла
            Note right of C: Отправляет file_path новое содержимое и action modified
            
            WS->>WS: socket.on file_change обрабатывает событие изменения файла
            Note right of WS: Получает полное содержимое файла от локального агента
            
            WS->>DB: PendingChangesQueries.upsertPendingChange сохраняет в staging area
            Note right of DB: UPSERT INTO pending_changes с полным содержимым файла
            DB->>DB: Сохраняет project_id file_path content action modified timestamp
            
            WS->>W: io.to projectId emit file_change_staged уведомляет ВСЕ клиенты проекта
            Note right of W: Браузер получает уведомление об изменении в staging area
            WS->>T: WebSocket событие pending_changes_updated уведомляет toolbar
            Note right of T: Toolbar получает обновление о новых несохраненных изменениях
            
            W->>W: UI обновляет счетчик несохраненных изменений
            Note right of W: Показывает "3 несохраненных изменения" и кнопки Save All / Discard All
            T->>T: Обновляет счетчик изменений в интерфейсе toolbar
            Note right of T: Показывает "3 несохраненных изменения" и подсвечивает кнопки действий
        end
    end

    Note over U,N: ➡️ ПРОДОЛЖЕНИЕ ВО ВТОРОЙ ЧАСТИ: Сохранение изменений, деплой, управление проектом 