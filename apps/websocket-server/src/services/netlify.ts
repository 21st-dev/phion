import { getSupabaseServerClient, ProjectQueries } from "@shipvibes/database"
import { exec } from "child_process"
import fetch from "node-fetch"
import { promisify } from "util"

const execAsync = promisify(exec)

interface NetlifyCreateSiteResponse {
  id: string
  url: string
  admin_url: string
  name: string
  ssl_url?: string
  build_settings?: {
    repo_url?: string
    repo_branch?: string
    deploy_key_id?: string
    cmd?: string
    dir?: string
  }
}

interface NetlifyCreateSiteRequest {
  name: string
  repo?: {
    provider: "github"
    repo: string
    private: boolean
    branch: string
    installation_id: number
  }
  build_settings?: {
    cmd: string
    dir: string
    env?: Record<string, string>
  }
}

interface NetlifyWebhookResponse {
  id: string
  url: string
  event: string
  created_at: string
}

interface NetlifyDeployResponse {
  id: string
  url: string
  deploy_url: string
  state: "new" | "building" | "ready" | "error" | "enqueued"
  error_message?: string
}

interface NetlifyEnvVar {
  key: string
  value: string
  scopes: string[]
  context: string
}

interface NetlifyEnvResponse {
  key: string
  value: string
  scopes: string[]
  context: string
  updated_at: string
}

export class NetlifyService {
  private accessToken: string
  private baseUrl = "https://api.netlify.com/api/v1"
  private io?: any // Socket.io instance –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

  constructor(io?: any) {
    this.accessToken = process.env.NETLIFY_ACCESS_TOKEN!
    this.io = io

    if (!this.accessToken) {
      throw new Error("NETLIFY_ACCESS_TOKEN environment variable is required")
    }
  }

  /**
   * –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ GitHub + Netlify –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ–∞–π–ª—ã
   * Netlify –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  async hasProjectFiles(projectId: string): Promise<boolean> {
    console.log(`üìã GitHub –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ø—Ä–æ–µ–∫—Ç ${projectId} –¥–µ–ø–ª–æ–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ GitHub`)
    return true // –í—Å–µ–≥–¥–∞ true, —Ç–∞–∫ –∫–∞–∫ Netlify —Ä–∞–±–æ—Ç–∞–µ—Ç —Å GitHub
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç –Ω–∞ Netlify
   */
  async createSite(projectId: string, projectName: string): Promise<NetlifyCreateSiteResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name: `phion-${projectId.slice(0, 8)}`,
          created_via: "phion",
          session_id: projectId,
        }),
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Failed to create Netlify site: ${response.status} ${errorText}`)
      }

      const data = (await response.json()) as NetlifyCreateSiteResponse
      console.log(`‚úÖ Created Netlify site: ${data.url}`)

      return data
    } catch (error) {
      console.error("‚ùå Error creating Netlify site:", error)
      throw error
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Netlify —Å–∞–π—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
   */
  async createSiteWithGitHub(
    projectId: string,
    projectName: string,
    githubRepoName: string,
    githubOwner: string,
  ): Promise<NetlifyCreateSiteResponse> {
    try {
      // GitHub App Installation ID –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ phion-dev
      const installationId = parseInt(process.env.NETLIFY_GITHUB_INSTALLATION_ID!)

      if (!installationId || isNaN(installationId)) {
        throw new Error("NETLIFY_GITHUB_INSTALLATION_ID is required and must be a valid number")
      }

      const requestBody: NetlifyCreateSiteRequest = {
        name: `phion-${projectId.slice(0, 8)}`,
        repo: {
          provider: "github",
          repo: `${githubOwner}/${githubRepoName}`,
          private: true,
          branch: "main",
          installation_id: installationId,
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏ –¥–ª—è Vite –ø—Ä–æ–µ–∫—Ç–∞
        build_settings: {
          cmd: "pnpm install && pnpm build",
          dir: "dist",
          env: {
            NODE_VERSION: "18",
            NPM_VERSION: "9",
          },
        },
      }

      console.log("üåê Creating Netlify site with GitHub integration:", {
        projectId,
        repoName: githubRepoName,
        installationId,
        buildCmd: requestBody.build_settings?.cmd,
      })

      const response = await fetch(`${this.baseUrl}/sites`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      })

      if (!response.ok) {
        const errorText = await response.text()
        console.error("‚ùå Netlify API error:", errorText)
        throw new Error(`Failed to create Netlify site: ${response.status} ${errorText}`)
      }

      const data = (await response.json()) as NetlifyCreateSiteResponse

      console.log("‚úÖ Created Netlify site with GitHub integration:", {
        siteId: data.id,
        name: data.name,
        adminUrl: data.admin_url,
        deployKeyId: data.build_settings?.deploy_key_id,
        repoUrl: data.build_settings?.repo_url,
      })

      // –ù–ï –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –∑–¥–µ—Å—å - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
      // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º netlify_site_id

      return data
    } catch (error) {
      console.error("‚ùå Error creating Netlify site with GitHub:", error)
      throw error
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∞–π—Ç–∞
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è netlify_site_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async setupWebhookForSite(siteId: string, projectId: string): Promise<void> {
    await this.setupWebhook(siteId, projectId)
  }

  private static ngrokUrl: string | null = null

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è —Å–∞–π—Ç–∞
   */
  private async setupWebhook(siteId: string, projectId: string): Promise<void> {
    try {
      // –í development —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º ngrok
      let webhookUrl = process.env.WEBSOCKET_SERVER_URL

      if (process.env.NODE_ENV === "development" || !webhookUrl) {
        try {
          console.log("üîó Starting ngrok tunnel for development webhooks...")

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ngrok URL –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          if (!NetlifyService.ngrokUrl) {
            const ngrok = await import("@ngrok/ngrok")

            // –ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ø–æ—Ä—Ç–∞ 8080
            const listener = await ngrok.forward({
              addr: 8080,
              authtoken_from_env: true,
            })

            NetlifyService.ngrokUrl = listener.url()
            console.log(`‚úÖ Ngrok tunnel started: ${NetlifyService.ngrokUrl}`)
          }

          if (NetlifyService.ngrokUrl) {
            webhookUrl = NetlifyService.ngrokUrl
            console.log(`üåê Using ngrok URL for webhooks: ${webhookUrl}`)
          } else {
            throw new Error("Failed to get ngrok URL")
          }
        } catch (error) {
          console.error("‚ùå Failed to setup ngrok tunnel:", error)
          console.log("‚ö†Ô∏è Falling back to localhost (webhooks will not work)")
          webhookUrl = "http://localhost:8080"
        }
      }

      const webhookEndpoint = `${webhookUrl}/webhooks/netlify`

      console.log(`üîó Setting up webhook for site ${siteId} ‚Üí ${webhookEndpoint}`)

      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Netlify Deploy Notifications
      const events = ["deploy_created", "deploy_building", "deploy_failed"]
      const webhookPromises: Promise<any>[] = []

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π webhook –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
      for (const event of events) {
        const webhookPromise = fetch(`${this.baseUrl}/hooks`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${this.accessToken}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            type: "url",
            event: event,
            data: {
              url: webhookEndpoint,
            },
            site_id: siteId,
          }),
        })

        webhookPromises.push(webhookPromise)
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const responses = await Promise.all(webhookPromises)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results: { event: string; hookId: string }[] = []
      for (let i = 0; i < responses.length; i++) {
        const response = responses[i]
        const event = events[i]

        if (!response.ok) {
          const errorText = await response.text()
          console.error(`‚ùå Failed to setup webhook for event ${event}:`, errorText)
          continue
        }

        const webhookData = (await response.json()) as NetlifyWebhookResponse
        results.push({
          event,
          hookId: webhookData.id,
        })
      }

      if (results.length > 0) {
        console.log(`‚úÖ Webhooks configured for site ${siteId}:`, {
          endpoint: webhookEndpoint,
          webhooks: results,
        })
      } else {
        console.log("‚ö†Ô∏è No webhooks were successfully configured")
      }
    } catch (error) {
      console.error(`‚ùå Error setting up webhook for site ${siteId}:`, error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ webhook
      console.log("‚ö†Ô∏è Continuing without webhook setup")
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkAndUpdateDeployStatus(projectId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)
      const project = await projectQueries.getProjectById(projectId)

      if (!project || !project.netlify_site_id) {
        console.log(
          `‚ö†Ô∏è Cannot check status: project ${projectId} not found or missing netlify_site_id`,
        )
        return
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç deploy_id, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π –¥–ª—è —Å–∞–π—Ç–∞
      let deployInfo: NetlifyDeployResponse

      if (project.netlify_deploy_id) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π deploy_id –µ—Å–ª–∏ –µ—Å—Ç—å
        deployInfo = await this.getDeployStatus(project.netlify_site_id, project.netlify_deploy_id)
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π –¥–ª—è —Å–∞–π—Ç–∞
        deployInfo = await this.getLatestDeploy(project.netlify_site_id)
      }

      console.log(`üìä Netlify deploy status for ${projectId}: ${deployInfo.state}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
      if (
        (deployInfo.state === "ready" && project.deploy_status !== "ready") ||
        (deployInfo.state === "error" && project.deploy_status !== "failed")
      ) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const newStatus = deployInfo.state === "ready" ? "ready" : "failed"

        const updateData: any = {
          deploy_status: newStatus,
          netlify_deploy_id: deployInfo.id,
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å–∞–π—Ç–∞
        if (newStatus === "ready") {
          try {
            const siteInfo = await this.getSite(project.netlify_site_id)
            const finalUrl = siteInfo.ssl_url || siteInfo.url
            updateData.netlify_url = finalUrl
            console.log(`üåê Final site URL: ${finalUrl}`)
          } catch (siteError) {
            console.error(`‚ö†Ô∏è Could not get site info for URL: ${siteError}`)
            // Fallback to deploy URL if available
            if (deployInfo.deploy_url) {
              updateData.netlify_url = deployInfo.deploy_url
            }
          }
        }

        await projectQueries.updateProject(projectId, updateData)

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è
        const oldStatus = project.deploy_status || "building"
        console.log(
          `üöÄ Deploy status changed for project ${projectId}: ${oldStatus} -> ${newStatus}`,
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        if (this.io) {
          this.io.to(`project:${projectId}`).emit("deploy_status_update", {
            projectId,
            status: newStatus,
            url: updateData.netlify_url,
            timestamp: new Date().toISOString(),
          })

          console.log(
            `üì° Emitted deploy status update: ${newStatus} - ${updateData.netlify_url || "no URL"}`,
          )
        }
      }

      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å–µ –µ—â–µ building, –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –µ—â–µ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É
      if (
        deployInfo.state === "building" ||
        deployInfo.state === "enqueued" ||
        deployInfo.state === "new"
      ) {
        setTimeout(() => {
          this.checkAndUpdateDeployStatus(projectId).catch((err) => {
            console.error(`‚ùå Error checking deploy status: ${err.message}`)
          })
        }, 10000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      }
    } catch (error) {
      console.error(`‚ùå Error checking deploy status:`, error)
      // –ü—Ä–æ–¥–æ–ª–∂–∏–º –ø—ã—Ç–∞—Ç—å—Å—è, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç
      setTimeout(() => {
        this.checkAndUpdateDeployStatus(projectId).catch(() => {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        })
      }, 15000) // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π –¥–ª—è —Å–∞–π—Ç–∞
   */
  async getLatestDeploy(siteId: string): Promise<NetlifyDeployResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/deploys?per_page=1`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
          "Content-Type": "application/json",
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Failed to get latest deploy: ${response.status} ${errorText}`)
      }

      const deploys = (await response.json()) as NetlifyDeployResponse[]

      if (!deploys || deploys.length === 0) {
        throw new Error(`No deploys found for site ${siteId}`)
      }

      return deploys[0]
    } catch (error) {
      console.error("‚ùå Error getting latest deploy:", error)
      throw error
    }
  }

  /**
   * –í –Ω–æ–≤–æ–π GitHub –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Netlify –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ø–ª–æ–∏—Ç –∏–∑ GitHub
   * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫ –æ—Ç–≤–µ—Ç
   */
  async deployProject(
    siteId: string,
    projectId: string,
    commitId: string,
    title: string = "Update from Phion",
  ): Promise<NetlifyDeployResponse> {
    console.log(
      `üöÄ GitHub –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Netlify –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ø–ª–æ–∏—Ç commit ${commitId} –¥–ª—è —Å–∞–π—Ç–∞ ${siteId}`,
    )

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const mockResponse: NetlifyDeployResponse = {
      id: `auto-deploy-${Date.now()}`,
      url: `https://${siteId}.netlify.app`,
      deploy_url: `https://${siteId}.netlify.app`,
      state: "building",
    }

    console.log(`‚úÖ Netlify –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω: ${mockResponse.deploy_url}`)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–¥–æ–ª—å—à–µ, —Ç–∞–∫ –∫–∞–∫ GitHub webhook –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
    setTimeout(() => {
      this.checkAndUpdateDeployStatus(projectId).catch((error) => {
        console.error(`‚ùå Error starting deploy status check for project ${projectId}:`, error)
      })
    }, 10000)

    return mockResponse
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   */
  async getDeployStatus(siteId: string, deployId: string): Promise<NetlifyDeployResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/deploys/${deployId}`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
          "Content-Type": "application/json",
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Failed to get deploy status: ${response.status} ${errorText}`)
      }

      return (await response.json()) as NetlifyDeployResponse
    } catch (error) {
      console.error("‚ùå Error getting deploy status:", error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
   */
  async getSite(siteId: string): Promise<NetlifyCreateSiteResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
          "Content-Type": "application/json",
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Failed to get site info: ${response.status} ${errorText}`)
      }

      return (await response.json()) as NetlifyCreateSiteResponse
    } catch (error) {
      console.error("‚ùå Error getting site info:", error)
      throw error
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç
   */
  async deleteSite(siteId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Failed to delete site: ${response.status} ${errorText}`)
      }

      console.log(`‚úÖ Deleted Netlify site: ${siteId}`)
    } catch (error) {
      console.error("‚ùå Error deleting site:", error)
      throw error
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤
   */
  async checkAllActiveDeployments(): Promise<void> {
    try {
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "building"
      const buildingProjects = await projectQueries.getProjectsByDeployStatus("building")

      console.log(`üîç Found ${buildingProjects.length} projects with building status`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      for (const project of buildingProjects) {
        if (project.netlify_deploy_id) {
          console.log(`üîÑ Checking status for project ${project.id}`)
          await this.checkAndUpdateDeployStatus(project.id)

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
          await new Promise((resolve) => setTimeout(resolve, 1000))
        }
      }
    } catch (error) {
      console.error("‚ùå Error checking all active deployments:", error)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ WebSocket
   */
  private emitDeployStatus(
    projectId: string,
    deployStatusId: string,
    status: string,
    message: string,
  ) {
    if (this.io) {
      this.io.to(`project:${projectId}`).emit("deploy_status_update", {
        projectId,
        deployStatusId,
        status,
        message,
        timestamp: new Date().toISOString(),
      })
      console.log(`üì° Emitted deploy status update: ${status} - ${message}`)
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Netlify —Å–∞–π—Ç–µ
   */
  async updateEnvironmentVariables(
    siteId: string,
    envVars: Record<string, string>,
    context: string = "all",
    scopes: string[] = ["builds", "functions"],
  ): Promise<void> {
    try {
      console.log(`üîß Updating environment variables for site ${siteId}:`, {
        count: Object.keys(envVars).length,
        context,
        scopes,
      })

      // Netlify API —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
      const updatePromises = Object.entries(envVars).map(async ([key, value]) => {
        const envVar: NetlifyEnvVar = {
          key,
          value,
          scopes,
          context,
        }

        const response = await fetch(`${this.baseUrl}/sites/${siteId}/env`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${this.accessToken}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify([
            {
              key,
              values: [
                {
                  value,
                  context,
                },
              ],
              scopes,
            },
          ]),
        })

        if (!response.ok) {
          const errorText = await response.text()
          console.error(`‚ùå Failed to update env var ${key}:`, errorText)
          throw new Error(`Failed to update environment variable ${key}: ${response.status}`)
        }

        return await response.json()
      })

      await Promise.all(updatePromises)

      console.log(`‚úÖ Successfully updated ${Object.keys(envVars).length} environment variables`)
    } catch (error) {
      console.error("‚ùå Error updating environment variables:", error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–∞–π—Ç–∞
   */
  async getEnvironmentVariables(siteId: string): Promise<NetlifyEnvResponse[]> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/env`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
          "Content-Type": "application/json",
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Failed to get environment variables: ${response.status} ${errorText}`)
      }

      return (await response.json()) as NetlifyEnvResponse[]
    } catch (error) {
      console.error("‚ùå Error getting environment variables:", error)
      throw error
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  async deleteEnvironmentVariable(siteId: string, key: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/env/${key}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${this.accessToken}`,
        },
      })

      if (!response.ok) {
        const errorText = await response.text()
        throw new Error(`Failed to delete environment variable: ${response.status} ${errorText}`)
      }

      console.log(`‚úÖ Deleted environment variable: ${key}`)
    } catch (error) {
      console.error("‚ùå Error deleting environment variable:", error)
      throw error
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç .env —Ñ–∞–π–ª —Å Netlify
   */
  async syncEnvFile(
    siteId: string,
    envContent: string,
    options: {
      context?: string
      scopes?: string[]
      deleteUnused?: boolean
    } = {},
  ): Promise<void> {
    try {
      const { context = "all", scopes = ["builds", "functions"], deleteUnused = false } = options

      console.log(`üîÑ Syncing .env file with Netlify site ${siteId}`)

      // –ü–∞—Ä—Å–∏–º .env —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const envVars = this.parseEnvContent(envContent)

      if (Object.keys(envVars).length === 0) {
        console.log("‚ö†Ô∏è No environment variables found in .env content")
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
      let existingVars: NetlifyEnvResponse[] = []
      if (deleteUnused) {
        existingVars = await this.getEnvironmentVariables(siteId)
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      await this.updateEnvironmentVariables(siteId, envVars, context, scopes)

      // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (deleteUnused && existingVars.length > 0) {
        const varsToDelete = existingVars
          .filter((existing) => !envVars.hasOwnProperty(existing.key))
          .map((v) => v.key)

        for (const key of varsToDelete) {
          await this.deleteEnvironmentVariable(siteId, key)
        }

        if (varsToDelete.length > 0) {
          console.log(`üóëÔ∏è Deleted ${varsToDelete.length} unused environment variables`)
        }
      }

      console.log(`‚úÖ Environment variables synced successfully`)
    } catch (error) {
      console.error("‚ùå Error syncing env file:", error)
      throw error
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞ –≤ –æ–±—ä–µ–∫—Ç key-value
   */
  private parseEnvContent(content: string): Record<string, string> {
    const envVars: Record<string, string> = {}

    const lines = content.split("\n")
    for (const line of lines) {
      const trimmedLine = line.trim()

      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!trimmedLine || trimmedLine.startsWith("#")) {
        continue
      }

      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω KEY=value
      const match = trimmedLine.match(/^([A-Z_][A-Z0-9_]*)\s*=\s*(.*)$/)
      if (match) {
        const [, key, value] = match
        // –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const cleanValue = value.replace(/^["']|["']$/g, "")
        envVars[key] = cleanValue
      }
    }

    return envVars
  }
}
