import fetch from 'node-fetch';
import FormData from 'form-data';
import AdmZip from 'adm-zip';
import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';
import os from 'os';
import { downloadTextFile } from '@shipvibes/storage';
import { getSupabaseServerClient, FileHistoryQueries, ProjectQueries, DeployStatusQueries } from '@shipvibes/database';

const execAsync = promisify(exec);

interface NetlifyCreateSiteResponse {
  id: string;
  url: string;
  admin_url: string;
  name: string;
  ssl_url?: string;
}

interface NetlifyDeployResponse {
  id: string;
  url: string;
  deploy_url: string;
  state: 'new' | 'building' | 'ready' | 'error';
  error_message?: string;
}

export class NetlifyService {
  private accessToken: string;
  private baseUrl = 'https://api.netlify.com/api/v1';
  private io?: any; // Socket.io instance –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

  constructor(io?: any) {
    this.accessToken = process.env.NETLIFY_ACCESS_TOKEN!;
    this.io = io;
    
    if (!this.accessToken) {
      throw new Error('NETLIFY_ACCESS_TOKEN environment variable is required');
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞
   */
  private async restoreTemplateFiles(tempDir: string, existingFiles: Record<string, string>): Promise<void> {
    try {
      // –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É vite-react
      const templatePath = path.resolve(process.cwd(), '../../templates/vite-react');
      
      console.log(`üìÅ Looking for template at: ${templatePath}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
      try {
        await fs.access(templatePath);
      } catch {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø—É—Ç—å –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
        const alternativePath = path.resolve(process.cwd(), 'templates/vite-react');
        await fs.access(alternativePath);
        console.log(`üìÅ Using alternative template path: ${alternativePath}`);
      }
      
      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ existingFiles
      async function copyTemplateFiles(srcDir: string, targetDir: string, relativePath: string = '') {
        const items = await fs.readdir(srcDir, { withFileTypes: true });
        
        for (const item of items) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .git –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
          if (item.name === 'node_modules' || item.name === '.git' || item.name === 'dist' || item.name === '.next') {
            continue;
          }
          
          const srcPath = path.join(srcDir, item.name);
          const targetPath = path.join(targetDir, item.name);
          const relativeFilePath = relativePath ? path.join(relativePath, item.name) : item.name;
          
          if (item.isDirectory()) {
            await fs.mkdir(targetPath, { recursive: true });
            await copyTemplateFiles(srcPath, targetPath, relativeFilePath);
          } else {
            // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ existingFiles
            if (!existingFiles[relativeFilePath]) {
              const content = await fs.readFile(srcPath);
              await fs.writeFile(targetPath, content);
              console.log(`üìÑ Restored template file: ${relativeFilePath}`);
            }
          }
        }
      }
      
      await copyTemplateFiles(templatePath, tempDir);
      
    } catch (error) {
      console.error(`‚ùå Error restoring template files:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async getLatestProjectFiles(projectId: string): Promise<Record<string, string>> {
    try {
      const supabase = getSupabaseServerClient();
      const historyQueries = new FileHistoryQueries(supabase);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
      const allHistory = await historyQueries.getProjectFileHistory(projectId, 1000);
      
      if (allHistory.length === 0) {
        console.warn(`No file history found for project ${projectId}`);
        return {};
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ file_path –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      const latestFiles = new Map<string, typeof allHistory[0]>();
      
      for (const fileRecord of allHistory) {
        const existing = latestFiles.get(fileRecord.file_path);
        if (!existing || new Date(fileRecord.created_at) > new Date(existing.created_at)) {
          latestFiles.set(fileRecord.file_path, fileRecord);
        }
      }
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      const files: Record<string, string> = {};
      
      for (const [filePath, fileRecord] of latestFiles) {
        try {
          const content = await downloadTextFile(fileRecord.r2_object_key);
          files[filePath] = content;
        } catch (error) {
          console.warn(`Failed to download file ${filePath}:`, error);
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å
        }
      }
      
      return files;
    } catch (error) {
      console.error(`Error getting latest project files: ${error}`);
      return {};
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–ø–ª–æ—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
   */
  async hasProjectFiles(projectId: string): Promise<boolean> {
    try {
      const projectFiles = await this.getLatestProjectFiles(projectId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–µ)
      const realFiles = Object.keys(projectFiles).filter(filePath => 
        !filePath.startsWith('.shipvibes-') && 
        filePath !== '.gitkeep' &&
        filePath !== '.gitignore' &&
        filePath.trim() !== ''
      );
      
      console.log(`üìã Project ${projectId} has ${realFiles.length} deployable files:`, realFiles.slice(0, 5));
      
      return realFiles.length > 0;
    } catch (error) {
      console.error(`Error checking project files for ${projectId}:`, error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç –Ω–∞ Netlify
   */
  async createSite(projectId: string, projectName: string): Promise<NetlifyCreateSiteResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: `shipvibes-${projectId.slice(0, 8)}`,
          created_via: 'shipvibes-dev',
          session_id: projectId,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to create Netlify site: ${response.status} ${errorText}`);
      }

      const data = await response.json() as NetlifyCreateSiteResponse;
      console.log(`‚úÖ Created Netlify site: ${data.url}`);
      
      return data;
    } catch (error) {
      console.error('‚ùå Error creating Netlify site:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ (dist/)
   */
  private async createProjectZipBuffer(projectId: string): Promise<Buffer> {
    let tempDir: string | null = null;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const projectFiles = await this.getLatestProjectFiles(projectId);
      
      if (Object.keys(projectFiles).length === 0) {
        throw new Error(`No files found for project ${projectId}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
      tempDir = await fs.mkdtemp(path.join(os.tmpdir(), `shipvibes-project-${projectId}-`));
      console.log(`üìÅ Created temp directory: ${tempDir}`);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      for (const [filePath, content] of Object.entries(projectFiles)) {
        const fullPath = path.join(tempDir, filePath);
        const dir = path.dirname(fullPath);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await fs.mkdir(dir, { recursive: true });
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        if (typeof content === 'string') {
          await fs.writeFile(fullPath, content, 'utf8');
        } else if (Buffer.isBuffer(content)) {
          await fs.writeFile(fullPath, content);
        }
      }
      
      console.log(`üì¶ Project files restored to ${tempDir}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`üìã Restored files:`, Object.keys(projectFiles));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!projectFiles['package.json']) {
        console.warn(`‚ö†Ô∏è package.json not found in project files, restoring from template...`);
        await this.restoreTemplateFiles(tempDir, projectFiles);
        console.log(`‚úÖ Template files restored`);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      console.log(`üì¶ Installing dependencies...`);
      try {
        await execAsync('pnpm install', { cwd: tempDir });
        console.log(`‚úÖ Dependencies installed`);
      } catch (installError) {
        console.warn(`‚ö†Ô∏è Failed to install with pnpm, trying npm:`, installError);
        await execAsync('npm install', { cwd: tempDir });
        console.log(`‚úÖ Dependencies installed with npm`);
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
      console.log(`üî® Building project...`);
      try {
        await execAsync('pnpm build', { cwd: tempDir });
        console.log(`‚úÖ Project built successfully`);
      } catch (buildError) {
        console.warn(`‚ö†Ô∏è Failed to build with pnpm, trying npm:`, buildError);
        await execAsync('npm run build', { cwd: tempDir });
        console.log(`‚úÖ Project built successfully with npm`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ dist
      const distPath = path.join(tempDir, 'dist');
      try {
        await fs.access(distPath);
        console.log(`üìÅ Found dist directory at ${distPath}`);
      } catch {
        throw new Error(`Build did not create dist/ directory. Check if build script is configured correctly.`);
      }
      
      // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–∞–ø–∫–∏ dist
      const zip = new AdmZip();
      
      async function addDirectoryToZip(dirPath: string, zipPath: string = '') {
        const items = await fs.readdir(dirPath, { withFileTypes: true });
        
        for (const item of items) {
          const fullPath = path.join(dirPath, item.name);
          const zipItemPath = zipPath ? path.join(zipPath, item.name) : item.name;
          
          if (item.isDirectory()) {
            await addDirectoryToZip(fullPath, zipItemPath);
          } else {
            const content = await fs.readFile(fullPath);
            zip.addFile(zipItemPath, content);
          }
        }
      }
      
      await addDirectoryToZip(distPath);
      console.log(`üì¶ Created ZIP archive from dist directory`);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ZIP –∫–∞–∫ Buffer
      return zip.toBuffer();
    } catch (error) {
      console.error('‚ùå Error creating project ZIP:', error);
      throw error;
    } finally {
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      if (tempDir) {
        try {
          await fs.rm(tempDir, { recursive: true, force: true });
          console.log(`üóëÔ∏è Cleaned up temp directory: ${tempDir}`);
        } catch (cleanupError) {
          console.warn(`‚ö†Ô∏è Failed to cleanup temp directory:`, cleanupError);
        }
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async checkAndUpdateDeployStatus(projectId: string): Promise<void> {
    try {
      const supabase = getSupabaseServerClient();
      const projectQueries = new ProjectQueries(supabase);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const project = await projectQueries.getProjectById(projectId);
      if (!project || !project.netlify_site_id || !project.netlify_deploy_id) {
        console.warn(`‚ùå Cannot check deploy status for project ${projectId}: missing site_id or deploy_id`);
        return;
      }
      
      console.log(`üîç Checking deploy status for project ${projectId}, deploy ${project.netlify_deploy_id}`);
      
      const deployStatus = await this.getDeployStatus(project.netlify_site_id, project.netlify_deploy_id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      let dbStatus: 'ready' | 'building' | 'failed';
      
      switch (deployStatus.state) {
        case 'ready':
          dbStatus = 'ready';
          console.log(`‚úÖ Deploy completed for project ${projectId}`);
          break;
        case 'error':
          dbStatus = 'failed';
          console.log(`‚ùå Deploy failed for project ${projectId}: ${deployStatus.error_message || 'Unknown error'}`);
          break;
        case 'building':
        case 'new':
        default:
          dbStatus = 'building';
          console.log(`üîÑ Deploy still in progress for project ${projectId}: ${deployStatus.state}`);
          break;
      }
      
      await projectQueries.updateProject(projectId, {
        deploy_status: dbStatus,
        netlify_url: deployStatus.deploy_url || deployStatus.url
      });
      
      console.log(`üìä Updated deploy status for project ${projectId}: ${dbStatus}`);
      
      // –ï—Å–ª–∏ –¥–µ–ø–ª–æ–π –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      if (dbStatus === 'building') {
        setTimeout(() => {
          this.checkAndUpdateDeployStatus(projectId).catch(error => {
            console.error(`‚ùå Error checking deploy status for project ${projectId}:`, error);
          });
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥
      }
      
    } catch (error) {
      console.error(`‚ùå Error checking deploy status for project ${projectId}:`, error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ failed
      try {
        const supabase = getSupabaseServerClient();
        const projectQueries = new ProjectQueries(supabase);
        await projectQueries.updateProject(projectId, {
          deploy_status: 'failed'
        });
      } catch (updateError) {
        console.error(`‚ùå Error updating failed status for project ${projectId}:`, updateError);
      }
    }
  }

  /**
   * –î–µ–ø–ª–æ–π –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Netlify —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
   */
  async deployProject(
    siteId: string, 
    projectId: string, 
    commitId: string,
    title: string = 'Update from Shipvibes'
  ): Promise<NetlifyDeployResponse> {
    const supabase = getSupabaseServerClient();
    const deployStatusQueries = new DeployStatusQueries(supabase);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å—Ç–∞—Ç—É—Å–µ –¥–µ–ø–ª–æ—è
    const deployStatus = await deployStatusQueries.createDeployStatus(projectId, commitId, 'pending');
    
    try {
      console.log(`üöÄ Starting deploy for site ${siteId}...`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞—á–∞–ª–µ –¥–µ–ø–ª–æ—è
      this.emitDeployStatus(projectId, deployStatus.id, 'pending', 'Starting deployment...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
      await deployStatusQueries.updateDeployStatus(deployStatus.id, { 
        status: 'building', 
        step: 'creating_archive' 
      });
      this.emitDeployStatus(projectId, deployStatus.id, 'building', 'Creating deployment archive...');
      
      // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
      const zipBuffer = await this.createProjectZipBuffer(projectId);
      console.log(`üì¶ Created ZIP archive (${zipBuffer.length} bytes)`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Netlify
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/deploys`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/zip',
          'Content-Length': zipBuffer.length.toString(),
        },
        body: zipBuffer,
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to deploy to Netlify: ${response.status} ${errorText}`);
      }

      const data = await response.json() as NetlifyDeployResponse;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
      console.log(`üìã Full Netlify API response:`, JSON.stringify(data, null, 2));
      console.log(`üÜî Deploy ID: ${data.id}`);
      console.log(`üåê Deploy URL: ${data.deploy_url}`);
      console.log(`üìä State: ${data.state}`);
      
      console.log(`‚úÖ Deploy initiated: ${data.deploy_url || data.url || 'No URL'}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        this.checkAndUpdateDeployStatus(projectId).catch(error => {
          console.error(`‚ùå Error starting deploy status check for project ${projectId}:`, error);
        });
      }, 5000);
      
      return data;
    } catch (error) {
      console.error('‚ùå Error deploying to Netlify:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   */
  async getDeployStatus(siteId: string, deployId: string): Promise<NetlifyDeployResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/deploys/${deployId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to get deploy status: ${response.status} ${errorText}`);
      }

      return await response.json() as NetlifyDeployResponse;
    } catch (error) {
      console.error('‚ùå Error getting deploy status:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
   */
  async getSite(siteId: string): Promise<NetlifyCreateSiteResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to get site info: ${response.status} ${errorText}`);
      }

      return await response.json() as NetlifyCreateSiteResponse;
    } catch (error) {
      console.error('‚ùå Error getting site info:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç
   */
  async deleteSite(siteId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to delete site: ${response.status} ${errorText}`);
      }

      console.log(`‚úÖ Deleted Netlify site: ${siteId}`);
    } catch (error) {
      console.error('‚ùå Error deleting site:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤
   */
  async checkAllActiveDeployments(): Promise<void> {
    try {
      const supabase = getSupabaseServerClient();
      const projectQueries = new ProjectQueries(supabase);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "building"
      const buildingProjects = await projectQueries.getProjectsByDeployStatus('building');
      
      console.log(`üîç Found ${buildingProjects.length} projects with building status`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      for (const project of buildingProjects) {
        if (project.netlify_deploy_id) {
          console.log(`üîÑ Checking status for project ${project.id}`);
          await this.checkAndUpdateDeployStatus(project.id);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    } catch (error) {
      console.error('‚ùå Error checking all active deployments:', error);
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ WebSocket
   */
  private emitDeployStatus(projectId: string, deployStatusId: string, status: string, message: string) {
    if (this.io) {
      this.io.emit('deploy_status_update', {
        projectId,
        deployStatusId,
        status,
        message,
        timestamp: new Date().toISOString()
      });
      console.log(`üì° Emitted deploy status update: ${status} - ${message}`);
    }
  }
} 