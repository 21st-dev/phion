import fetch from 'node-fetch';
import FormData from 'form-data';
import AdmZip from 'adm-zip';
import { downloadTextFile } from '@shipvibes/storage';
import { getSupabaseServerClient, FileHistoryQueries } from '@shipvibes/database';

interface NetlifyCreateSiteResponse {
  id: string;
  url: string;
  admin_url: string;
  name: string;
  ssl_url?: string;
}

interface NetlifyDeployResponse {
  id: string;
  url: string;
  deploy_url: string;
  state: 'new' | 'building' | 'ready' | 'error';
  error_message?: string;
}

export class NetlifyService {
  private accessToken: string;
  private baseUrl = 'https://api.netlify.com/api/v1';

  constructor() {
    this.accessToken = process.env.NETLIFY_ACCESS_TOKEN!;
    
    if (!this.accessToken) {
      throw new Error('NETLIFY_ACCESS_TOKEN environment variable is required');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async getLatestProjectFiles(projectId: string): Promise<Record<string, string>> {
    try {
      const supabase = getSupabaseServerClient();
      const historyQueries = new FileHistoryQueries(supabase);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
      const allHistory = await historyQueries.getProjectFileHistory(projectId, 1000);
      
      if (allHistory.length === 0) {
        console.warn(`No file history found for project ${projectId}`);
        return {};
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ file_path –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      const latestFiles = new Map<string, typeof allHistory[0]>();
      
      for (const fileRecord of allHistory) {
        const existing = latestFiles.get(fileRecord.file_path);
        if (!existing || new Date(fileRecord.created_at) > new Date(existing.created_at)) {
          latestFiles.set(fileRecord.file_path, fileRecord);
        }
      }
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      const files: Record<string, string> = {};
      
      for (const [filePath, fileRecord] of latestFiles) {
        try {
          const content = await downloadTextFile(fileRecord.r2_object_key);
          files[filePath] = content;
        } catch (error) {
          console.warn(`Failed to download file ${filePath}:`, error);
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å
        }
      }
      
      return files;
    } catch (error) {
      console.error(`Error getting latest project files: ${error}`);
      return {};
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç –Ω–∞ Netlify
   */
  async createSite(projectId: string, projectName: string): Promise<NetlifyCreateSiteResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: `shipvibes-${projectId.slice(0, 8)}`,
          created_via: 'shipvibes-dev',
          session_id: projectId,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to create Netlify site: ${response.status} ${errorText}`);
      }

      const data = await response.json() as NetlifyCreateSiteResponse;
      console.log(`‚úÖ Created Netlify site: ${data.url}`);
      
      return data;
    } catch (error) {
      console.error('‚ùå Error creating Netlify site:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
   */
  private async createProjectZipBuffer(projectId: string): Promise<Buffer> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const projectFiles = await this.getLatestProjectFiles(projectId);
      
      if (Object.keys(projectFiles).length === 0) {
        throw new Error(`No files found for project ${projectId}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å –ø–æ–º–æ—â—å—é AdmZip
      const zip = new AdmZip();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤
      for (const [filePath, content] of Object.entries(projectFiles)) {
        // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
        const normalizedPath = filePath.startsWith('/') ? filePath.slice(1) : filePath;
        
        if (typeof content === 'string') {
          zip.addFile(normalizedPath, Buffer.from(content, 'utf8'));
        } else if (Buffer.isBuffer(content)) {
          zip.addFile(normalizedPath, content);
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ZIP –∫–∞–∫ Buffer
      return zip.toBuffer();
    } catch (error) {
      console.error('‚ùå Error creating project ZIP:', error);
      throw error;
    }
  }

  /**
   * –î–µ–ø–ª–æ–π –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Netlify
   */
  async deployProject(
    siteId: string, 
    projectId: string, 
    title: string = 'Auto-deploy from Shipvibes'
  ): Promise<NetlifyDeployResponse> {
    try {
      console.log(`üöÄ Starting deploy for site ${siteId}...`);
      
      // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞
      const zipBuffer = await this.createProjectZipBuffer(projectId);
      console.log(`üì¶ Created ZIP archive (${zipBuffer.length} bytes)`);

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formData = new FormData();
      formData.append('title', title);
      formData.append('zip', zipBuffer, {
        filename: 'project.zip',
        contentType: 'application/zip',
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Netlify
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/builds`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          ...formData.getHeaders(),
        },
        body: formData as any,
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to deploy to Netlify: ${response.status} ${errorText}`);
      }

      const data = await response.json() as NetlifyDeployResponse;
      console.log(`‚úÖ Deploy initiated: ${data.deploy_url}`);
      
      return data;
    } catch (error) {
      console.error('‚ùå Error deploying to Netlify:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
   */
  async getDeployStatus(siteId: string, deployId: string): Promise<NetlifyDeployResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}/deploys/${deployId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to get deploy status: ${response.status} ${errorText}`);
      }

      return await response.json() as NetlifyDeployResponse;
    } catch (error) {
      console.error('‚ùå Error getting deploy status:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
   */
  async getSite(siteId: string): Promise<NetlifyCreateSiteResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to get site info: ${response.status} ${errorText}`);
      }

      return await response.json() as NetlifyCreateSiteResponse;
    } catch (error) {
      console.error('‚ùå Error getting site info:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç
   */
  async deleteSite(siteId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to delete site: ${response.status} ${errorText}`);
      }

      console.log(`‚úÖ Deleted Netlify site: ${siteId}`);
    } catch (error) {
      console.error('‚ùå Error deleting site:', error);
      throw error;
    }
  }
} 