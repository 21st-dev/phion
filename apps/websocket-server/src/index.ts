import cors from "cors"
import "dotenv/config"
import express from "express"
import { createServer } from "http"
import { Server } from "socket.io"
import { githubAppService } from "./services/github.js"

// Imports –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–∞–º–∏
import {
  CommitHistoryQueries,
  FileHistoryQueries,
  getSupabaseServerClient,
  PendingChangesQueries,
  ProjectQueries,
} from "@shipvibes/database"
// R2 –∏–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º GitHub API
import { NetlifyService } from "./services/netlify.js"

const app = express()
const httpServer = createServer(app)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Express
app.use(
  cors({
    origin: process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3004",
    credentials: true,
  }),
)

app.use(express.json())

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
const io = new Server(httpServer, {
  cors: {
    origin: process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3004",
    methods: ["GET", "POST"],
    credentials: true,
  },
  // üöÄ PRODUCTION CONFIGURATION
  pingTimeout: 60000, // 60 seconds - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ ping
  pingInterval: 25000, // 25 seconds - –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ ping
  upgradeTimeout: 30000, // 30 seconds - –≤—Ä–µ–º—è –Ω–∞ upgrade to websocket
  allowUpgrades: true,
  transports: ["websocket", "polling"], // Support both for reliability

  // Engine.IO configuration for production
  maxHttpBufferSize: 1e6, // 1MB max message size
  allowEIO3: false, // Disable legacy Engine.IO v3

  // Connection management
  connectionStateRecovery: {
    maxDisconnectionDuration: 2 * 60 * 1000, // 2 minutes
    skipMiddlewares: true,
  },

  // Adapter configuration for scaling (if needed)
  cleanupEmptyChildNamespaces: true,
})

// üîÑ CONNECTION MONITORING & MANAGEMENT
const connectionMonitor = {
  // Track connection attempts per IP to prevent spam
  connectionAttempts: new Map<string, { count: number; lastAttempt: number }>(),

  // Track active connections per project to prevent storms
  activeConnections: new Map<string, Set<string>>(), // projectId -> socketIds

  // Connection rate limiting
  isRateLimited(ip: string): boolean {
    const now = Date.now()
    const attempts = this.connectionAttempts.get(ip)

    if (!attempts) {
      this.connectionAttempts.set(ip, { count: 1, lastAttempt: now })
      return false
    }

    // Reset counter if last attempt was more than 1 minute ago
    if (now - attempts.lastAttempt > 60000) {
      this.connectionAttempts.set(ip, { count: 1, lastAttempt: now })
      return false
    }

    // Allow max 10 connections per minute per IP
    if (attempts.count >= 10) {
      console.log(`‚ö†Ô∏è Rate limit exceeded for IP ${ip} (${attempts.count} attempts)`)
      return true
    }

    attempts.count++
    attempts.lastAttempt = now
    return false
  },

  // Add connection to project monitoring
  addConnection(projectId: string, socketId: string): void {
    if (!this.activeConnections.has(projectId)) {
      this.activeConnections.set(projectId, new Set())
    }
    this.activeConnections.get(projectId)!.add(socketId)

    const connectionCount = this.activeConnections.get(projectId)!.size
    if (connectionCount > 5) {
      console.log(`‚ö†Ô∏è High connection count for project ${projectId}: ${connectionCount} clients`)
    }
  },

  // Remove connection from monitoring
  removeConnection(projectId: string, socketId: string): void {
    const connections = this.activeConnections.get(projectId)
    if (connections) {
      connections.delete(socketId)
      if (connections.size === 0) {
        this.activeConnections.delete(projectId)
      }
    }
  },

  // Get connection statistics
  getStats(): {
    totalProjects: number
    totalConnections: number
    connectionsPerProject: Record<string, number>
  } {
    const stats = {
      totalProjects: this.activeConnections.size,
      totalConnections: 0,
      connectionsPerProject: {} as Record<string, number>,
    }

    for (const [projectId, connections] of this.activeConnections) {
      const count = connections.size
      stats.totalConnections += count
      stats.connectionsPerProject[projectId] = count
    }

    return stats
  },
}

// ü©∫ HEALTH CHECK: Log connection statistics every 2 minutes
setInterval(() => {
  const stats = connectionMonitor.getStats()
  console.log(
    `üìä [HEALTH] Active connections: ${stats.totalConnections} across ${stats.totalProjects} projects`,
  )

  // Log projects with high connection counts
  for (const [projectId, count] of Object.entries(stats.connectionsPerProject)) {
    if (count > 3) {
      console.log(`‚ö†Ô∏è [HEALTH] Project ${projectId} has ${count} connections`)
    }
  }
}, 120000) // Every 2 minutes

// üßπ CLEANUP: Remove old connection attempt records every 5 minutes
setInterval(() => {
  const now = Date.now()
  const cutoff = 5 * 60 * 1000 // 5 minutes

  for (const [ip, attempts] of connectionMonitor.connectionAttempts) {
    if (now - attempts.lastAttempt > cutoff) {
      connectionMonitor.connectionAttempts.delete(ip)
    }
  }
}, 300000) // Every 5 minutes

const PORT = process.env.WEBSOCKET_PORT || 8080

// –°–æ–∑–¥–∞–µ–º Netlify —Å–µ—Ä–≤–∏—Å
const netlifyService = new NetlifyService(io)

// –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤
setInterval(() => {
  netlifyService.checkAllActiveDeployments().catch((error) => {
    console.error("‚ùå Error checking active deployments:", error)
  })
}, 30000)

// HTTP API endpoints
app.post("/api/deploy", async (req, res) => {
  try {
    const { projectId, commitId, action } = req.body

    if (!projectId || action !== "deploy") {
      return res.status(400).json({
        success: false,
        error: "Invalid request. ProjectId and action=deploy required.",
      })
    }

    console.log(
      `üöÄ HTTP Deploy request received for project: ${projectId}, commit: ${commitId || "latest"}`,
    )

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å commitId
    if (commitId) {
      triggerDeploy(projectId, commitId).catch((error) => {
        console.error(`‚ùå Deploy failed for project ${projectId}:`, error)
      })
    } else {
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –¥–µ–ø–ª–æ–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–º–∏—Ç–∞
      const supabase = getSupabaseServerClient()
      const pendingQueries = new PendingChangesQueries(supabase)
      const historyQueries = new FileHistoryQueries(supabase)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ pending changes –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π
      const pendingChanges = await pendingQueries.getAllPendingChanges(projectId)
      const existingFiles = await historyQueries.getProjectFileHistory(projectId, 1)

      if (pendingChanges.length === 0 && existingFiles.length > 0) {
        // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        const lastCommitId = existingFiles[0]?.commit_id
        if (lastCommitId) {
          console.log(`üìÑ No changes to deploy, using existing commit: ${lastCommitId}`)
          triggerDeploy(projectId, lastCommitId).catch((error) => {
            console.error(`‚ùå Deploy failed for project ${projectId}:`, error)
          })
        } else {
          console.log(`‚ùå No changes and no existing commits for project ${projectId}`)
          res.status(400).json({
            success: false,
            error: "No changes to deploy and no existing commits",
          })
          return
        }
      } else {
        // –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π - —Å–æ–∑–¥–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç
        saveFullProjectSnapshot(projectId, "Manual deploy via HTTP API")
          .then((newCommitId) => {
            return triggerDeploy(projectId, newCommitId)
          })
          .catch((error) => {
            console.error(`‚ùå Deploy failed for project ${projectId}:`, error)
          })
      }
    }

    res.json({
      success: true,
      message: "Deploy triggered successfully",
      projectId,
      commitId: commitId || "will_be_generated",
    })
  } catch (error) {
    console.error("‚ùå Error in /api/deploy:", error)
    res.status(500).json({
      success: false,
      error: "Internal server error",
    })
  }
})

app.get("/health", (req, res) => {
  const stats = connectionMonitor.getStats()
  res.json({
    status: "ok",
    service: "websocket-server",
    uptime: process.uptime(),
    connections: {
      total: stats.totalConnections,
      projects: stats.totalProjects,
      perProject: stats.connectionsPerProject,
    },
    memory: {
      used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
      total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),
      external: Math.round(process.memoryUsage().external / 1024 / 1024),
    },
    timestamp: new Date().toISOString(),
  })
})

// ========= TOOLBAR UPDATE API ENDPOINTS =========

// Push toolbar update to specific project
app.post("/api/toolbar/push-update", async (req, res) => {
  try {
    const { projectId, version, forceUpdate, releaseNotes, channel } = req.body

    if (!projectId || !version) {
      return res.status(400).json({
        error: "Missing required fields: projectId, version",
      })
    }

    console.log(
      `üöÄ [PUSH_UPDATE] Pushing toolbar update to project ${projectId}: v${version} (force: ${forceUpdate})`,
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø—Ä–æ–µ–∫—Ç–∞
    io.to(`project:${projectId}`).emit("toolbar_update_available", {
      version,
      forceUpdate: forceUpdate || false,
      releaseNotes: releaseNotes || `New version ${version} is available`,
      channel: channel || "stable",
    })

    res.json({
      success: true,
      message: `Update pushed to project ${projectId}`,
      version,
      forceUpdate,
    })
  } catch (error) {
    console.error("‚ùå [PUSH_UPDATE] Error pushing toolbar update:", error)
    res.status(500).json({
      error: "Failed to push update",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

// Broadcast toolbar update to all projects
app.post("/api/toolbar/broadcast-update", async (req, res) => {
  try {
    const { version, forceUpdate, releaseNotes, channel } = req.body

    if (!version) {
      return res.status(400).json({
        error: "Missing required field: version",
      })
    }

    console.log(
      `üì¢ [BROADCAST_UPDATE] Broadcasting toolbar update to all projects: v${version} (force: ${forceUpdate})`,
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit("toolbar_update_available", {
      version,
      forceUpdate: forceUpdate || false,
      releaseNotes: releaseNotes || `New version ${version} is available`,
      channel: channel || "stable",
    })

    res.json({
      success: true,
      message: `Update broadcasted to all projects`,
      version,
      forceUpdate,
    })
  } catch (error) {
    console.error("‚ùå [BROADCAST_UPDATE] Error broadcasting toolbar update:", error)
    res.status(500).json({
      error: "Failed to broadcast update",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

// Force toolbar reload for specific project
app.post("/api/toolbar/force-reload", async (req, res) => {
  try {
    const { projectId, reason } = req.body

    if (!projectId) {
      return res.status(400).json({
        error: "Missing required field: projectId",
      })
    }

    console.log(
      `üîÑ [FORCE_RELOAD] Forcing toolbar reload for project ${projectId}: ${reason || "no reason"}`,
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    io.to(`project:${projectId}`).emit("toolbar_reload", {
      reason: reason || "Admin requested reload",
    })

    res.json({
      success: true,
      message: `Reload command sent to project ${projectId}`,
      reason,
    })
  } catch (error) {
    console.error("‚ùå [FORCE_RELOAD] Error forcing toolbar reload:", error)
    res.status(500).json({
      error: "Failed to force reload",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞
app.get("/api/version", (req, res) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
    res.json({
      latestAgentVersion: "1.0.0",
      serverVersion: "1.0.0",
      updateAvailable: false,
    })
  } catch (error) {
    console.error("‚ùå Error in /api/version:", error)
    res.status(500).json({
      error: "Failed to get version info",
    })
  }
})

console.log("üöÄ Starting Phion WebSocket Server...")
console.log(`üì° Port: ${PORT}`)

// –£–î–ê–õ–ï–ù–û: extractAndSaveTemplateFiles –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
// –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ GitHub API

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ö–ê–ö –û–î–ò–ù –ö–û–ú–ú–ò–¢
 */
async function saveFullProjectSnapshot(projectId: string, commitMessage?: string): Promise<string> {
  try {
    console.log(`üíæ Starting full project snapshot for ${projectId}...`)

    // –ü–æ–ª—É—á–∞–µ–º pending changes
    const supabase = getSupabaseServerClient()
    const pendingQueries = new PendingChangesQueries(supabase)
    const projectQueries = new ProjectQueries(supabase)
    const commitHistoryQueries = new CommitHistoryQueries(supabase)

    const pendingChanges = await pendingQueries.getAllPendingChanges(projectId)
    console.log(`üìã Found ${pendingChanges.length} pending changes for project ${projectId}`)

    if (pendingChanges.length === 0) {
      console.log(`‚ö†Ô∏è No pending changes found for project ${projectId}, nothing to save`)
      throw new Error("No pending changes to save")
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    const project = await projectQueries.getProjectById(projectId)
    if (!project || !project.github_repo_name) {
      throw new Error(`Project ${projectId} not found or missing GitHub repository`)
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    const finalCommitMessage =
      commitMessage || `Save project changes (${pendingChanges.length} files)`
    console.log(`üìÑ Creating GitHub commit: ${finalCommitMessage}`)

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç –≤ GitHub –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const commits: string[] = []
    for (const change of pendingChanges) {
      try {
        if (change.action === "deleted") {
          // TODO: Implement file deletion in GitHub
          console.log(`‚ö†Ô∏è File deletion not yet implemented: ${change.file_path}`)
          continue
        }

        const result = await githubAppService.createOrUpdateFile(
          project.github_repo_name!,
          change.file_path,
          change.content,
          `Update ${change.file_path}`,
        )

        commits.push(result.commit.sha)
        console.log(`‚úÖ Updated file in GitHub: ${change.file_path} (${result.commit.sha})`)
      } catch (error) {
        console.error(`‚ùå Failed to update file ${change.file_path} in GitHub:`, error)
        throw error
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const mainCommitSha = commits[commits.length - 1] // –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
    await commitHistoryQueries.createCommitHistory({
      project_id: projectId,
      commit_message: finalCommitMessage,
      github_commit_sha: mainCommitSha,
      github_commit_url: `https://github.com/${project.github_owner}/${project.github_repo_name}/commit/${mainCommitSha}`,
      files_count: pendingChanges.length,
    })

    // üéØ –¢–û–õ–¨–ö–û –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å Netlify —Å–∞–π—Ç
    const isFirstUserCommit = !project.netlify_site_id
    if (isFirstUserCommit) {
      console.log(
        `üåê [FIRST_COMMIT] Creating Netlify site for project ${projectId} AFTER user commit...`,
      )

      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Netlify —Å–µ—Ä–≤–∏—Å
        const { NetlifyService } = await import("./services/netlify.js")
        const netlifyService = new NetlifyService()

        // üéØ –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º Netlify —Å–∞–π—Ç - –æ–Ω —Å—Ä–∞–∑—É –±—É–¥–µ—Ç –¥–µ–ø–ª–æ–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        const netlifySite = await netlifyService.createSiteWithGitHub(
          projectId,
          project.name,
          project.github_repo_name,
          "phion-dev",
        )

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º netlify_site_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await projectQueries.updateProject(projectId, {
          netlify_site_id: netlifySite.id,
          deploy_status: "building", // –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ø–ª–æ–∏—Ç—å—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        })

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhooks –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–ø–ª–æ–µ
        await netlifyService.setupWebhookForSite(netlifySite.id, projectId)

        console.log(
          `‚úÖ [FIRST_COMMIT] Netlify site created: ${netlifySite.id} for project ${projectId} - will deploy latest commit ${mainCommitSha}`,
        )
      } catch (error) {
        console.error(
          `‚ùå [FIRST_COMMIT] Failed to create Netlify site for project ${projectId}:`,
          error,
        )
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –∫–æ–º–º–∏—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, Netlify –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
      }
    }

    // –û—á–∏—â–∞–µ–º pending changes –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
    await pendingQueries.clearAllPendingChanges(projectId)

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É pending changes
    console.log(`üßπ Cleared ${pendingChanges.length} pending changes for project ${projectId}`)

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    console.log(
      `üìù Commit created: ${mainCommitSha} for project ${projectId} (${pendingChanges.length} files)`,
    )

    // –î–û–ë–ê–í–õ–Ø–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ –° –õ–û–ö–ê–õ–¨–ù–´–ú –ê–ì–ï–ù–¢–û–ú
    // –°–æ–≥–ª–∞—Å–Ω–æ sequenceDiagram.ini —Å—Ç—Ä–æ–∫–∏ 313-328
    try {
      console.log(
        `üîÑ Syncing local agent with new commit ${mainCommitSha} for project ${projectId}`,
      )

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è git pull
      const temporaryToken = await githubAppService.createTemporaryToken()

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É git pull —Å —Ç–æ–∫–µ–Ω–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
      io.to(`project:${projectId}`).emit("git_pull_with_token", {
        projectId,
        token: temporaryToken,
        repoUrl: project.github_repo_url,
      })

      console.log(`‚úÖ Git pull command sent to local agent for project ${projectId}`)
    } catch (syncError) {
      console.error(`‚ùå Error syncing local agent for project ${projectId}:`, syncError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –∫–æ–º–º–∏—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
    }

    console.log(
      `‚úÖ GitHub commit created: ${mainCommitSha} with ${pendingChanges.length} files${
        isFirstUserCommit ? " (first user commit + Netlify site created)" : ""
      }`,
    )
    return mainCommitSha
  } catch (error) {
    console.error(`‚ùå Error in saveFullProjectSnapshot for project ${projectId}:`, error)
    throw error
  }
}

async function triggerDeploy(projectId: string, commitSha: string): Promise<void> {
  try {
    console.log(`üöÄ GitHub commit ${commitSha} created for project ${projectId}`)
    console.log(`üåê Netlify will automatically deploy from GitHub webhook...`)

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: Netlify –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ø–ª–æ–∏—Ç –ø—Ä–∏ GitHub –∫–æ–º–º–∏—Ç–µ
    // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "building" –∏ –∂–¥–µ–º webhook –æ—Ç Netlify

    const supabase = getSupabaseServerClient()
    const projectQueries = new ProjectQueries(supabase)

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è
    console.log(`üöÄ Deploy status changed: pending -> building for project ${projectId}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - Netlify –Ω–∞—á–Ω–µ—Ç –¥–µ–ø–ª–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    await projectQueries.updateProject(projectId, {
      deploy_status: "building",
    })

    // –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–µ–ø–ª–æ—è
    io.to(`project:${projectId}`).emit("deploy_status_update", {
      projectId,
      status: "building",
      timestamp: new Date().toISOString(),
    })

    console.log(`‚úÖ GitHub commit created, Netlify auto-deploy initiated for project ${projectId}`)
    console.log(`üì° Emitted deploy_status_update: building`)
  } catch (error) {
    console.error(`‚ùå Error in deploy trigger for project ${projectId}:`, error)

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.log(`‚ùå Deploy status changed: building -> failed for project ${projectId}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –∫–∞–∫ failed
    try {
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)
      await projectQueries.updateProject(projectId, {
        deploy_status: "failed",
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–µ–ø–ª–æ—è
      io.to(`project:${projectId}`).emit("deploy_status_update", {
        projectId,
        status: "failed",
        error: error instanceof Error ? error.message : "Deploy failed",
        timestamp: new Date().toISOString(),
      })
    } catch (updateError) {
      console.error("‚ùå Error updating deploy status:", updateError)
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
 */
async function checkAndTriggerInitialDeploy(projectId: string): Promise<void> {
  try {
    console.log(`üîç Checking if initial deploy needed for project ${projectId}...`)

    const supabase = getSupabaseServerClient()
    const projectQueries = new ProjectQueries(supabase)
    const historyQueries = new FileHistoryQueries(supabase)

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    const project = await projectQueries.getProjectById(projectId)
    if (!project) {
      console.log(`‚ùå Project ${projectId} not found`)
      return
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 1: –ï—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ —É–∂–µ –µ—Å—Ç—å netlify_url, —Ç–æ –¥–µ–ø–ª–æ–π —É–∂–µ –±—ã–ª
    if (project.netlify_url) {
      console.log(`‚úÖ Project ${projectId} already has deployment: ${project.netlify_url}`)
      return
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 2: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ 'ready' - –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω
    if (project.deploy_status === "ready") {
      console.log(`‚úÖ Project ${projectId} deploy status is 'ready', skipping auto-deploy`)
      return
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 3: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 'building' - –¥–µ–ø–ª–æ–π —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if (project.deploy_status === "building") {
      console.log(`‚è≥ Project ${projectId} is already building, skipping auto-deploy`)
      return
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–º–º–∏—Ç—ã (–ª—é–±—ã–µ –∫–æ–º–º–∏—Ç—ã –æ–∑–Ω–∞—á–∞—é—Ç —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞)
    const existingCommits = await historyQueries.getProjectFileHistory(projectId, 1)
    if (existingCommits.length > 0) {
      console.log(`üìÑ Project ${projectId} already has commits, skipping auto-deploy`)
      return
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã)
    const projectAge =
      Date.now() - (project.created_at ? new Date(project.created_at).getTime() : Date.now())
    const fiveMinutes = 5 * 60 * 1000

    if (projectAge >= fiveMinutes) {
      console.log(
        `‚è∞ Project ${projectId} is too old (${Math.round(
          projectAge / 1000,
        )}s), skipping auto-deploy`,
      )
      return
    }

    // –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –ø—Ä–æ–µ–∫—Ç –Ω–æ–≤—ã–π –∏ –ø—É—Å—Ç–æ–π, –Ω—É–∂–µ–Ω –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π
    console.log(
      `üöÄ Project ${projectId} is new and empty (${Math.round(
        projectAge / 1000,
      )}s old), starting initial deploy...`,
    )

    try {
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê GitHub: –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–∏—Ç—ã –≤ GitHub —á–µ—Ä–µ–∑ commit_history
      const supabaseMain = getSupabaseServerClient()
      const commitHistoryQueries = new CommitHistoryQueries(supabaseMain)
      const existingCommits = await commitHistoryQueries.getProjectCommitHistory(projectId)

      let commitSha: string

      if (existingCommits.length > 0) {
        // –ï—Å—Ç—å –∫–æ–º–º–∏—Ç—ã –≤ GitHub - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        commitSha = existingCommits[0].github_commit_sha
        console.log(`üì¶ Using existing GitHub commit: ${commitSha}`)
      } else if (project.github_repo_name) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–∏—Ç—ã –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        console.log(`üì¶ No commit history found, checking GitHub directly...`)

        try {
          const commits = await githubAppService.getCommits(project.github_repo_name)
          if (commits.length > 0) {
            commitSha = commits[0].sha
            console.log(`üì¶ Found GitHub commit: ${commitSha}`)

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–∏—Ç –≤ –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await commitHistoryQueries.createCommitHistory({
              project_id: projectId,
              commit_message: commits[0].commit.message,
              github_commit_sha: commitSha,
              github_commit_url: commits[0].html_url,
              files_count: 1,
            })
          } else {
            console.log(`üì¶ No commits found in GitHub, skipping initial deploy`)
            return // –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
          }
        } catch (githubError) {
          console.log(`üì¶ Error checking GitHub commits: ${githubError}, skipping initial deploy`)
          return
        }
      } else {
        console.log(`üì¶ No GitHub repo configured, skipping initial deploy`)
        return
      }

      // –î–µ–ø–ª–æ–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç
      await triggerDeploy(projectId, commitSha)
      console.log(`‚úÖ Initial deploy triggered for project ${projectId} with commit ${commitSha}`)
    } catch (error) {
      console.error(`‚ùå Error in initial deploy for project ${projectId}:`, error)
      // –ù–µ —Å–æ–∑–¥–∞–µ–º fallback - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }
  } catch (error) {
    console.error(`‚ùå Error in checkAndTriggerInitialDeploy for project ${projectId}:`, error)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
const connectedAgents = new Map<string, Set<string>>() // projectId -> Set<socketId>

io.on("connection", (socket) => {
  // üö® RATE LIMITING: Check if this IP is being rate limited
  const clientIp = socket.handshake.address || socket.conn.remoteAddress || "unknown"

  if (connectionMonitor.isRateLimited(clientIp)) {
    console.log(`üö´ [RATE_LIMIT] Connection from ${clientIp} blocked (rate limited)`)
    socket.emit("error", {
      message: "Rate limit exceeded. Please try again later.",
    })
    socket.disconnect(true)
    return
  }

  console.log(`‚úÖ Client connected: ${socket.id} from ${clientIp}`)

  // üïê CONNECTION TIMEOUT: Auto-disconnect if not authenticated within 30 seconds
  const authTimeout = setTimeout(() => {
    if (!socket.data.projectId) {
      console.log(`‚è∞ [TIMEOUT] Socket ${socket.id} not authenticated within 30s, disconnecting`)
      socket.emit("error", { message: "Authentication timeout" })
      socket.disconnect(true)
    }
  }, 30000)

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
  socket.on("authenticate", (data) => {
    clearTimeout(authTimeout) // Clear the auth timeout

    const { projectId, token, clientType, connectionId } = data

    if (!projectId) {
      console.log(`‚ùå [AUTH] Missing projectId from socket ${socket.id}`)
      socket.emit("error", { message: "Project ID is required" })
      return
    }

    console.log(
      `üîê [AUTH] Socket ${socket.id} authenticating for project ${projectId} as ${
        clientType || "web"
      } (connectionId: ${connectionId})`,
    )

    // üö´ CHECK FOR DUPLICATE CONNECTIONS from same client
    const existingConnections = connectionMonitor.activeConnections.get(projectId)
    if (existingConnections && existingConnections.size >= 3) {
      console.log(
        `‚ö†Ô∏è [AUTH] High connection count (${existingConnections.size}) for project ${projectId}, checking for duplicates`,
      )
      // Log existing connection IDs for debugging
      const roomClients = io.sockets.adapter.rooms.get(`project:${projectId}`)
      if (roomClients) {
        console.log(`üìä [AUTH] Existing connections: ${Array.from(roomClients).join(", ")}`)
      }
    }

    // üìä ADD TO CONNECTION MONITORING
    connectionMonitor.addConnection(projectId, socket.id)

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
    socket.join(`project:${projectId}`)
    socket.data.projectId = projectId
    socket.data.clientType = clientType || "web" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é web-–∫–ª–∏–µ–Ω—Ç

    console.log(
      `üîê Client ${socket.id} authenticated for project ${projectId} (type: ${socket.data.clientType})`,
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    const roomClients = io.sockets.adapter.rooms.get(`project:${projectId}`)
    const clientCount = roomClients ? roomClients.size : 0
    const clientIds = roomClients ? Array.from(roomClients) : []

    console.log(
      `üìä [AUTH] Project ${projectId} room now has ${clientCount} clients: ${clientIds.join(", ")}`,
    )

    socket.emit("authenticated", { success: true, projectId })

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–≥–µ–Ω—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if (clientType === "agent") {
      if (!connectedAgents.has(projectId)) {
        connectedAgents.set(projectId, new Set())
      }
      connectedAgents.get(projectId)!.add(socket.id)

      console.log(`ü§ñ [AUTH] Agent ${socket.id} added to project ${projectId} agents list`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –í –ö–û–ú–ù–ê–¢–ï –ü–†–û–ï–ö–¢–ê –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞
      io.to(`project:${projectId}`).emit("agent_connected", {
        projectId,
        clientId: socket.id,
        timestamp: new Date().toISOString(),
      })

      console.log(`üì° Emitted agent_connected event for project ${projectId} to project room`)

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
      console.log(`üîå Agent connected: ${socket.id} to project ${projectId}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π
      checkAndTriggerInitialDeploy(projectId).catch((error) => {
        console.error(`‚ùå Error checking initial deploy for project ${projectId}:`, error)
      })
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    if (clientType === "web" || !clientType) {
      const projectAgents = connectedAgents.get(projectId)
      if (projectAgents && projectAgents.size > 0) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –∞–≥–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        socket.emit("agent_connected", {
          projectId,
          clientId: Array.from(projectAgents)[0], // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
          timestamp: new Date().toISOString(),
        })

        console.log(
          `üì° Sent existing agent status to new web client ${socket.id} for project ${projectId}`,
        )
      }
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ (TRACKING –¢–û–õ–¨–ö–û)
  socket.on("file_change", async (data) => {
    try {
      const { projectId, filePath, content, hash, timestamp } = data

      if (!projectId || !filePath || content === undefined) {
        socket.emit("error", { message: "Missing required fields" })
        return
      }

      console.log(`üìù File change tracked: ${filePath} in project ${projectId}`)

      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_changes (–ù–ï –≤ file_history)
      const supabase = getSupabaseServerClient()
      const pendingQueries = new PendingChangesQueries(supabase)
      const historyQueries = new FileHistoryQueries(supabase)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (modified/added)
      const existingChange = await pendingQueries.getPendingChange(projectId, filePath)
      const lastVersion = await historyQueries.getLatestFileVersion(projectId, filePath)

      let action: "modified" | "added" = "added"
      if (existingChange || lastVersion) {
        action = "modified"
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending change
      await pendingQueries.upsertPendingChange({
        project_id: projectId,
        file_path: filePath,
        content: content,
        action: action,
        content_hash: hash,
        file_size: Buffer.byteLength(content, "utf-8"),
      })

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      console.log(`üìù File ${action}: ${filePath} in project ${projectId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –æ staged –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      const eventData = {
        projectId,
        filePath,
        content,
        action,
        timestamp: Date.now(),
        status: "staged",
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const roomClients = io.sockets.adapter.rooms.get(`project:${projectId}`)
      const clientCount = roomClients ? roomClients.size : 0

      console.log(`üì° [WebSocket] Sending file_change_staged event to project:${projectId}`, {
        filePath,
        action,
        contentLength: content?.length || 0,
        clientsInRoom: clientCount,
      })

      io.to(`project:${projectId}`).emit("file_change_staged", eventData)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      socket.emit("file_tracked", {
        filePath,
        action,
        timestamp: Date.now(),
        status: "tracked",
      })
    } catch (error) {
      console.error("‚ùå Error tracking file change:", error)
      socket.emit("error", { message: "Failed to track file change" })
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (TRACKING –¢–û–õ–¨–ö–û)
  socket.on("file_delete", async (data) => {
    try {
      const { projectId, filePath, timestamp } = data

      if (!projectId || !filePath) {
        socket.emit("error", { message: "Missing required fields" })
        return
      }

      console.log(`üóëÔ∏è File delete tracked: ${filePath} in project ${projectId}`)

      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_changes –∫–∞–∫ deleted
      const supabase = getSupabaseServerClient()
      const pendingQueries = new PendingChangesQueries(supabase)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending change —Å action: deleted
      await pendingQueries.upsertPendingChange({
        project_id: projectId,
        file_path: filePath,
        content: "", // –ü—É—Å—Ç–æ–π content –¥–ª—è deleted —Ñ–∞–π–ª–æ–≤
        action: "deleted",
        file_size: 0,
      })

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –æ staged —É–¥–∞–ª–µ–Ω–∏–∏
      io.to(`project:${projectId}`).emit("file_change_staged", {
        projectId,
        filePath,
        content: "", // –ü—É—Å—Ç–æ–π content –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        action: "deleted",
        timestamp: Date.now(),
        status: "staged",
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      socket.emit("file_tracked", {
        filePath,
        action: "deleted",
        timestamp: Date.now(),
        status: "tracked",
      })
    } catch (error) {
      console.error("‚ùå Error tracking file delete:", error)
      socket.emit("error", { message: "Failed to track file delete" })
    }
  })

  // üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ .env —Ñ–∞–π–ª–∞—Ö
  socket.on("env_file_change", async (data) => {
    try {
      const { projectId, filePath, content, timestamp } = data

      if (!projectId || !filePath || content === undefined) {
        socket.emit("error", { message: "Missing required fields for env file" })
        return
      }

      console.log(`üîê Env file change detected: ${filePath} in project ${projectId}`)

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ Netlify site ID
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)
      const project = await projectQueries.getProjectById(projectId)

      if (!project || !project.netlify_site_id) {
        console.log(`‚ö†Ô∏è Project ${projectId} not found or Netlify site not configured`)
        socket.emit("env_sync_result", {
          success: false,
          error: "Project not configured with Netlify",
          filePath,
        })
        return
      }

      try {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å Netlify
        await netlifyService.syncEnvFile(project.netlify_site_id, content, {
          context: "production", // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–º
          scopes: ["builds", "functions"],
          deleteUnused: false, // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º - –Ω–µ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        })

        console.log(`‚úÖ Environment variables synced to Netlify for project ${projectId}`)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        io.to(`project:${projectId}`).emit("env_sync_success", {
          projectId,
          filePath,
          timestamp: Date.now(),
          message: "Environment variables synced with Netlify",
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        socket.emit("env_sync_result", {
          success: true,
          filePath,
          message: "Environment variables synced with Netlify",
        })
      } catch (netlifyError) {
        console.error(`‚ùå Error syncing env variables to Netlify:`, netlifyError)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        socket.emit("env_sync_result", {
          success: false,
          error: netlifyError instanceof Error ? netlifyError.message : "Sync failed",
          filePath,
        })

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
        io.to(`project:${projectId}`).emit("env_sync_error", {
          projectId,
          filePath,
          error: netlifyError instanceof Error ? netlifyError.message : "Sync failed",
          timestamp: Date.now(),
        })
      }
    } catch (error) {
      console.error("‚ùå Error handling env file change:", error)
      socket.emit("error", { message: "Failed to process env file change" })
    }
  })

  // üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–æ–≤
  socket.on("env_file_delete", async (data) => {
    try {
      const { projectId, filePath, timestamp } = data

      if (!projectId || !filePath) {
        socket.emit("error", { message: "Missing required fields for env file deletion" })
        return
      }

      console.log(`üóëÔ∏è Env file deleted: ${filePath} in project ${projectId}`)

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)
      const project = await projectQueries.getProjectById(projectId)

      if (!project || !project.netlify_site_id) {
        console.log(`‚ö†Ô∏è Project ${projectId} not found or Netlify site not configured`)
        return
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ, –Ω–æ –ù–ï –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Netlify –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–ª—É—á–∞–π–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
      console.log(
        `‚ö†Ô∏è Env file ${filePath} deleted for project ${projectId}. Netlify variables preserved for safety.`,
      )

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ env —Ñ–∞–π–ª–∞
      io.to(`project:${projectId}`).emit("env_file_deleted", {
        projectId,
        filePath,
        timestamp: Date.now(),
        message: "Environment file deleted. Netlify variables preserved for safety.",
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      socket.emit("env_sync_result", {
        success: true,
        filePath,
        message: "Environment file deletion noted. Netlify variables preserved.",
      })
    } catch (error) {
      console.error("‚ùå Error handling env file deletion:", error)
      socket.emit("error", { message: "Failed to process env file deletion" })
    }
  })

  // –ù–û–í–´–ô HANDLER: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
  socket.on("save_all_changes", async (data) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º projectId –∏–∑ data –∏–ª–∏ –∏–∑ socket.data
      const projectId = data?.projectId || socket.data.projectId
      const commitMessage = data?.commitMessage

      if (!projectId) {
        console.log(`‚ùå [SAVE] Missing projectId from socket ${socket.id}`)
        socket.emit("error", { message: "Missing projectId" })
        return
      }

      console.log(
        `üíæ [SAVE] Received save_all_changes for project ${projectId} from socket ${socket.id}`,
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
      const roomClients = io.sockets.adapter.rooms.get(`project:${projectId}`)
      const clientCount = roomClients ? roomClients.size : 0
      const clientIds = roomClients ? Array.from(roomClients) : []

      console.log(
        `üì° [SAVE] Project room project:${projectId} has ${clientCount} clients: ${clientIds.join(
          ", ",
        )}`,
      )

      const commitSha = await saveFullProjectSnapshot(projectId, commitMessage)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const supabase = getSupabaseServerClient()
      const commitQueries = new CommitHistoryQueries(supabase)
      const latestCommit = await commitQueries.getLatestCommit(projectId)

      console.log(`üì° [SAVE] Sending save_success to project:${projectId} room`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –æ successful save
      io.to(`project:${projectId}`).emit("save_success", {
        projectId,
        commitId: commitSha,
        timestamp: Date.now(),
      })

      console.log(`üì° [SAVE] Sending commit_created to project:${projectId} room`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–∏—Ç–µ
      io.to(`project:${projectId}`).emit("commit_created", {
        projectId,
        commit: latestCommit,
        timestamp: Date.now(),
      })

      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –¥–µ–ø–ª–æ–π –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      console.log(`üöÄ [SAVE] Triggering deploy after save for project ${projectId}`)
      triggerDeploy(projectId, commitSha).catch((error) => {
        console.error(`‚ùå Deploy failed for project ${projectId}:`, error)
      })
    } catch (error) {
      console.error("‚ùå [SAVE] Error saving changes:", error)
      socket.emit("error", { message: "Failed to save changes" })
    }
  })

  // –ù–û–í–´–ô HANDLER: –û—Ç–∫–∞—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  socket.on("discard_all_changes", async (data) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º projectId –∏–∑ data –∏–ª–∏ –∏–∑ socket.data
      const projectId = data?.projectId || socket.data.projectId

      if (!projectId) {
        console.log(`‚ùå [DISCARD] Missing projectId from socket ${socket.id}`)
        socket.emit("error", { message: "Missing projectId" })
        return
      }

      console.log(
        `üîÑ [DISCARD] Received discard_all_changes for project ${projectId} from socket ${socket.id}`,
      )

      const supabase = getSupabaseServerClient()
      const pendingQueries = new PendingChangesQueries(supabase)

      // –û—á–∏—â–∞–µ–º pending changes –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log(`üóÉÔ∏è [DISCARD] Clearing pending changes for project ${projectId}`)
      await pendingQueries.clearAllPendingChanges(projectId)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
      const roomClients = io.sockets.adapter.rooms.get(`project:${projectId}`)
      const clientCount = roomClients ? roomClients.size : 0
      const clientIds = roomClients ? Array.from(roomClients) : []

      console.log(
        `üì° [DISCARD] Sending discard_local_changes to project:${projectId} room (${clientCount} clients: ${clientIds.join(
          ", ",
        )})`,
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Ç–∫–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
      io.to(`project:${projectId}`).emit("discard_local_changes", {
        projectId,
        timestamp: Date.now(),
      })

      console.log(`‚úÖ [DISCARD] Discard command sent for project ${projectId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –æ–± –æ—á–∏—Å—Ç–∫–µ pending changes
      io.to(`project:${projectId}`).emit("discard_success", {
        projectId,
        timestamp: Date.now(),
      })

      console.log(`‚úÖ [DISCARD] Discard success event sent to all clients in project ${projectId}`)
    } catch (error) {
      console.error("‚ùå [DISCARD] Error discarding changes:", error)
      socket.emit("error", { message: "Failed to discard changes" })
    }
  })

  // –ù–û–í–´–ô HANDLER: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub
  socket.on("sync_with_github", async (data) => {
    try {
      const { projectId } = data

      if (!projectId) {
        socket.emit("error", { message: "Missing projectId" })
        return
      }

      console.log(`üîÑ Syncing project ${projectId} with GitHub`)

      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
      const project = await projectQueries.getProjectById(projectId)
      if (!project || !project.github_repo_url) {
        socket.emit("error", {
          message: "Project not found or missing GitHub repo",
        })
        return
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GitHub —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è git pull
      const temporaryToken = await githubAppService.createTemporaryToken()

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É git pull —Å —Ç–æ–∫–µ–Ω–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
      io.to(`project:${projectId}`).emit("git_pull_with_token", {
        projectId,
        token: temporaryToken,
        repoUrl: project.github_repo_url,
      })

      console.log(`‚úÖ Git pull command sent for project ${projectId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã
      socket.emit("sync_initiated", {
        projectId,
        timestamp: Date.now(),
      })
    } catch (error) {
      console.error("‚ùå Error syncing with GitHub:", error)
      socket.emit("error", { message: "Failed to sync with GitHub" })
    }
  })

  // HANDLER: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è git –∫–æ–º–∞–Ω–¥ –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
  socket.on("git_command_result", async (data) => {
    try {
      const { projectId, command, success, error } = data

      console.log(
        `üìä Git command result for project ${projectId}: ${command} - ${
          success ? "SUCCESS" : "FAILED"
        }`,
      )

      if (!success) {
        console.error(`‚ùå Git command failed: ${error}`)
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç git –∫–æ–º–∞–Ω–¥—ã
      console.log(
        `üìä Git command ${success ? "SUCCESS" : "FAILED"} for project ${projectId}: ${command}`,
      )

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      io.to(`project:${projectId}`).emit("git_command_completed", {
        projectId,
        command,
        success,
        error,
        timestamp: Date.now(),
      })
    } catch (logError) {
      console.error("‚ùå Error logging git command result:", logError)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on("disconnect", (reason) => {
    const disconnectTime = new Date().toISOString()
    console.log(`‚ùå Client disconnected: ${socket.id} (${reason}) at ${disconnectTime}`)

    // üóëÔ∏è REMOVE FROM CONNECTION MONITORING
    if (socket.data.projectId) {
      connectionMonitor.removeConnection(socket.data.projectId, socket.id)
    }

    // üìä LOG DISCONNECT PATTERNS for debugging
    const disconnectReasons = {
      "transport close": "Network issue or server restart",
      "client namespace disconnect": "Client-initiated disconnect",
      "server namespace disconnect": "Server-initiated disconnect",
      "ping timeout": "Connection became unresponsive",
      "transport error": "Transport-level error",
    }

    const reasonDescription =
      disconnectReasons[reason as keyof typeof disconnectReasons] || "Unknown reason"
    if (reason === "ping timeout" || reason === "transport error") {
      console.log(
        `‚ö†Ô∏è [DISCONNECT_ANALYSIS] ${socket.id}: ${reasonDescription} - potential connection quality issue`,
      )
    }

    if (socket.data.projectId) {
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–≥–µ–Ω—Ç - —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
      if (socket.data.clientType === "agent") {
        const projectAgents = connectedAgents.get(socket.data.projectId)
        if (projectAgents) {
          projectAgents.delete(socket.id)

          // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–≥–µ–Ω—Ç - —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
          if (projectAgents.size === 0) {
            connectedAgents.delete(socket.data.projectId)
          }
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –í –ö–û–ú–ù–ê–¢–ï –ü–†–û–ï–ö–¢–ê –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞
        io.to(`project:${socket.data.projectId}`).emit("agent_disconnected", {
          projectId: socket.data.projectId,
          clientId: socket.id,
          timestamp: disconnectTime,
          reason: reason,
        })

        console.log(
          `üì° Emitted agent_disconnected event for project ${socket.data.projectId} to project room`,
        )

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        console.log(
          `üîå Agent disconnected: ${socket.id} from project ${socket.data.projectId} (${reasonDescription})`,
        )
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      socket.to(`project:${socket.data.projectId}`).emit("client_disconnected", {
        clientId: socket.id,
        timestamp: Date.now(),
        reason: reason,
      })
    }
  })

  // ‚úÖ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø TOOLBAR

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è toolbar
  socket.on("toolbar_get_status", async (data) => {
    const projectId = socket.data.projectId
    if (!projectId) {
      socket.emit("error", { message: "Not authenticated" })
      return
    }

    try {
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)
      const pendingQueries = new PendingChangesQueries(supabase)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
      const project = await projectQueries.getProjectById(projectId)
      if (!project) {
        socket.emit("error", { message: "Project not found" })
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ pending changes
      const pendingChanges = await pendingQueries.getAllPendingChanges(projectId)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
      const projectAgents = connectedAgents.get(projectId) || new Set()
      const agentConnected = projectAgents.size > 0

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
      let deployStatus = project.deploy_status || "ready"

      // –ï—Å–ª–∏ –Ω–µ—Ç netlify_url, —Ç–æ –¥–µ–ø–ª–æ–π —Ç–æ—á–Ω–æ –Ω–µ –≥–æ—Ç–æ–≤
      if (!project.netlify_url && deployStatus === "ready") {
        deployStatus = "pending"
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å pending changes, —Ç–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å ready
      if (pendingChanges.length > 0 && deployStatus === "ready") {
        deployStatus = "pending"
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      socket.emit("toolbar_status", {
        pendingChanges: pendingChanges.length,
        deployStatus,
        agentConnected,
        netlifyUrl: project.netlify_url,
      })

      if (socket.data.clientType === "toolbar") {
        console.log(
          `üìä Toolbar status sent for project ${projectId}: ${
            pendingChanges.length
          } pending, ${deployStatus}, agent: ${agentConnected}, url: ${
            project.netlify_url || "none"
          }`,
        )
      }
    } catch (error) {
      console.error(`‚ùå Error getting toolbar status for project ${projectId}:`, error)
      socket.emit("error", { message: "Failed to get project status" })
    }
  })

  // –ê–ª–∏–∞—Å –¥–ª—è save_all_changes (–¥–ª—è toolbar)
  socket.on("toolbar_save_all", async (data) => {
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
    const projectId = data?.projectId || socket.data.projectId
    const commitMessage = data?.commitMessage

    if (!projectId) {
      socket.emit("error", { message: "Missing projectId" })
      return
    }

    try {
      console.log(`üíæ [TOOLBAR] Saving all changes for project ${projectId}`)

      const commitSha = await saveFullProjectSnapshot(projectId, commitMessage)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const supabase = getSupabaseServerClient()
      const commitQueries = new CommitHistoryQueries(supabase)
      const latestCommit = await commitQueries.getLatestCommit(projectId)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –æ successful save
      io.to(`project:${projectId}`).emit("save_success", {
        projectId,
        commitId: commitSha,
        timestamp: Date.now(),
      })

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–∏—Ç–µ
      io.to(`project:${projectId}`).emit("commit_created", {
        projectId,
        commit: latestCommit,
        timestamp: Date.now(),
      })

      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –¥–µ–ø–ª–æ–π –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      console.log(`üöÄ [TOOLBAR] Triggering deploy after save for project ${projectId}`)
      triggerDeploy(projectId, commitSha).catch((error) => {
        console.error(`‚ùå Deploy failed for project ${projectId}:`, error)
      })
    } catch (error) {
      console.error("‚ùå [TOOLBAR] Error saving changes:", error)
      socket.emit("error", { message: "Failed to save changes" })
    }
  })

  // –ê–ª–∏–∞—Å –¥–ª—è discard_all_changes (–¥–ª—è toolbar)
  socket.on("toolbar_discard_all", async (data) => {
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
    const projectId = data?.projectId || socket.data.projectId

    if (!projectId) {
      socket.emit("error", { message: "Missing projectId" })
      return
    }

    try {
      console.log(`üîÑ [TOOLBAR] Discarding all changes for project ${projectId}`)

      const supabase = getSupabaseServerClient()
      const pendingQueries = new PendingChangesQueries(supabase)

      // –û—á–∏—â–∞–µ–º pending changes –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await pendingQueries.clearAllPendingChanges(projectId)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Ç–∫–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
      io.to(`project:${projectId}`).emit("discard_local_changes", {
        projectId,
      })

      console.log(`‚úÖ [TOOLBAR] Discard command sent for project ${projectId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –æ–± –æ—á–∏—Å—Ç–∫–µ pending changes
      io.to(`project:${projectId}`).emit("discard_success", {
        projectId,
        timestamp: Date.now(),
      })
    } catch (error) {
      console.error("‚ùå [TOOLBAR] Error discarding changes:", error)
      socket.emit("error", { message: "Failed to discard changes" })
    }
  })

  // –ù–û–í–´–ô HANDLER: –û—Ç–∫—Ä—ã—Ç–∏–µ preview —á–µ—Ä–µ–∑ WebSocket
  socket.on("toolbar_open_preview", async (data) => {
    const projectId = data?.projectId || socket.data.projectId

    if (!projectId) {
      socket.emit("error", { message: "Missing projectId" })
      return
    }

    try {
      console.log(`üåê [TOOLBAR] Preview open request for project ${projectId}`)

      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
      const project = await projectQueries.getProjectById(projectId)
      if (!project) {
        socket.emit("error", { message: "Project not found" })
        return
      }

      if (!project.netlify_url) {
        console.log(`‚ùå [TOOLBAR] No preview URL for project ${projectId}`)
        socket.emit("toolbar_preview_response", {
          success: false,
          error: "No preview URL available yet",
        })
        return
      }

      console.log(`‚úÖ [TOOLBAR] Preview URL for project ${projectId}: ${project.netlify_url}`)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL –æ–±—Ä–∞—Ç–Ω–æ –≤ toolbar –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      socket.emit("toolbar_preview_response", {
        success: true,
        url: project.netlify_url,
        projectId,
      })
    } catch (error) {
      console.error(`‚ùå [TOOLBAR] Error getting preview URL for project ${projectId}:`, error)
      socket.emit("error", { message: "Failed to get preview URL" })
    }
  })

  // ========= TOOLBAR AUTO-UPDATE HANDLERS =========

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π toolbar
  socket.on("toolbar_check_updates", async (data) => {
    const projectId = socket.data.projectId
    if (!projectId) {
      socket.emit("error", { message: "Not authenticated" })
      return
    }

    try {
      console.log(`üîÑ [TOOLBAR_UPDATE] Update check requested for project ${projectId}`)

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É API endpoint
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3004"}/api/toolbar/check`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            currentVersion: data?.currentVersion || "0.1.0",
            channel: data?.channel || "stable",
            projectId,
          }),
        },
      )

      if (response.ok) {
        const updateInfo = (await response.json()) as {
          hasUpdate: boolean
          latestVersion?: {
            version: string
            releaseNotes?: string
          }
          forceUpdate?: boolean
        }

        if (updateInfo.hasUpdate && updateInfo.latestVersion) {
          console.log(
            `üöÄ [TOOLBAR_UPDATE] Update available for project ${projectId}: ${updateInfo.latestVersion.version}`,
          )

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          socket.emit("toolbar_update_available", {
            version: updateInfo.latestVersion.version,
            forceUpdate: updateInfo.forceUpdate || false,
            releaseNotes: updateInfo.latestVersion.releaseNotes,
          })
        } else {
          console.log(`‚úÖ [TOOLBAR_UPDATE] No updates available for project ${projectId}`)
        }
      } else {
        console.log(`‚ùå [TOOLBAR_UPDATE] Failed to check updates: ${response.status}`)
      }
    } catch (error) {
      console.error(`‚ùå [TOOLBAR_UPDATE] Error checking updates for project ${projectId}:`, error)
    }
  })

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  socket.on("toolbar_update_acknowledged", async (data) => {
    const projectId = socket.data.projectId
    const version = data?.version

    if (!projectId || !version) {
      return
    }

    console.log(
      `üìù [TOOLBAR_UPDATE] Update acknowledged for project ${projectId}, version ${version}`,
    )
  })

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  socket.on("toolbar_update_success", async (data) => {
    const projectId = socket.data.projectId
    const version = data?.version

    if (!projectId || !version) {
      return
    }

    console.log(
      `‚úÖ [TOOLBAR_UPDATE] Update successful for project ${projectId}, version ${version}`,
    )
  })

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  socket.on("toolbar_update_error", async (data) => {
    const projectId = socket.data.projectId
    const version = data?.version
    const error = data?.error

    if (!projectId || !version) {
      return
    }

    console.log(
      `‚ùå [TOOLBAR_UPDATE] Update error for project ${projectId}, version ${version}: ${error}`,
    )
  })

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  socket.on("error", (error) => {
    console.error(`‚ùå Socket error for ${socket.id}:`, error)
  })

  // ========= INSERT PROMPT HANDLING =========

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ insert_prompt —Å–æ–±—ã—Ç–∏–π –æ—Ç toolbar - —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
  socket.on("insert_prompt", async (data) => {
    const projectId = data?.projectId || socket.data.projectId

    if (!projectId) {
      socket.emit("error", { message: "Missing projectId" })
      return
    }

    if (!data?.prompt) {
      socket.emit("error", { message: "Missing prompt" })
      return
    }

    console.log(`üí¨ [INSERT_PROMPT] Received prompt for project ${projectId} from ${socket.id}`)
    console.log(`üí¨ [INSERT_PROMPT] Prompt preview: ${data.prompt.substring(0, 100)}...`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
    const roomClients = io.sockets.adapter.rooms.get(`project:${projectId}`)
    const clientCount = roomClients ? roomClients.size : 0
    const clientIds = roomClients ? Array.from(roomClients) : []

    console.log(
      `üì° [INSERT_PROMPT] Broadcasting to project:${projectId} room (${clientCount} clients: ${clientIds.join(", ")})`,
    )

    // –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è VSCode extension)
    io.to(`project:${projectId}`).emit("insert_prompt", {
      projectId,
      prompt: data.prompt,
      timestamp: Date.now(),
      source: socket.data.clientType || "unknown",
    })

    console.log(`‚úÖ [INSERT_PROMPT] Prompt broadcasted to all clients in project ${projectId}`)
  })

  // ========= RUNTIME ERROR HANDLING =========

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ runtime –æ—à–∏–±–æ–∫ –æ—Ç toolbar - –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
  socket.on("toolbar_runtime_error", async (payload) => {
    const projectId = socket.data.projectId

    if (!projectId) {
      return
    }

    // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(
      `üêõ [RUNTIME_ERROR] Runtime error for project ${projectId}:`,
      payload?.error?.message || "unknown error",
    )

    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    io.to(`project:${projectId}`).emit("toolbar_runtime_error", payload)
  })
})

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
httpServer.listen(PORT, () => {
  console.log(`‚úÖ WebSocket server running on port ${PORT}`)
  console.log(`üîó Connect to: ws://localhost:${PORT}`)
})

// Graceful shutdown
process.on("SIGINT", () => {
  console.log("\nüõë Shutting down WebSocket server...")
  io.close(() => {
    httpServer.close(() => {
      console.log("‚úÖ Server closed")
      process.exit(0)
    })
  })
})

process.on("SIGTERM", () => {
  console.log("\nüõë Received SIGTERM, shutting down...")
  io.close(() => {
    httpServer.close(() => {
      console.log("‚úÖ Server closed")
      process.exit(0)
    })
  })
})

// API endpoint –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
app.post("/api/notify-status-change", async (req, res) => {
  try {
    const { projectId, status, message } = req.body

    if (!projectId || !status) {
      return res.status(400).json({
        error: "Missing required fields: projectId, status",
      })
    }

    console.log(`üì° [STATUS_NOTIFY] Sending status update for project ${projectId}: ${status}`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞
    io.to(`project:${projectId}`).emit("deploy_status_update", {
      projectId,
      status,
      message,
      timestamp: new Date().toISOString(),
    })

    console.log(`‚úÖ [STATUS_NOTIFY] WebSocket event sent to project:${projectId} room`)

    res.status(200).json({
      success: true,
      message: "Status notification sent successfully",
      projectId,
      status,
    })
  } catch (error) {
    console.error("‚ùå [STATUS_NOTIFY] Error sending status notification:", error)
    res.status(500).json({
      error: "Internal server error",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

// Netlify webhook endpoint
app.post("/webhooks/netlify", async (req, res) => {
  try {
    const { site_id, deploy_id, state, deploy_url, error_message, name } = req.body

    console.log(`üîî Netlify webhook received:`, {
      site_id,
      deploy_id,
      state,
      deploy_url,
      name,
    })

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –ø–æ netlify_site_id
    const supabase = getSupabaseServerClient()
    const projectQueries = new ProjectQueries(supabase)

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ netlify_site_id
    const { data: projects, error: fetchError } = await supabase
      .from("projects")
      .select("*")
      .eq("netlify_site_id", site_id)
      .limit(1)

    if (fetchError) {
      console.error("‚ùå Error fetching project by netlify_site_id:", fetchError)
      return res.status(500).json({ error: "Database error" })
    }

    if (!projects || projects.length === 0) {
      console.log(`‚ö†Ô∏è No project found for netlify_site_id: ${site_id}`)
      return res.status(404).json({ error: "Project not found" })
    }

    const project = projects[0]
    const projectId = project.id
    const currentStatus = project.deploy_status

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Netlify
    let newStatus: "pending" | "building" | "ready" | "failed" | "cancelled"

    switch (state) {
      case "ready": // —É—Å–ø–µ—à–Ω—ã–π –¥–µ–ø–ª–æ–π
        newStatus = "ready"
        break
      case "failed": // deploy_failed event
      case "error": // legacy/fallback
        newStatus = "failed"
        break
      case "created": // deploy_created event
      case "building": // deploy_building event + polling
      case "started": // legacy fallback
      case "enqueued":
      case "new":
        newStatus = "building"
        break
      default:
        console.log(`‚ö†Ô∏è Unknown Netlify state: ${state}, defaulting to building`)
        newStatus = "building"
    }

    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞
    // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ ready, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º webhook'–∞–º building –µ–≥–æ –æ—Ç–∫–∞—Ç–∏—Ç—å
    if (currentStatus === "ready" && newStatus === "building") {
      console.log(
        `‚ö†Ô∏è Ignoring building status webhook for project ${projectId} - already ready (webhook delay)`,
      )
      return res.status(200).json({
        success: true,
        message: "Webhook ignored - preventing status degradation",
        projectId,
        currentStatus,
        ignoredStatus: newStatus,
      })
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ failed, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º building –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å (–Ω–æ ready –º–æ–∂–µ—Ç)
    if (currentStatus === "failed" && newStatus === "building") {
      console.log(`‚ö†Ô∏è Ignoring building status webhook for project ${projectId} - already failed`)
      return res.status(200).json({
        success: true,
        message: "Webhook ignored - project already failed",
        projectId,
        currentStatus,
        ignoredStatus: newStatus,
      })
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç–æ–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (currentStatus === newStatus) {
      console.log(
        `‚ö†Ô∏è Skipping webhook for project ${projectId} - status unchanged (${currentStatus})`,
      )
      return res.status(200).json({
        success: true,
        message: "Webhook ignored - status unchanged",
        projectId,
        status: currentStatus,
      })
    }

    console.log(`üìä Updating project ${projectId} deploy status: ${currentStatus} ‚Üí ${newStatus}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateData: any = {
      deploy_status: newStatus,
      netlify_deploy_id: deploy_id,
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω –∏ URL –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (newStatus === "ready" && deploy_url) {
      updateData.netlify_url = deploy_url
      console.log(`üåê Updating netlify_url to: ${deploy_url}`)
    }

    await projectQueries.updateProject(projectId, updateData)

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è
    console.log(
      `üöÄ Deploy status change for project ${projectId}: ${currentStatus} -> ${newStatus}`,
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞
    io.to(`project:${projectId}`).emit("deploy_status_update", {
      projectId,
      status: newStatus,
      url: deploy_url,
      error: error_message,
      timestamp: new Date().toISOString(),
    })

    console.log(`‚úÖ Webhook processed successfully for project ${projectId}`)
    console.log(`üì° Emitted deploy status update: ${newStatus} - ${deploy_url || "no URL"}`)

    res.status(200).json({
      success: true,
      message: "Webhook processed successfully",
      projectId,
      statusChange: `${currentStatus} ‚Üí ${newStatus}`,
    })
  } catch (error) {
    console.error("‚ùå Error processing Netlify webhook:", error)
    res.status(500).json({
      error: "Internal server error",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Next.js
app.post("/api/projects/initialize", async (req, res) => {
  try {
    const { projectId, templateType, projectName, repositoryName } = req.body

    if (!projectId || !templateType || !projectName || !repositoryName) {
      return res.status(400).json({
        error: "Missing required fields: projectId, templateType, projectName, repositoryName",
      })
    }

    console.log(`üöÄ [INIT_PROJECT] Starting project initialization for ${projectId}...`)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (–∑–¥–µ—Å—å —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ - Railway –Ω–µ –∑–∞—Å—ã–ø–∞–µ—Ç)
    initializeProjectInBackground(projectId, templateType, projectName, repositoryName).catch(
      (error) => {
        console.error(`‚ùå [INIT_PROJECT] Background initialization failed for ${projectId}:`, error)
      },
    )

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
    res.status(200).json({
      success: true,
      message: "Project initialization started",
      projectId,
    })
  } catch (error) {
    console.error("‚ùå [INIT_PROJECT] Error starting project initialization:", error)
    res.status(500).json({
      error: "Failed to start project initialization",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

/**
 * üöÄ –§–æ–Ω–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ Next.js
 * –ó–¥–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ - Railway –Ω–µ –∑–∞—Å—ã–ø–∞–µ—Ç
 */
async function initializeProjectInBackground(
  projectId: string,
  templateType: string,
  projectName: string,
  repositoryName: string,
): Promise<void> {
  console.log(`üîÑ [INIT_BG] Starting template upload for ${projectId}...`)

  try {
    const supabase = getSupabaseServerClient()
    const projectQueries = new ProjectQueries(supabase)
    const commitHistoryQueries = new CommitHistoryQueries(supabase)

    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞
    console.log(`üì° [INIT_BG] Sending initialization_progress to project:${projectId}`)
    io.to(`project:${projectId}`).emit("initialization_progress", {
      projectId,
      stage: "generating_files",
      progress: 10,
      message: "Setting up your project...",
    })

    const templateFiles = await generateTemplateFiles(projectId, templateType, projectName)
    console.log(`üìã [INIT_BG] Generated ${Object.keys(templateFiles).length} template files`)

    io.to(`project:${projectId}`).emit("initialization_progress", {
      projectId,
      stage: "uploading_files",
      progress: 20,
      message: "Uploading project files...",
    })

    const fileEntries = Object.entries(templateFiles)
    const totalFiles = fileEntries.length
    const chunkSize = 5
    const totalChunks = Math.ceil(totalFiles / chunkSize)

    // –ü–æ–ª—É—á–∞–µ–º parent commit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —Ç.–∫. auto_init: true)
    console.log(`üîç [INIT_BG] About to call getLatestCommit for repository: ${repositoryName}`)
    const parentCommit = await githubAppService.getLatestCommit(repositoryName)
    console.log(`üîç [INIT_BG] getLatestCommit returned:`, parentCommit)

    if (!parentCommit) {
      throw new Error(
        "Repository should be initialized with auto_init: true, but no parent commit found",
      )
    }

    console.log(`üîç [INIT_BG] Parent commit: ${parentCommit.sha}`)

    io.to(`project:${projectId}`).emit("initialization_progress", {
      projectId,
      stage: "creating_blobs",
      progress: 30,
      message: "Processing files...",
    })

    // –°–æ–∑–¥–∞–µ–º blobs –ø–æ —á–∞–Ω–∫–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    const blobs: { path: string; sha: string }[] = []

    for (let i = 0; i < totalChunks; i++) {
      const startIdx = i * chunkSize
      const endIdx = Math.min(startIdx + chunkSize, totalFiles)
      const chunk = fileEntries.slice(startIdx, endIdx)

      // –°–æ–∑–¥–∞–µ–º blobs –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
      const chunkBlobs = await Promise.all(
        chunk.map(async ([path, content]) => {
          const blob = await githubAppService.createBlob(repositoryName, content)
          return { path, sha: blob.sha }
        }),
      )

      blobs.push(...chunkBlobs)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progressPercent = 30 + ((i + 1) / totalChunks) * 40 // 30% - 70%
      io.to(`project:${projectId}`).emit("initialization_progress", {
        projectId,
        stage: "creating_blobs",
        progress: Math.round(progressPercent),
        message: "Processing files...",
      })

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
      if (i < totalChunks - 1) {
        await new Promise((resolve) => setTimeout(resolve, 100))
      }
    }

    io.to(`project:${projectId}`).emit("initialization_progress", {
      projectId,
      stage: "creating_commit",
      progress: 80,
      message: "Saving project...",
    })

    // –°–æ–∑–¥–∞–µ–º tree –∏ –∫–æ–º–º–∏—Ç (—Å –±–∞–∑–æ–≤—ã–º tree –æ—Ç parent commit)
    console.log(`üå≥ [INIT_BG] Creating tree with base tree from parent commit...`)
    const tree = await githubAppService.createTree(repositoryName, blobs, parentCommit.sha)

    console.log(`üìù [INIT_BG] Creating commit with parent: ${parentCommit.sha}`)
    const commit = await githubAppService.createCommit(
      repositoryName,
      "Initial commit from template",
      tree.sha,
      [parentCommit.sha],
    )

    // –û–±–Ω–æ–≤–ª—è–µ–º main –≤–µ—Ç–∫—É (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è auto_init: true)
    console.log(`üîÑ [INIT_BG] Updating main branch with new commit: ${commit.sha}`)
    await githubAppService.updateRef(repositoryName, "heads/main", commit.sha)
    console.log(`‚úÖ [INIT_BG] Successfully updated main branch`)

    console.log(`‚úÖ [INIT_BG] Uploaded ${totalFiles} files in one commit`)
    const mainCommitSha = commit.sha

    // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ commit_history
    if (mainCommitSha) {
      const commitRecord = await commitHistoryQueries.createCommitHistory({
        project_id: projectId,
        commit_message: "Initial commit from template",
        github_commit_sha: mainCommitSha,
        github_commit_url: `https://github.com/phion-dev/${repositoryName}/commit/${mainCommitSha}`,
        files_count: Object.keys(templateFiles).length,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞
      console.log(`üì° [INIT_BG] Sending commit_created event to project:${projectId}`)
      io.to(`project:${projectId}`).emit("commit_created", {
        projectId,
        commit: {
          commit_id: commitRecord.id,
          commit_message: "Initial commit from template",
          created_at: commitRecord.created_at,
          files_count: Object.keys(templateFiles).length,
          github_commit_sha: mainCommitSha,
          github_commit_url: `https://github.com/phion-dev/${repositoryName}/commit/${mainCommitSha}`,
        },
      })
      console.log(`‚úÖ [INIT_BG] commit_created event sent for initial commit`)
    }

    // 4. ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é
    io.to(`project:${projectId}`).emit("initialization_progress", {
      projectId,
      stage: "finalizing",
      progress: 90,
      message: "Almost ready...",
    })

    await projectQueries.updateProject(projectId, {
      deploy_status: "ready", // –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    })

    // 5. üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    console.log(`üì° [INIT_BG] Sending final initialization_progress (100%) to project:${projectId}`)
    io.to(`project:${projectId}`).emit("initialization_progress", {
      projectId,
      stage: "completed",
      progress: 100,
      message: "Project ready for download!",
    })

    console.log(`üì° [INIT_BG] Sending deploy_status_update to project:${projectId}`)
    io.to(`project:${projectId}`).emit("deploy_status_update", {
      status: "ready",
      message: "Project initialization completed",
      projectId,
    })

    console.log(
      `üéâ [INIT_BG] Template upload completed for ${projectId}! Project ready for development.`,
    )
  } catch (error) {
    console.error(`‚ùå [INIT_BG] Template upload failed for ${projectId}:`, error)

    try {
      console.log(`üîÑ [INIT_BG] Updating project status to failed for ${projectId}...`)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)
      await projectQueries.updateProject(projectId, {
        deploy_status: "failed",
      })
      console.log(`‚úÖ [INIT_BG] Project status updated to failed for ${projectId}`)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
      console.log(`üì° [INIT_BG] Sending deploy_status_update (failed) to project:${projectId}`)
      io.to(`project:${projectId}`).emit("deploy_status_update", {
        status: "failed",
        message: "Project initialization failed",
        projectId,
        timestamp: new Date().toISOString(),
      })
      console.log(`‚úÖ [INIT_BG] WebSocket event sent for failed initialization`)
    } catch (updateError) {
      console.error(`‚ùå [INIT_BG] Failed to update project status for ${projectId}:`, updateError)
    }

    throw error
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ Next.js –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ WebSocket —Å–µ—Ä–≤–µ—Ä–µ
 */
async function generateTemplateFiles(
  projectId: string,
  templateType: string,
  projectName: string,
): Promise<Record<string, string>> {
  console.log(`üîÑ [TEMPLATE] Generating template files for ${projectId} (${templateType})`)

  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
  const fs = await import("fs")
  const path = await import("path")

  // –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è workspace)
  const templatePath = path.join(process.cwd(), "..", "..", "templates", templateType)

  if (!fs.existsSync(templatePath)) {
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
    const alternativeTemplatePath = path.join(process.cwd(), "templates", templateType)
    if (!fs.existsSync(alternativeTemplatePath)) {
      throw new Error(`Template ${templateType} not found`)
    }
    return await collectTemplateFiles(alternativeTemplatePath, projectName, projectId)
  }

  return await collectTemplateFiles(templatePath, projectName, projectId)
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
async function collectTemplateFiles(
  templatePath: string,
  projectName: string,
  projectId: string,
): Promise<Record<string, string>> {
  const fs = await import("fs")
  const path = await import("path")

  const templateFiles: Record<string, string> = {}

  function collectFiles(dirPath: string, relativePath: string = ""): void {
    const items = fs.readdirSync(dirPath, { withFileTypes: true })

    for (const item of items) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (
        item.name === "node_modules" ||
        item.name === ".git" ||
        item.name === "dist" ||
        item.name === ".next"
      ) {
        continue
      }

      const fullPath = path.join(dirPath, item.name)
      const relativeFilePath = relativePath ? path.join(relativePath, item.name) : item.name

      if (item.isDirectory()) {
        collectFiles(fullPath, relativeFilePath)
      } else {
        let content = fs.readFileSync(fullPath, "utf-8")

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (item.name === "package.json") {
          const packageJson = JSON.parse(content)
          packageJson.name = projectName.toLowerCase().replace(/\s+/g, "-")
          content = JSON.stringify(packageJson, null, 2)
        } else if (item.name === "phion.config.json") {
          // –ó–∞–º–µ–Ω—è–µ–º PROJECT_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
          content = content.replace(/__PROJECT_ID__/g, projectId)

          // –ó–∞–º–µ–Ω—è–µ–º WS_URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
          const wsUrl =
            process.env.NODE_ENV === "production" ? "wss://api.phion.dev" : "ws://localhost:8080"
          content = content.replace(/__WS_URL__/g, wsUrl)

          // –ó–∞–º–µ–Ω—è–µ–º DEBUG_MODE –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
          const debugMode = process.env.NODE_ENV === "production" ? "false" : "true"
          content = content.replace(/"__DEBUG_MODE__"/g, debugMode)
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ (–∑–∞–º–µ–Ω—è–µ–º \ –Ω–∞ /)
        const normalizedPath = relativeFilePath.replace(/\\/g, "/")
        templateFiles[normalizedPath] = content
      }
    }
  }

  collectFiles(templatePath)

  console.log(`üìã [TEMPLATE] Collected ${Object.keys(templateFiles).length} files from template`)
  return templateFiles
}

// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ Next.js
app.post("/api/projects/create-repository", async (req, res) => {
  try {
    const { projectId, projectName } = req.body

    if (!projectId || !projectName) {
      return res.status(400).json({
        error: "Missing required fields: projectId, projectName",
      })
    }

    console.log(`üöÄ [CREATE_REPO] Creating GitHub repository for project ${projectId}...`)

    // –°–æ–∑–¥–∞–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    const repository = await githubAppService.createRepository(
      projectId,
      `Phion project: ${projectName}`,
    )

    console.log(`‚úÖ [CREATE_REPO] GitHub repository created: ${repository.html_url}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —Å GitHub –¥–∞–Ω–Ω—ã–º–∏
    const supabase = getSupabaseServerClient()
    const projectQueries = new ProjectQueries(supabase)

    await projectQueries.updateGitHubInfo(projectId, {
      github_repo_url: repository.html_url,
      github_repo_name: repository.name,
      github_owner: "phion-dev",
    })

    res.status(200).json({
      success: true,
      repository: {
        html_url: repository.html_url,
        name: repository.name,
        owner: "phion-dev",
      },
    })
  } catch (error) {
    console.error("‚ùå [CREATE_REPO] Error creating GitHub repository:", error)
    res.status(500).json({
      error: "Failed to create GitHub repository",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

// ‚úÖ NEW: Complete project initialization endpoint - handles everything in one place
app.post("/api/projects/initialize-complete", async (req, res) => {
  try {
    const { projectId, projectName, templateType, userId } = req.body

    if (!projectId || !projectName || !templateType || !userId) {
      return res.status(400).json({
        error: "Missing required fields: projectId, projectName, templateType, userId",
      })
    }

    console.log(`üöÄ [INIT_COMPLETE] Starting complete project initialization for ${projectId}...`)

    // Start the complete initialization process in the background
    // This is safe here - Railway doesn't sleep like Vercel serverless functions
    completeProjectInitialization(projectId, projectName, templateType, userId).catch((error) => {
      console.error(`‚ùå [INIT_COMPLETE] Complete initialization failed for ${projectId}:`, error)
    })

    // Immediately respond to the client
    res.status(200).json({
      success: true,
      message: "Complete project initialization started",
      projectId,
    })
  } catch (error) {
    console.error("‚ùå [INIT_COMPLETE] Error starting complete project initialization:", error)
    res.status(500).json({
      error: "Failed to start complete project initialization",
      details: error instanceof Error ? error.message : "Unknown error",
    })
  }
})

/**
 * ‚úÖ Complete project initialization - handles everything in the background
 * This replaces the logic that was in the Next.js API route
 */
async function completeProjectInitialization(
  projectId: string,
  projectName: string,
  templateType: string,
  userId: string,
): Promise<void> {
  try {
    console.log(`üöÄ [COMPLETE_INIT] Starting complete initialization for ${projectId}...`)

    // 1. Create GitHub repository
    console.log(`üîÑ [COMPLETE_INIT] Creating GitHub repository...`)
    const repository = await githubAppService.createRepository(
      projectId,
      `Phion project: ${projectName}`,
    )

    // Update project with GitHub info
    const supabase = getSupabaseServerClient()
    const projectQueries = new ProjectQueries(supabase)
    await projectQueries.updateGitHubInfo(projectId, {
      github_repo_url: repository.html_url,
      github_repo_name: repository.name,
      github_owner: "phion-dev",
    })

    console.log(`‚úÖ [COMPLETE_INIT] GitHub repository created: ${repository.html_url}`)

    // 2. Initialize template
    console.log(`üîÑ [COMPLETE_INIT] Starting template initialization...`)
    await initializeProjectInBackground(projectId, templateType, projectName, repository.name)

    console.log(`‚úÖ [COMPLETE_INIT] Complete initialization finished for ${projectId}`)
  } catch (error) {
    console.error(`‚ùå [COMPLETE_INIT] Complete initialization failed for ${projectId}:`, error)

    // Update project status to failed
    try {
      const supabase = getSupabaseServerClient()
      const projectQueries = new ProjectQueries(supabase)
      await projectQueries.updateProject(projectId, {
        deploy_status: "failed",
      })
      console.log(`üìä Updated project ${projectId} status to failed`)

      // Send WebSocket event about failure
      io.to(`project:${projectId}`).emit("deploy_status_update", {
        status: "failed",
        message: "Project initialization failed",
        projectId,
        timestamp: new Date().toISOString(),
      })
    } catch (updateError) {
      console.error(`‚ùå Error updating project status for ${projectId}:`, updateError)
    }

    // Rethrow for logging
    throw error
  }
}

/**
 * Retry helper with exponential backoff - moved here to be reused
 */
async function retryWithBackoff<T>(
  operation: () => Promise<T>,
  context: string,
  maxAttempts = 3,
  baseDelay = 1000,
): Promise<T> {
  let lastError: Error

  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      const result = await operation()
      if (attempt > 1) {
        console.log(`‚úÖ [RETRY] ${context} succeeded on attempt ${attempt}`)
      }
      return result
    } catch (error) {
      lastError = error as Error

      if (attempt === maxAttempts) {
        console.error(
          `‚ùå [RETRY] ${context} failed after ${maxAttempts} attempts:`,
          lastError.message,
        )
        break
      }

      // Check if error is retryable
      const isRetryable = shouldRetryError(error)
      if (!isRetryable) {
        console.error(`‚ùå [RETRY] ${context} failed with non-retryable error:`, lastError.message)
        break
      }

      const delay = baseDelay * Math.pow(2, attempt - 1) + Math.random() * 1000
      console.log(
        `‚ö†Ô∏è [RETRY] ${context} attempt ${attempt} failed, retrying in ${Math.round(delay)}ms:`,
        lastError.message,
      )
      await new Promise((resolve) => setTimeout(resolve, delay))
    }
  }

  throw lastError!
}

/**
 * Determines if an error should trigger a retry
 */
function shouldRetryError(error: any): boolean {
  // Retry on server errors (5xx)
  if (error?.status >= 500) return true

  // Retry on rate limiting
  if (error?.status === 429) return true

  // Don't retry on client errors (4xx except 429)
  if (error?.status >= 400 && error?.status < 500) return false

  // Retry on network/timeout errors
  if (
    error?.code === "ENOTFOUND" ||
    error?.code === "ECONNRESET" ||
    error?.code === "ETIMEDOUT" ||
    error?.name === "AbortError" ||
    error?.message?.includes("fetch failed") ||
    error?.message?.includes("network") ||
    error?.message?.includes("timeout")
  ) {
    return true
  }

  return false
}
