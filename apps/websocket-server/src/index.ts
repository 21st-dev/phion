import "dotenv/config";
import express from "express";
import { createServer } from "http";
import { Server } from "socket.io";
import cors from "cors";
import crypto from "crypto";
import AdmZip from "adm-zip";

// Imports –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–∞–º–∏
import {
  getSupabaseServerClient,
  ProjectQueries,
  PendingChangesQueries,
  FileHistoryQueries,
} from "@shipvibes/database";
import { uploadFileVersion, downloadFile, downloadProjectTemplate } from "@shipvibes/storage";
import { NetlifyService } from "./services/netlify.js";
import { projectLogger } from '@shipvibes/shared/dist/project-logger-server';

const app = express();
const httpServer = createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Express
app.use(
  cors({
    origin: "http://localhost:3004",
    credentials: true,
  })
);

app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
const io = new Server(httpServer, {
  cors: {
    origin: "http://localhost:3004",
    methods: ["GET", "POST"],
    credentials: true,
  },
});

const PORT = process.env.WEBSOCKET_PORT || 8080;

// –°–æ–∑–¥–∞–µ–º Netlify —Å–µ—Ä–≤–∏—Å
const netlifyService = new NetlifyService(io);

// –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤
setInterval(() => {
  netlifyService.checkAllActiveDeployments().catch((error) => {
    console.error("‚ùå Error checking active deployments:", error);
  });
}, 30000);

// HTTP API endpoints
app.post('/api/deploy', async (req, res) => {
  try {
    const { projectId, commitId, action } = req.body;
    
    if (!projectId || action !== 'deploy') {
      return res.status(400).json({ 
        success: false, 
        error: 'Invalid request. ProjectId and action=deploy required.' 
      });
    }

    console.log(`üöÄ HTTP Deploy request received for project: ${projectId}, commit: ${commitId || 'latest'}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å commitId
    if (commitId) {
      triggerDeploy(projectId, commitId).catch(error => {
        console.error(`‚ùå Deploy failed for project ${projectId}:`, error);
      });
    } else {
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –¥–µ–ø–ª–æ–∏—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–º–∏—Ç–∞
      const supabase = getSupabaseServerClient();
      const pendingQueries = new PendingChangesQueries(supabase);
      const historyQueries = new FileHistoryQueries(supabase);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ pending changes –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π
      const pendingChanges = await pendingQueries.getAllPendingChanges(projectId);
      const existingFiles = await historyQueries.getProjectFileHistory(projectId, 1);
      
      if (pendingChanges.length === 0 && existingFiles.length > 0) {
        // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        const lastCommitId = existingFiles[0]?.commit_id;
        if (lastCommitId) {
          console.log(`üìÑ No changes to deploy, using existing commit: ${lastCommitId}`);
          triggerDeploy(projectId, lastCommitId).catch(error => {
            console.error(`‚ùå Deploy failed for project ${projectId}:`, error);
          });
        } else {
          console.log(`‚ùå No changes and no existing commits for project ${projectId}`);
          res.status(400).json({ 
            success: false, 
            error: 'No changes to deploy and no existing commits' 
          });
          return;
        }
      } else {
        // –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π - —Å–æ–∑–¥–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç
        saveFullProjectSnapshot(projectId, 'Manual deploy via HTTP API')
          .then(newCommitId => {
            return triggerDeploy(projectId, newCommitId);
          })
          .catch(error => {
            console.error(`‚ùå Deploy failed for project ${projectId}:`, error);
          });
      }
    }

    res.json({ 
      success: true, 
      message: 'Deploy triggered successfully',
      projectId,
      commitId: commitId || 'will_be_generated'
    });
    
  } catch (error) {
    console.error('‚ùå Error in /api/deploy:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Internal server error' 
    });
  }
});

app.get('/health', (req, res) => {
  res.json({ status: 'ok', service: 'websocket-server' });
});

console.log('üöÄ Starting Shipvibes WebSocket Server...');
console.log(`üì° Port: ${PORT}`);

/**
 * –ò–∑–≤–ª–µ—á—å —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
 */
async function extractAndSaveTemplateFiles(projectId: string): Promise<string> {
  console.log(`üì¶ Extracting template files for project ${projectId}...`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
  await projectLogger.log({
    project_id: projectId,
    event_type: 'template_extracted',
    details: { action: 'starting', trigger: 'initial_deploy' },
    trigger: 'initial_deploy'
  });
  
  try {
    // –°–∫–∞—á–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ R2
    const templateZip = await downloadProjectTemplate(projectId);
    console.log(`‚úÖ Downloaded template ZIP (${templateZip.length} bytes)`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ ZIP
    const zip = new AdmZip(templateZip);
    const zipEntries = zip.getEntries();
    
    const templateFiles: Record<string, string> = {};
    
    for (const entry of zipEntries) {
      if (!entry.isDirectory) {
        const content = entry.getData().toString('utf8');
        templateFiles[entry.entryName] = content;
        console.log(`üìÑ Extracted file: ${entry.entryName} (${content.length} chars)`);
      }
    }
    
    console.log(`‚úÖ Extracted ${Object.keys(templateFiles).length} files from template`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç —Å —Ñ–∞–π–ª–∞–º–∏ —à–∞–±–ª–æ–Ω–∞
    const commitId = crypto.randomUUID();
    const commitMessage = 'Initial commit'; // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    const supabase = getSupabaseServerClient();
    const historyQueries = new FileHistoryQueries(supabase);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ R2 –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ file_history
    for (const [filePath, content] of Object.entries(templateFiles)) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ R2
      await uploadFileVersion(projectId, commitId, filePath, content);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ file_history –° commit_id –∏ commit_message
      await historyQueries.createFileHistory({
        project_id: projectId,
        file_path: filePath,
        r2_object_key: `projects/${projectId}/versions/${commitId}/${filePath}`,
        content_hash: crypto.createHash('sha256').update(content).digest('hex'),
        file_size: Buffer.byteLength(content, 'utf-8'),
        commit_id: commitId,
        commit_message: commitMessage
      });
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    await projectLogger.logCommitCreated(
      projectId,
      commitId,
      commitMessage,
      Object.keys(templateFiles).length,
      'template_extraction'
    );
    
    console.log(`‚úÖ Template files saved as commit ${commitId} for project ${projectId}`);
    return commitId;
    
      } catch (error) {
      console.error(`‚ùå Error extracting template files for project ${projectId}:`, error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await projectLogger.log({
        project_id: projectId,
        event_type: 'error',
        details: { 
          action: 'template_extraction_failed', 
          error: error instanceof Error ? error.message : String(error),
          original_trigger: 'initial_deploy'
        },
        trigger: 'initial_deploy'
      });
      
      throw error;
    }
}

/**
 * –°–æ–∑–¥–∞—Ç—å Netlify —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
 */
async function ensureNetlifySite(projectId: string): Promise<string | null> {
  try {
    const supabase = getSupabaseServerClient();
    const projectQueries = new ProjectQueries(supabase);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const project = await projectQueries.getProjectById(projectId);
    if (!project) {
      console.error(`‚ùå Project not found: ${projectId}`);
      return null;
    }

    // –ï—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ —É–∂–µ –µ—Å—Ç—å Netlify —Å–∞–π—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ID
    if (project.netlify_site_id) {
      return project.netlify_site_id;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Netlify —Å–∞–π—Ç
    console.log(`üåê Creating Netlify site for project ${projectId}...`);
    const netlifyResponse = await netlifyService.createSite(projectId, project.name);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await projectQueries.updateProject(projectId, {
      netlify_site_id: netlifyResponse.id,
      netlify_url: netlifyResponse.ssl_url || netlifyResponse.url,
      deploy_status: 'ready'
    });

    console.log(`‚úÖ Netlify site created: ${netlifyResponse.url}`);
    return netlifyResponse.id;
  } catch (error) {
    console.error(`‚ùå Error creating Netlify site for project ${projectId}:`, error);
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ö–ê–ö –û–î–ò–ù –ö–û–ú–ú–ò–¢
 */
async function saveFullProjectSnapshot(
  projectId: string, 
  commitMessage?: string
): Promise<string> {
  console.log(`üì∏ Creating full project snapshot for ${projectId}...`);
  
  const supabase = getSupabaseServerClient();
  const pendingQueries = new PendingChangesQueries(supabase);
  const historyQueries = new FileHistoryQueries(supabase);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending changes (–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  const pendingChanges = await pendingQueries.getAllPendingChanges(projectId);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
  const latestFiles = await historyQueries.getProjectFileHistory(projectId, 1000);
  
  // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –Ω–µ—Ç pending changes –ò –µ—Å—Ç—å —Ñ–∞–π–ª—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏, 
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ (–ù–ï —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π)
  if (pendingChanges.length === 0 && latestFiles.length > 0) {
    const lastCommitId = latestFiles[0]?.commit_id;
    if (lastCommitId) {
      console.log(`üìÑ No pending changes for project ${projectId}, reusing existing commit ${lastCommitId}`);
      return lastCommitId;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ pending changes –Ω–∏ file history, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–Ω–∞–ø—à–æ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–ª–æ—è
  if (pendingChanges.length === 0 && latestFiles.length === 0) {
    console.log(`üìÑ No changes or history for project ${projectId}, creating initial empty snapshot`);
    const commitId = crypto.randomUUID();
    const finalCommitMessage = commitMessage || 'Initial empty deployment';
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ file_history –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–µ–ø–ª–æ—è
    await historyQueries.createFileHistory({
      project_id: projectId,
      file_path: '.shipvibes-initial',
      r2_object_key: `projects/${projectId}/versions/${commitId}/.shipvibes-initial`,
      content_hash: 'initial',
      file_size: 0,
      commit_id: commitId,
      commit_message: finalCommitMessage
    });
    
    console.log(`‚úÖ Initial snapshot created for project ${projectId} as commit ${commitId}`);
    return commitId;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
  const latestFileMap = new Map();
  for (const file of latestFiles) {
    const existing = latestFileMap.get(file.file_path);
    if (!existing || 
        (file.created_at && existing.created_at && new Date(file.created_at) > new Date(existing.created_at)) ||
        (file.created_at && !existing.created_at)) {
      latestFileMap.set(file.file_path, file);
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç: –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ + –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const fullSnapshot = new Map<string, any>();
  
  // 1. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
  for (const [filePath, fileRecord] of latestFileMap) {
    try {
      const content = await downloadFile(fileRecord.r2_object_key);
      const fileContent = Buffer.isBuffer(content.content) 
        ? content.content.toString() 
        : content.content;
      
      fullSnapshot.set(filePath, {
        content: fileContent,
        hash: fileRecord.content_hash,
        size: fileRecord.file_size,
        action: 'unchanged'
      });
    } catch (error) {
      console.warn(`‚ö†Ô∏è Could not load existing file ${filePath}:`, error);
    }
  }
  
  // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º pending changes (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const changedFiles: string[] = [];
  for (const change of pendingChanges) {
    changedFiles.push(`${change.action}: ${change.file_path}`);
    
    if (change.action === 'deleted') {
      fullSnapshot.delete(change.file_path);
    } else {
      fullSnapshot.set(change.file_path, {
        content: change.content,
        hash: change.content_hash,
        size: change.file_size,
        action: change.action
      });
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
  let finalCommitMessage = commitMessage;
  if (!finalCommitMessage) {
    if (pendingChanges.length > 0) {
      finalCommitMessage = `Updated ${pendingChanges.length} files: ${changedFiles.join(', ')}`;
    } else {
      finalCommitMessage = `Snapshot of ${fullSnapshot.size} existing files`;
    }
  }
  
  console.log(`üìÑ Saving commit: ${finalCommitMessage}`);
  console.log(`üìÑ Full snapshot contains ${fullSnapshot.size} files`);
  
  // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Ñ–∞–π–ª—ã –∫–∞–∫ –æ–¥–∏–Ω –∫–æ–º–º–∏—Ç
  const commitId = crypto.randomUUID();
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  if (fullSnapshot.size > 0) {
    // Bulk upload –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ R2
    const uploadPromises: Promise<any>[] = [];
    for (const [filePath, fileData] of fullSnapshot) {
      uploadPromises.push(
        uploadFileVersion(projectId, commitId, filePath, fileData.content)
      );
    }
    await Promise.all(uploadPromises);
    
    // Bulk —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ file_history
    const historyRecords: any[] = [];
    for (const [filePath, fileData] of fullSnapshot) {
      historyRecords.push({
        project_id: projectId,
        file_path: filePath,
        r2_object_key: `projects/${projectId}/versions/${commitId}/${filePath}`,
        content_hash: fileData.hash,
        file_size: fileData.size,
        commit_id: commitId,
        commit_message: finalCommitMessage
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    for (const record of historyRecords) {
      await historyQueries.createFileHistory(record);
    }
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
    await historyQueries.createFileHistory({
      project_id: projectId,
      file_path: '.shipvibes-empty',
      r2_object_key: `projects/${projectId}/versions/${commitId}/.shipvibes-empty`,
      content_hash: 'empty',
      file_size: 0,
      commit_id: commitId,
      commit_message: finalCommitMessage
    });
  }
  
  // 4. –û—á–∏—â–∞–µ–º pending changes (–µ—Å–ª–∏ –±—ã–ª–∏)
  if (pendingChanges.length > 0) {
    await pendingQueries.clearAllPendingChanges(projectId);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É pending changes
    await projectLogger.log({
      project_id: projectId,
      event_type: 'pending_changes_cleared',
      details: { 
        clearedChangesCount: pendingChanges.length,
        action: 'bulk_clear'
      },
      trigger: 'commit_save'
    });
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
  await projectLogger.logCommitCreated(
    projectId,
    commitId,
    finalCommitMessage,
    fullSnapshot.size,
    'manual_save'
  );
  
  console.log(`‚úÖ Full project snapshot saved as commit ${commitId}: ${finalCommitMessage}`);
  return commitId;
}

async function triggerDeploy(projectId: string, commitId: string): Promise<void> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–ø–ª–æ—è
    const hasFiles = await netlifyService.hasProjectFiles(projectId);
    if (!hasFiles) {
      console.log(`‚è∞ Project ${projectId} has no deployable files, skipping deploy`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ ready –Ω–æ –±–µ–∑ URL
      const supabase = getSupabaseServerClient();
      const projectQueries = new ProjectQueries(supabase);
      await projectQueries.updateProject(projectId, {
        deploy_status: 'ready'
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      await projectLogger.logDeployStatusChange(
        projectId,
        'pending',
        'ready',
        undefined,
        'auto_deploy'
      );
      
      return;
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å—Ç—å Netlify —Å–∞–π—Ç
    const siteId = await ensureNetlifySite(projectId);
    if (!siteId) {
      console.error(`‚ùå Cannot deploy project ${projectId}: no Netlify site`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      await projectLogger.log({
        project_id: projectId,
        event_type: 'error',
        details: { 
          message: 'Cannot deploy project: no Netlify site',
          context: 'triggerDeploy'
        },
        trigger: 'deploy_process'
      });
      
      return;
    }

    console.log(`üöÄ Triggering deploy for project ${projectId} (site: ${siteId})...`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è
    await projectLogger.logDeployStatusChange(
      projectId,
      'pending',
      'building',
      undefined,
      'deploy_process'
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
    const supabase = getSupabaseServerClient();
    const projectQueries = new ProjectQueries(supabase);
    await projectQueries.updateProject(projectId, {
      deploy_status: 'building'
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
    const deployResponse = await netlifyService.deployProject(siteId, projectId, commitId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ NetlifyService)
    await projectQueries.updateProject(projectId, {
      deploy_status: 'building',
      netlify_url: deployResponse.deploy_url,
      netlify_deploy_id: deployResponse.id
    });

    console.log(`‚úÖ Deploy initiated for project ${projectId}: ${deployResponse.deploy_url}`);
  } catch (error) {
    console.error(`‚ùå Error deploying project ${projectId}:`, error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–µ–ø–ª–æ—è
    await projectLogger.logDeployStatusChange(
      projectId,
      'building',
      'failed',
      undefined,
      'deploy_error'
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –∫–∞–∫ failed
    try {
      const supabase = getSupabaseServerClient();
      const projectQueries = new ProjectQueries(supabase);
      await projectQueries.updateProject(projectId, {
        deploy_status: 'failed'
      });
    } catch (updateError) {
      console.error('‚ùå Error updating deploy status:', updateError);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
 */
async function checkAndTriggerInitialDeploy(projectId: string): Promise<void> {
  try {
    console.log(`üîç Checking if initial deploy needed for project ${projectId}...`);
    
    const supabase = getSupabaseServerClient();
    const projectQueries = new ProjectQueries(supabase);
    const historyQueries = new FileHistoryQueries(supabase);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    const project = await projectQueries.getProjectById(projectId);
    if (!project) {
      console.log(`‚ùå Project ${projectId} not found`);
      return;
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 1: –ï—Å–ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ —É–∂–µ –µ—Å—Ç—å netlify_url, —Ç–æ –¥–µ–ø–ª–æ–π —É–∂–µ –±—ã–ª
    if (project.netlify_url) {
      console.log(`‚úÖ Project ${projectId} already has deployment: ${project.netlify_url}`);
      return;
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 2: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ 'ready' - –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω
    if (project.deploy_status === 'ready') {
      console.log(`‚úÖ Project ${projectId} deploy status is 'ready', skipping auto-deploy`);
      return;
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 3: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 'building' - –¥–µ–ø–ª–æ–π —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if (project.deploy_status === 'building') {
      console.log(`‚è≥ Project ${projectId} is already building, skipping auto-deploy`);
      return;
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–º–º–∏—Ç—ã (–ª—é–±—ã–µ –∫–æ–º–º–∏—Ç—ã –æ–∑–Ω–∞—á–∞—é—Ç —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞)
    const existingCommits = await historyQueries.getProjectFileHistory(projectId, 1);
    if (existingCommits.length > 0) {
      console.log(`üìÑ Project ${projectId} already has commits, skipping auto-deploy`);
      return;
    }

    // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã)
    const projectAge = Date.now() - (project.created_at ? new Date(project.created_at).getTime() : Date.now());
    const fiveMinutes = 5 * 60 * 1000;
    
    if (projectAge >= fiveMinutes) {
      console.log(`‚è∞ Project ${projectId} is too old (${Math.round(projectAge / 1000)}s), skipping auto-deploy`);
      return;
    }

    // –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ - –ø—Ä–æ–µ–∫—Ç –Ω–æ–≤—ã–π –∏ –ø—É—Å—Ç–æ–π, –Ω—É–∂–µ–Ω –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π
    console.log(`üöÄ Project ${projectId} is new and empty (${Math.round(projectAge / 1000)}s old), starting initial deploy...`);
    
    try {
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
      // (–æ–Ω–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞)
      const templateFiles = await historyQueries.getProjectFileHistory(projectId, 50);
      
      let commitId: string;
      
      if (templateFiles.length > 0) {
        // –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        commitId = templateFiles[0].commit_id || crypto.randomUUID();
        console.log(`üì¶ Template files already exist in history, using commit ${commitId}`);
      } else {
        // –§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ ZIP
        console.log(`üì¶ No template files in history, extracting from template ZIP...`);
        commitId = await extractAndSaveTemplateFiles(projectId);
        console.log(`üì¶ Template files extracted and saved as commit ${commitId}`);
      }
      
      // –î–µ–ø–ª–æ–∏–º –∫–æ–º–º–∏—Ç —Å —Ñ–∞–π–ª–∞–º–∏ —à–∞–±–ª–æ–Ω–∞
      await triggerDeploy(projectId, commitId);
      console.log(`‚úÖ Initial template deploy triggered for project ${projectId}`);
      
    } catch (templateError) {
      console.error(`‚ùå Error in initial deploy for project ${projectId}:`, templateError);
      
      // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø–µ—Ä–≤—ã–π —Å–Ω–∞–ø—à–æ—Ç
      console.log(`üîÑ Falling back to empty initial deploy for project ${projectId}`);
      const commitId = await saveFullProjectSnapshot(projectId, 'Initial deployment (fallback)');
      await triggerDeploy(projectId, commitId);
    }
    
  } catch (error) {
    console.error(`‚ùå Error in checkAndTriggerInitialDeploy for project ${projectId}:`, error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
const connectedAgents = new Map<string, Set<string>>(); // projectId -> Set<socketId>

io.on('connection', (socket) => {
  console.log(`‚úÖ Client connected: ${socket.id}`);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
  socket.on('authenticate', (data) => {
    const { projectId, token, clientType } = data;
    
    if (!projectId) {
      socket.emit('error', { message: 'Project ID is required' });
      return;
    }

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
    socket.join(`project:${projectId}`);
    socket.data.projectId = projectId;
    socket.data.clientType = clientType || 'web'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é web-–∫–ª–∏–µ–Ω—Ç
    
    console.log(`üîê Client ${socket.id} authenticated for project ${projectId} (type: ${socket.data.clientType})`);
    socket.emit('authenticated', { projectId });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∞–≥–µ–Ω—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if (clientType === 'agent') {
      if (!connectedAgents.has(projectId)) {
        connectedAgents.set(projectId, new Set());
      }
      connectedAgents.get(projectId)!.add(socket.id);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –í –ö–û–ú–ù–ê–¢–ï –ü–†–û–ï–ö–¢–ê –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞
      io.to(`project:${projectId}`).emit('agent_connected', {
        projectId,
        clientId: socket.id,
        timestamp: new Date().toISOString()
      });
      
      console.log(`üì° Emitted agent_connected event for project ${projectId} to project room`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
      projectLogger.logAgentConnection(
        projectId,
        true,
        socket.id,
        'websocket_connection'
      ).catch(console.error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π
      checkAndTriggerInitialDeploy(projectId).catch(error => {
        console.error(`‚ùå Error checking initial deploy for project ${projectId}:`, error);
      });
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    if (clientType === 'web' || !clientType) {
      const projectAgents = connectedAgents.get(projectId);
      if (projectAgents && projectAgents.size > 0) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –∞–≥–µ–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        socket.emit('agent_connected', {
          projectId,
          clientId: Array.from(projectAgents)[0], // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
          timestamp: new Date().toISOString()
        });
        
        console.log(`üì° Sent existing agent status to new web client ${socket.id} for project ${projectId}`);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ (TRACKING –¢–û–õ–¨–ö–û)
  socket.on('file_change', async (data) => {
    try {
      const { projectId, filePath, content, hash, timestamp } = data;
      
      if (!projectId || !filePath || content === undefined) {
        socket.emit('error', { message: 'Missing required fields' });
        return;
      }

      console.log(`üìù File change tracked: ${filePath} in project ${projectId}`);
      
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_changes (–ù–ï –≤ file_history)
      const supabase = getSupabaseServerClient();
      const pendingQueries = new PendingChangesQueries(supabase);
      const historyQueries = new FileHistoryQueries(supabase);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (modified/added)
      const existingChange = await pendingQueries.getPendingChange(projectId, filePath);
      const lastVersion = await historyQueries.getLatestFileVersion(projectId, filePath);
      
      let action: 'modified' | 'added' = 'added';
      if (existingChange || lastVersion) {
        action = 'modified';
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending change
      await pendingQueries.upsertPendingChange({
        project_id: projectId,
        file_path: filePath,
        content: content,
        action: action,
        content_hash: hash,
        file_size: Buffer.byteLength(content, 'utf-8'),
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      await projectLogger.logFileChange(
        projectId,
        filePath,
        action,
        'file_watcher'
      );

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ tracking (–ë–ï–ó –¥–µ–ø–ª–æ—è)
      socket.emit('file_tracked', {
        filePath,
        action,
        timestamp: Date.now(),
        status: 'tracked'
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      socket.to(`project:${projectId}`).emit('file_updated', {
        filePath,
        action,
        timestamp: Date.now(),
        updatedBy: socket.id,
        isPending: true
      });

    } catch (error) {
      console.error('‚ùå Error tracking file change:', error);
      socket.emit('error', { message: 'Failed to track file change' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (TRACKING –¢–û–õ–¨–ö–û)
  socket.on('file_delete', async (data) => {
    try {
      const { projectId, filePath, timestamp } = data;
      
      if (!projectId || !filePath) {
        socket.emit('error', { message: 'Missing required fields' });
        return;
      }

      console.log(`üóëÔ∏è File delete tracked: ${filePath} in project ${projectId}`);
      
      // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_changes –∫–∞–∫ deleted
      const supabase = getSupabaseServerClient();
      const pendingQueries = new PendingChangesQueries(supabase);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending change —Å action: deleted
      await pendingQueries.upsertPendingChange({
        project_id: projectId,
        file_path: filePath,
        content: '', // –ü—É—Å—Ç–æ–π content –¥–ª—è deleted —Ñ–∞–π–ª–æ–≤
        action: 'deleted',
        file_size: 0,
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ tracking —É–¥–∞–ª–µ–Ω–∏—è
      socket.emit('file_tracked', {
        filePath,
        action: 'deleted',
        timestamp: Date.now(),
        status: 'tracked'
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      socket.to(`project:${projectId}`).emit('file_updated', {
        filePath,
        action: 'deleted',
        timestamp: Date.now(),
        updatedBy: socket.id,
        isPending: true
      });

    } catch (error) {
      console.error('‚ùå Error tracking file delete:', error);
      socket.emit('error', { message: 'Failed to track file delete' });
    }
  });

  // –ù–û–í–´–ô HANDLER: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
  socket.on('save_all_changes', async (data) => {
    try {
      const { projectId, commitMessage } = data;
      
      if (!projectId) {
        socket.emit('error', { message: 'Missing projectId' });
        return;
      }

      console.log(`üíæ Saving all changes for project ${projectId}`);
      
      const commitId = await saveFullProjectSnapshot(projectId, commitMessage);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ successful save
      socket.emit('save_success', {
        commitId,
        timestamp: Date.now()
      });

      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –¥–µ–ø–ª–æ–π –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      console.log(`üöÄ Triggering deploy after save for project ${projectId}`);
      triggerDeploy(projectId, commitId).catch(error => {
        console.error(`‚ùå Deploy failed for project ${projectId}:`, error);
      });

    } catch (error) {
      console.error('‚ùå Error saving changes:', error);
      socket.emit('error', { message: 'Failed to save changes' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', (reason) => {
    console.log(`‚ùå Client disconnected: ${socket.id} (${reason})`);
    
    if (socket.data.projectId) {
      // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–≥–µ–Ω—Ç - —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
      if (socket.data.clientType === 'agent') {
        const projectAgents = connectedAgents.get(socket.data.projectId);
        if (projectAgents) {
          projectAgents.delete(socket.id);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–≥–µ–Ω—Ç - —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
          if (projectAgents.size === 0) {
            connectedAgents.delete(socket.data.projectId);
          }
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –í –ö–û–ú–ù–ê–¢–ï –ü–†–û–ï–ö–¢–ê –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞
        io.to(`project:${socket.data.projectId}`).emit('agent_disconnected', {
          projectId: socket.data.projectId,
          clientId: socket.id,
          timestamp: new Date().toISOString()
        });
        
        console.log(`üì° Emitted agent_disconnected event for project ${socket.data.projectId} to project room`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        projectLogger.logAgentConnection(
          socket.data.projectId,
          false,
          socket.id,
          'websocket_disconnection'
        ).catch(console.error);
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      socket.to(`project:${socket.data.projectId}`).emit('client_disconnected', {
        clientId: socket.id,
        timestamp: Date.now()
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  socket.on('error', (error) => {
    console.error(`‚ùå Socket error for ${socket.id}:`, error);
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
httpServer.listen(PORT, () => {
  console.log(`‚úÖ WebSocket server running on port ${PORT}`);
  console.log(`üîó Connect to: ws://localhost:${PORT}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down WebSocket server...');
  io.close(() => {
    httpServer.close(() => {
      console.log('‚úÖ Server closed');
      process.exit(0);
    });
  });
});

process.on('SIGTERM', () => {
  console.log('\nüõë Received SIGTERM, shutting down...');
  io.close(() => {
    httpServer.close(() => {
      console.log('‚úÖ Server closed');
      process.exit(0);
    });
  });
}); 