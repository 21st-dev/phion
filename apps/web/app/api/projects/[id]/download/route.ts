import { NextRequest, NextResponse } from "next/server"
import { getProjectById } from "@shipvibes/database"
import AdmZip from "adm-zip"
// –£–±–∏—Ä–∞–µ–º R2 –∏–º–ø–æ—Ä—Ç
// import { downloadProjectTemplate } from "@shipvibes/storage";
// –î–æ–±–∞–≤–ª—è–µ–º GitHub App service
import { githubAppService } from "@/lib/github-service"

export async function GET(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  const startTime = Date.now()
  let projectId: string | undefined

  try {
    const { id } = await params
    projectId = id

    console.log(`üîÑ [DOWNLOAD] Starting GitHub-based download for project ${projectId}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log(`üìã [DOWNLOAD] Fetching project data for ${projectId}`)
    const project = await getProjectById(projectId)

    if (!project) {
      console.log(`‚ùå [DOWNLOAD] Project not found: ${projectId}`)
      return NextResponse.json({ error: "Project not found" }, { status: 404 })
    }

    console.log(`‚úÖ [DOWNLOAD] Project found: ${project.name} (template: ${project.template_type})`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if (!project.github_repo_name) {
      console.log(`‚ùå [DOWNLOAD] Project ${projectId} has no GitHub repository`)
      return NextResponse.json(
        { error: "Project does not have a GitHub repository" },
        { status: 404 },
      )
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ GitHub
    console.log(`‚¨áÔ∏è [DOWNLOAD] Downloading ZIP from GitHub repository: ${project.github_repo_name}`)
    const downloadStartTime = Date.now()

    let originalProjectData: Buffer
    try {
      originalProjectData = await githubAppService.downloadRepositoryZip(
        project.github_repo_name,
        "main",
      )
      const downloadTime = Date.now() - downloadStartTime
      console.log(
        `‚úÖ [DOWNLOAD] GitHub download completed in ${downloadTime}ms, size: ${originalProjectData?.length || 0} bytes`,
      )
    } catch (downloadError) {
      console.error(`‚ùå [DOWNLOAD] GitHub download failed for project ${projectId}:`, downloadError)
      return NextResponse.json({ error: "Failed to download project from GitHub" }, { status: 500 })
    }

    if (!originalProjectData || originalProjectData.length === 0) {
      console.log(`‚ùå [DOWNLOAD] Empty or invalid project data from GitHub for ${projectId}`)
      return NextResponse.json({ error: "Project template is empty or corrupted" }, { status: 404 })
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ZIP –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
    console.log(`üîÑ [DOWNLOAD] Processing ZIP to rename root folder for project ${projectId}...`)
    const processingStartTime = Date.now()

    let processedProjectData: Buffer
    try {
      // –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ZIP
      const originalZip = new AdmZip(originalProjectData)
      const entries = originalZip.getEntries()

      console.log(`üìÇ [DOWNLOAD] Original ZIP contains ${entries.length} entries`)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –∏–∑ GitHub (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤–∞—è –ø–∞–ø–∫–∞)
      let originalRootFolder = ""
      const firstEntry = entries.find((entry) => entry.isDirectory)
      if (firstEntry) {
        originalRootFolder = firstEntry.entryName.replace(/\/$/, "") // —É–±–∏—Ä–∞–µ–º trailing slash
        console.log(`üìÅ [DOWNLOAD] Original root folder: "${originalRootFolder}"`)
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ZIP —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–æ–π
      const newZip = new AdmZip()

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –¥—Ä—É–≥–∏—Ö Unicode —Å–∏–º–≤–æ–ª–æ–≤
      let newRootFolder = project.name.trim()

      // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã, –æ—Å—Ç–∞–≤–ª—è—è Unicode
      newRootFolder = newRootFolder
        .replace(/[<>:"/\\|?*]/g, "-") // –û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        .replace(/\s+/g, "-") // –ü—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        .replace(/^\.+|\.+$/g, "") // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        .replace(/-+/g, "-") // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
        .replace(/^-+|-+$/g, "") // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ

      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º—è –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (!newRootFolder) {
        newRootFolder = "project"
      }

      console.log(
        `üìÅ [DOWNLOAD] Renaming root folder: "${originalRootFolder}" ‚Üí "${newRootFolder}"`,
      )

      let processedEntries = 0
      entries.forEach((entry) => {
        let newPath = entry.entryName

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –µ—ë
        if (originalRootFolder && entry.entryName.startsWith(originalRootFolder)) {
          newPath = entry.entryName.replace(originalRootFolder, newRootFolder)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É –≤ –Ω–æ–≤—ã–π ZIP
        if (entry.isDirectory) {
          newZip.addFile(newPath, Buffer.alloc(0))
        } else {
          newZip.addFile(newPath, entry.getData())
        }

        processedEntries++

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ñ–∞–π–ª–æ–≤
        if (processedEntries % 100 === 0 || processedEntries === entries.length) {
          console.log(`üîÑ [DOWNLOAD] Processed ${processedEntries}/${entries.length} entries`)
        }
      })

      processedProjectData = newZip.toBuffer()
      const processingTime = Date.now() - processingStartTime
      console.log(
        `‚úÖ [DOWNLOAD] ZIP processing completed in ${processingTime}ms, new size: ${processedProjectData.length} bytes`,
      )
    } catch (processingError) {
      console.error(
        `‚ùå [DOWNLOAD] ZIP processing failed for project ${projectId}:`,
        processingError,
      )

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      console.log(`‚ö†Ô∏è [DOWNLOAD] Falling back to original ZIP for project ${projectId}`)
      processedProjectData = originalProjectData
    }

    const totalTime = Date.now() - startTime
    console.log(`üéâ [DOWNLOAD] Successfully completed download for ${projectId} in ${totalTime}ms`)

    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
    const originalFileName = project.name.trim() || "project"

    // ASCII-safe –∏–º—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const safeFileName =
      originalFileName
        .replace(/[<>:"/\\|?*]/g, "-") // –û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        .replace(/\s+/g, "-") // –ü—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        .replace(/-+/g, "-") // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
        .replace(/^-+|-+$/g, "") // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        // –ó–∞–º–µ–Ω—è–µ–º non-ASCII —Å–∏–º–≤–æ–ª—ã –Ω–∞ ASCII –∞–Ω–∞–ª–æ–≥–∏
        .replace(/[^\x00-\x7F]/g, function (char) {
          // –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
          const cyrillicMap: { [key: string]: string } = {
            –∞: "a",
            –±: "b",
            –≤: "v",
            –≥: "g",
            –¥: "d",
            –µ: "e",
            —ë: "yo",
            –∂: "zh",
            –∑: "z",
            –∏: "i",
            –π: "y",
            –∫: "k",
            –ª: "l",
            –º: "m",
            –Ω: "n",
            –æ: "o",
            –ø: "p",
            —Ä: "r",
            —Å: "s",
            —Ç: "t",
            —É: "u",
            —Ñ: "f",
            —Ö: "h",
            —Ü: "ts",
            —á: "ch",
            —à: "sh",
            —â: "sch",
            —ä: "",
            —ã: "y",
            —å: "",
            —ç: "e",
            —é: "yu",
            —è: "ya",
            –ê: "A",
            –ë: "B",
            –í: "V",
            –ì: "G",
            –î: "D",
            –ï: "E",
            –Å: "Yo",
            –ñ: "Zh",
            –ó: "Z",
            –ò: "I",
            –ô: "Y",
            –ö: "K",
            –õ: "L",
            –ú: "M",
            –ù: "N",
            –û: "O",
            –ü: "P",
            –†: "R",
            –°: "S",
            –¢: "T",
            –£: "U",
            –§: "F",
            –•: "H",
            –¶: "Ts",
            –ß: "Ch",
            –®: "Sh",
            –©: "Sch",
            –™: "",
            –´: "Y",
            –¨: "",
            –≠: "E",
            –Æ: "Yu",
            –Ø: "Ya",
          }

          return cyrillicMap[char] || "x"
        }) || "project"

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å ID –ø—Ä–æ–µ–∫—Ç–∞
    const fullFileName = `${safeFileName}-${projectId}.zip`

    console.log(`üìÅ [DOWNLOAD] Filename: "${originalFileName}" ‚Üí "${fullFileName}"`)

    return new NextResponse(processedProjectData, {
      status: 200,
      headers: {
        "Content-Type": "application/zip",
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        "Content-Disposition": `attachment; filename="${fullFileName}"`,
        "Content-Length": processedProjectData.length.toString(),
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        "Cache-Control": "no-cache, no-store, must-revalidate",
        Pragma: "no-cache",
        Expires: "0",
      },
    })
  } catch (error) {
    const totalTime = Date.now() - startTime
    console.error(
      `‚ùå [DOWNLOAD] Fatal error for project ${projectId || "unknown"} after ${totalTime}ms:`,
      error,
    )
    return NextResponse.json(
      {
        error: "Failed to download project",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
