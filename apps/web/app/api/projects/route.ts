import { NextRequest, NextResponse } from "next/server";
import { createProject, getUserProjects, updateProject } from "@shipvibes/database";
import { createAuthServerClient } from "@shipvibes/database";
import { cookies } from "next/headers";
import path from "path";
import fs from "fs";
import { getSupabaseServerClient, ProjectQueries, CommitHistoryQueries } from "@shipvibes/database";
// Server-side import for the project logger
import { projectLogger } from "@shipvibes/shared/project-logger-server";
// –î–æ–±–∞–≤–ª—è–µ–º GitHub App service
import { githubAppService } from "@/lib/github-service";
// –î–æ–±–∞–≤–ª—è–µ–º Netlify service
import { netlifyService } from "@/lib/netlify-service";

export async function GET(request: NextRequest) {
  try {
    const cookieStore = await cookies();
    const supabase = createAuthServerClient({
      getAll() {
        return cookieStore.getAll();
      },
      setAll(cookiesToSet) {
        try {
          cookiesToSet.forEach(({ name, value, options }) =>
            cookieStore.set(name, value, options)
          );
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookies
        }
      },
    });

    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (RLS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç)
    const projects = await getUserProjects(user.id);
    return NextResponse.json(projects);
  } catch (error) {
    console.error("Error fetching projects:", error);
    return NextResponse.json(
      { error: "Failed to fetch projects" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const cookieStore = await cookies();
    const supabase = createAuthServerClient({
      getAll() {
        return cookieStore.getAll();
      },
      setAll(cookiesToSet) {
        try {
          cookiesToSet.forEach(({ name, value, options }) =>
            cookieStore.set(name, value, options)
          );
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookies
        }
      },
    });

    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = await request.json();
    const { name, template_type } = body;

    if (!name || !template_type) {
      return NextResponse.json(
        { error: "Name and template_type are required" },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const project = await createProject({
      name,
      template_type,
      user_id: user.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    await projectLogger.logProjectCreated(
      project.id,
      project,
      'api_request'
    );

    try {
      console.log(`üöÄ [PROJECT_CREATION] Starting GitHub-based project creation for ${project.id}`);
      
      // 1. –°–æ–∑–¥–∞–µ–º GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      const repository = await githubAppService.createRepository(
        project.id,
        `Vybcel project: ${project.name}`
      );
      
      console.log(`‚úÖ [PROJECT_CREATION] GitHub repository created: ${repository.html_url}`);

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —Å GitHub –¥–∞–Ω–Ω—ã–º–∏
      const supabaseClient = getSupabaseServerClient();
      const projectQueries = new ProjectQueries(supabaseClient);
      
      await projectQueries.updateGitHubInfo(project.id, {
        github_repo_url: repository.html_url,
        github_repo_name: repository.name,
        github_owner: 'vybcel'
      });

      // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "pending" –ø–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
      await projectQueries.updateProject(project.id, {
        deploy_status: "pending"
      });

      // 4. üöÄ –ê–°–ò–ù–•–†–û–ù–ù–û –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Ñ–æ–Ω–µ
      console.log(`üîÑ [PROJECT_CREATION] Starting background template upload...`);
      uploadTemplateFilesInBackground(project.id, template_type, name, repository.name)
        .catch(error => {
          console.error(`‚ùå [PROJECT_CREATION] Background upload failed for ${project.id}:`, error);
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
          projectQueries.updateProject(project.id, { deploy_status: "failed" });
        });

      // 5. üéØ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log(`‚úÖ [PROJECT_CREATION] Project created, files uploading in background...`);
      
      return NextResponse.json({
        project: {
          ...project,
          github_repo_url: repository.html_url,
          github_repo_name: repository.name,
          github_owner: 'vybcel',
          deploy_status: "pending" // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        },
        downloadUrl: `/api/projects/${project.id}/download`,
        githubUrl: repository.html_url,
        status: "pending", // –ö–ª–∏–µ–Ω—Ç –∑–Ω–∞–µ—Ç —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        message: "Project created! Template files are being uploaded in the background..."
      });

    } catch (githubError) {
      console.error("‚ùå [PROJECT_CREATION] Error with GitHub operations:", githubError);
      
      // –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î, –Ω–æ GitHub setup –Ω–µ —É–¥–∞–ª—Å—è
      await updateProject(project.id, {
        deploy_status: "failed"
      });
      
      return NextResponse.json({
        project,
        downloadUrl: `/api/projects/${project.id}/download`,
        error: "GitHub setup failed but project was created"
      });
    }
  } catch (error) {
    console.error("Error creating project:", error);
    return NextResponse.json(
      { error: "Failed to create project" },
      { status: 500 }
    );
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é generateAndUploadTemplate
 */
async function generateTemplateFiles(
  projectId: string,
  templateType: string,
  projectName: string
): Promise<Record<string, string>> {
  console.log(`üîÑ [TEMPLATE] Generating template files for ${projectId} (${templateType})`);
  
  // –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
  const templatePath = path.join(process.cwd(), "..", "..", "templates", templateType);
  
  if (!fs.existsSync(templatePath)) {
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
    const alternativeTemplatePath = path.join(process.cwd(), "templates", templateType);
    if (!fs.existsSync(alternativeTemplatePath)) {
      throw new Error(`Template ${templateType} not found`);
    }
    return await collectTemplateFiles(alternativeTemplatePath, projectName, projectId);
  }
  
  return await collectTemplateFiles(templatePath, projectName, projectId);
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
async function collectTemplateFiles(
  templatePath: string,
  projectName: string,
  projectId: string
): Promise<Record<string, string>> {
  const templateFiles: Record<string, string> = {};
  
  function collectFiles(dirPath: string, relativePath: string = ''): void {
    const items = fs.readdirSync(dirPath, { withFileTypes: true });
    
    for (const item of items) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (item.name === 'node_modules' || item.name === '.git' || item.name === 'dist' || item.name === '.next') {
        continue;
      }
      
      const fullPath = path.join(dirPath, item.name);
      const relativeFilePath = relativePath ? path.join(relativePath, item.name) : item.name;
      
      if (item.isDirectory()) {
        collectFiles(fullPath, relativeFilePath);
      } else {
        let content = fs.readFileSync(fullPath, 'utf-8');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (item.name === 'package.json') {
          const packageJson = JSON.parse(content);
          packageJson.name = projectName.toLowerCase().replace(/\s+/g, '-');
          content = JSON.stringify(packageJson, null, 2);
        } else if (item.name === 'vybcel.config.json') {
          // –ó–∞–º–µ–Ω—è–µ–º PROJECT_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
          content = content.replace(/__PROJECT_ID__/g, projectId);
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ (–∑–∞–º–µ–Ω—è–µ–º \ –Ω–∞ /)
        const normalizedPath = relativeFilePath.replace(/\\/g, '/');
        templateFiles[normalizedPath] = content;
      }
    }
  }
  
  collectFiles(templatePath);
  
  console.log(`üìã [TEMPLATE] Collected ${Object.keys(templateFiles).length} files from template`);
  return templateFiles;
}

/**
 * üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —à–∞–±–ª–æ–Ω–∞ –≤ —Ñ–æ–Ω–µ
 * –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ background
 */
async function uploadTemplateFilesInBackground(
  projectId: string,
  templateType: string,
  projectName: string,
  repositoryName: string
): Promise<void> {
  console.log(`üîÑ [BACKGROUND] Starting template upload for ${projectId}...`);
  
  try {
    const supabaseClient = getSupabaseServerClient();
    const projectQueries = new ProjectQueries(supabaseClient);
    const commitHistoryQueries = new CommitHistoryQueries(supabaseClient);

    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ 
    const templateFiles = await generateTemplateFiles(projectId, templateType, projectName);
    console.log(`üìã [BACKGROUND] Generated ${Object.keys(templateFiles).length} template files`);

    // 2. üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –û–î–ù–ò–ú –ö–û–ú–ú–ò–¢–û–ú (–∏–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
    const result = await githubAppService.createMultipleFiles(
      repositoryName,
      templateFiles,
      'Initial commit from template'
    );
    
    console.log(`‚úÖ [BACKGROUND] Uploaded ${Object.keys(templateFiles).length} files in one commit`);
    const mainCommitSha = result.commitSha;

    // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ commit_history
    if (mainCommitSha) {
      await commitHistoryQueries.createCommitHistory({
        project_id: projectId,
        commit_message: 'Initial commit from template',
        github_commit_sha: mainCommitSha,
        github_commit_url: `https://github.com/vybcel/${repositoryName}/commit/${mainCommitSha}`,
        files_count: Object.keys(templateFiles).length
      });
    }

    // 4. ‚úÖ –¢–ï–ü–ï–†–¨ –ù–ï –°–û–ó–î–ê–ï–ú NETLIFY –°–ê–ô–¢ –°–†–ê–ó–£!
    // Netlify —Å–∞–π—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º Save All Changes –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–∫–∞–∑–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é (–Ω–æ –±–µ–∑ netlify_site_id)
    await projectQueries.updateProject(projectId, {
      deploy_status: "ready" // –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    });

    // 5. üöÄ –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try {
      const websocketServerUrl = process.env.WEBSOCKET_SERVER_URL || 'http://localhost:8080';
      const notifyResponse = await fetch(`${websocketServerUrl}/api/notify-status-change`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          projectId,
          status: 'ready',
          message: 'Project initialization completed'
        })
      });

      if (notifyResponse.ok) {
        console.log(`üì° [BACKGROUND] WebSocket notification sent for project ${projectId}`);
      } else {
        console.error(`‚ö†Ô∏è [BACKGROUND] Failed to send WebSocket notification for project ${projectId}`);
      }
    } catch (notifyError) {
      console.error(`‚ùå [BACKGROUND] Error sending WebSocket notification:`, notifyError);
    }

    console.log(`üéâ [BACKGROUND] Template upload completed for ${projectId}! Project ready for development.`);

  } catch (error) {
    console.error(`‚ùå [BACKGROUND] Template upload failed for ${projectId}:`, error);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
    const supabaseClient = getSupabaseServerClient();
    const projectQueries = new ProjectQueries(supabaseClient);
    await projectQueries.updateProject(projectId, {
      deploy_status: "failed"
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
    try {
      const websocketServerUrl = process.env.WEBSOCKET_SERVER_URL || 'http://localhost:8080';
      await fetch(`${websocketServerUrl}/api/notify-status-change`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          projectId,
          status: 'failed',
          message: 'Project initialization failed'
        })
      });
    } catch (notifyError) {
      console.error(`‚ùå [BACKGROUND] Error sending failure WebSocket notification:`, notifyError);
    }
    
    throw error;
  }
}

