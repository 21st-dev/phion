"use client";

import { useEffect, useState, useRef } from 'react';
import { io, Socket } from 'socket.io-client';

interface UseWebSocketOptions {
  projectId: string;
  onFileTracked?: (data: any) => void;
  onSaveSuccess?: (data: any) => void;
  onError?: (error: any) => void;
}

export function useWebSocket({ 
  projectId, 
  onFileTracked, 
  onSaveSuccess, 
  onError 
}: UseWebSocketOptions) {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;

  useEffect(() => {
    const connectSocket = () => {
      const newSocket = io(process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8080', {
        transports: ['websocket'],
        autoConnect: true,
        timeout: 5000,
      });

      newSocket.on('connect', () => {
        console.log('üîó WebSocket connected');
        setIsConnected(true);
        setConnectionError(null);
        reconnectAttempts.current = 0;
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        newSocket.emit('authenticate', { projectId });
      });

      newSocket.on('authenticated', (data) => {
        console.log('üîê WebSocket authenticated for project:', data.projectId);
      });

      newSocket.on('disconnect', (reason) => {
        console.log('‚ùå WebSocket disconnected:', reason);
        setIsConnected(false);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (reason === 'io server disconnect') {
          // –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
          setTimeout(() => {
            if (reconnectAttempts.current < maxReconnectAttempts) {
              reconnectAttempts.current++;
              newSocket.connect();
            }
          }, 1000 * reconnectAttempts.current);
        }
      });

      newSocket.on('connect_error', (error) => {
        console.error('‚ùå WebSocket connection error:', error);
        setConnectionError('Failed to connect to server');
        setIsConnected(false);
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤
      newSocket.on('file_tracked', (data) => {
        console.log('üìù File tracked:', data);
        onFileTracked?.(data);
      });

      newSocket.on('save_success', (data) => {
        console.log('üíæ Save successful:', data);
        onSaveSuccess?.(data);
      });

      newSocket.on('file_updated', (data) => {
        console.log('üîÑ File updated by another user:', data);
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      });

      newSocket.on('files_saved', (data) => {
        console.log('üíæ Files saved by another user:', data);
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∫–æ–≥–¥–∞ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ñ–∞–π–ª—ã
      });

      newSocket.on('error', (error) => {
        console.error('‚ùå WebSocket error:', error);
        onError?.(error);
      });

      setSocket(newSocket);
    };

    connectSocket();

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, [projectId]);

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const saveAllChanges = (commitMessage?: string) => {
    if (socket && isConnected) {
      socket.emit('save_all_changes', { 
        projectId, 
        commitMessage 
      });
    } else {
      console.error('‚ùå Cannot save: WebSocket not connected');
      onError?.({ message: 'Not connected to server' });
    }
  };

  return {
    socket,
    isConnected,
    connectionError,
    saveAllChanges,
  };
} 