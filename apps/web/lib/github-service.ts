import jwt from "jsonwebtoken"
import fetch from "node-fetch"
import type { Response as NodeFetchResponse } from "node-fetch"

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è GitHub API
interface GitHubInstallationToken {
  token: string
  expires_at: string
  permissions: Record<string, string>
}

interface GitHubRepository {
  id: number
  name: string
  full_name: string
  private: boolean
  html_url: string
  clone_url: string
  ssh_url: string
  default_branch: string
  created_at: string
  owner: {
    login: string
    id: number
    type: string
  }
}

interface GitHubFileContent {
  name: string
  path: string
  sha: string
  size: number
  url: string
  html_url: string
  git_url: string
  download_url: string
  type: string
  content: string
  encoding: string
}

interface GitHubCommit {
  sha: string
  node_id: string
  url: string
  html_url: string
  commit: {
    message: string
    author: {
      name: string
      email: string
      date: string
    }
    committer: {
      name: string
      email: string
      date: string
    }
  }
}

interface CreateFileRequest {
  message: string
  content: string // Base64 encoded
  branch?: string
  committer?: {
    name: string
    email: string
  }
  author?: {
    name: string
    email: string
  }
}

interface UpdateFileRequest extends CreateFileRequest {
  sha: string // Required for updates
}

interface CreateRepositoryRequest {
  name: string
  description?: string
  private: boolean
  auto_init?: boolean
  gitignore_template?: string
  license_template?: string
}

export class GitHubAppService {
  private readonly appId: string
  private readonly installationId: string
  private readonly privateKey: string
  private readonly baseUrl = "https://api.github.com"
  private readonly organization = "phion-dev"

  // –ö—ç—à –¥–ª—è installation —Ç–æ–∫–µ–Ω–æ–≤
  private tokenCache: {
    token: string
    expiresAt: Date
  } | null = null

  constructor() {
    this.appId = process.env.GITHUB_APP_ID!
    this.installationId = process.env.GITHUB_APP_INSTALLATION_ID!
    this.privateKey = process.env.GITHUB_APP_PRIVATE_KEY!

    if (!this.appId || !this.installationId || !this.privateKey) {
      throw new Error("GitHub App configuration is missing. Please check environment variables.")
    }

    console.log("‚úÖ GitHubAppService initialized", {
      appId: this.appId,
      installationId: this.installationId,
      organization: this.organization,
    })
  }

  /**
   * Retry wrapper with exponential backoff
   */
  private async withRetry<T>(
    operation: () => Promise<T>,
    context: string,
    maxAttempts = 3,
    baseDelay = 1000,
  ): Promise<T> {
    let lastError: Error

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const result = await operation()
        if (attempt > 1) {
          console.log(`‚úÖ ${context} succeeded on attempt ${attempt}`)
        }
        return result
      } catch (error) {
        lastError = error as Error

        if (attempt === maxAttempts) {
          console.error(`‚ùå ${context} failed after ${maxAttempts} attempts:`, lastError.message)
          break
        }

        // Check if error is retryable
        if (!this.shouldRetryError(error)) {
          console.error(`‚ùå ${context} failed with non-retryable error:`, lastError.message)
          break
        }

        const delay = baseDelay * Math.pow(2, attempt - 1) + Math.random() * 1000
        console.log(
          `‚ö†Ô∏è ${context} attempt ${attempt} failed, retrying in ${Math.round(delay)}ms:`,
          lastError.message,
        )
        await new Promise((resolve) => setTimeout(resolve, delay))
      }
    }

    throw lastError!
  }

  /**
   * Determines if an error should trigger a retry
   */
  private shouldRetryError(error: any): boolean {
    if (error?.status) {
      // Retry on temporary server errors
      if (error.status >= 500) return true
      // Retry on rate limiting
      if (error.status === 429) return true
      // Don't retry on client errors (400-499, except 429)
      if (error.status >= 400 && error.status < 500) return false
    }

    // Retry on network errors
    if (
      error?.code === "ENOTFOUND" ||
      error?.code === "ECONNRESET" ||
      error?.code === "ETIMEDOUT" ||
      error?.message?.includes("fetch failed") ||
      error?.message?.includes("network")
    ) {
      return true
    }

    return false
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è GitHub App
   */
  private generateJWT(): string {
    const now = Math.floor(Date.now() / 1000)
    const payload = {
      iat: now - 60, // Issued 60 seconds ago
      exp: now + 600, // Expires in 10 minutes
      iss: this.appId, // Issuer: GitHub App ID
    }

    return jwt.sign(payload, this.privateKey, { algorithm: "RS256" })
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç installation token –¥–ª—è GitHub App
   * –¢–æ–∫–µ–Ω –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏
   */
  async getInstallationToken(): Promise<string> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –±—É—Ñ–µ—Ä–∞ - 10 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è)
    if (this.tokenCache && this.tokenCache.expiresAt > new Date(Date.now() + 10 * 60 * 1000)) {
      console.log("üîÑ Using cached installation token")
      return this.tokenCache.token
    }

    return this.withRetry(
      async () => {
        console.log("üîë Generating new installation token...")
        const jwtToken = this.generateJWT()

        const response = await fetch(
          `${this.baseUrl}/app/installations/${this.installationId}/access_tokens`,
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${jwtToken}`,
              Accept: "application/vnd.github.v3+json",
              "User-Agent": "Phion-Bot/1.0",
            },
            // Add timeout for token generation
            signal: AbortSignal.timeout(15000), // 15 second timeout
          },
        )

        if (!response.ok) {
          const error = await response.text()
          const errorObj = new Error(
            `Failed to get installation token: ${response.status} ${error}`,
          ) as any
          errorObj.status = response.status
          throw errorObj
        }

        const data = (await response.json()) as GitHubInstallationToken

        // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–æ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 60 –º–∏–Ω—É—Ç, –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 50 –º–∏–Ω—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        this.tokenCache = {
          token: data.token,
          expiresAt: new Date(Date.now() + 50 * 60 * 1000),
        }

        console.log("‚úÖ Generated new installation token", {
          expiresAt: data.expires_at,
          permissions: Object.keys(data.permissions || {}).length,
        })

        return data.token
      },
      "getInstallationToken",
      5, // Increased attempts for critical token generation
      3000, // Longer initial delay
    )
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ GitHub API
   */
  private async makeAuthenticatedRequest(
    endpoint: string,
    options: any = {},
  ): Promise<NodeFetchResponse> {
    const token = await this.getInstallationToken()

    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      ...options,
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github.v3+json",
        "User-Agent": "Phion-Bot/1.0",
        "Content-Type": "application/json",
        ...options.headers,
      },
    })

    return response
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ phion-dev
   */
  async createRepository(projectId: string, description?: string): Promise<GitHubRepository> {
    const repoName = `phion-project-${projectId}`

    return this.withRetry(
      async () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        const existingRepo = await this.checkRepositoryExists(repoName)
        if (existingRepo) {
          console.log(`‚ö†Ô∏è Repository ${repoName} already exists. Checking if it's orphaned...`)

          // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
          try {
            await this.deleteRepository(repoName)
            console.log(`üßπ Deleted orphaned repository: ${repoName}`)

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            await new Promise((resolve) => setTimeout(resolve, 1000))
          } catch (deleteError) {
            console.error(`‚ùå Failed to delete existing repository ${repoName}:`, deleteError)
            throw new Error(
              `Repository ${repoName} already exists and could not be deleted. Please delete it manually on GitHub or contact support.`,
            )
          }
        }

        const requestBody: CreateRepositoryRequest = {
          name: repoName,
          description: description || `Phion project ${projectId}`,
          private: true,
          auto_init: true, // –°–æ–∑–¥–∞–µ–º —Å initial commit —á—Ç–æ–±—ã Git Tree API —Ä–∞–±–æ—Ç–∞–ª
        }

        const response = await this.makeAuthenticatedRequest(`/orgs/${this.organization}/repos`, {
          method: "POST",
          body: JSON.stringify(requestBody),
        })

        if (!response.ok) {
          const error = await response.text()
          const errorObj = new Error(
            `Failed to create repository: ${response.status} ${error}`,
          ) as any
          errorObj.status = response.status
          throw errorObj
        }

        const repository = (await response.json()) as GitHubRepository

        console.log("üéâ Created GitHub repository", {
          projectId,
          repoName: repository.name,
          repoUrl: repository.html_url,
          isPrivate: repository.private,
        })

        return repository
      },
      `createRepository(${projectId})`,
      5, // Increased max attempts for critical operation
      2000, // Longer initial delay
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  async checkRepositoryExists(repoName: string): Promise<GitHubRepository | null> {
    try {
      const response = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}`,
      )

      if (response.ok) {
        const repository = (await response.json()) as GitHubRepository
        console.log("üîç Repository exists", {
          repoName: repository.name,
          repoUrl: repository.html_url,
          isPrivate: repository.private,
        })
        return repository
      }

      if (response.status === 404) {
        console.log("üîç Repository does not exist", { repoName })
        return null
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
      const error = await response.text()
      throw new Error(`Failed to check repository existence: ${response.status} ${error}`)
    } catch (error) {
      console.error("‚ùå Failed to check repository existence", {
        repoName,
        error,
      })
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async listOrganizationRepositories(page = 1, perPage = 100): Promise<GitHubRepository[]> {
    try {
      const response = await this.makeAuthenticatedRequest(
        `/orgs/${this.organization}/repos?type=all&page=${page}&per_page=${perPage}&sort=created&direction=desc`,
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Failed to list organization repositories: ${response.status} ${error}`)
      }

      const repositories = (await response.json()) as GitHubRepository[]

      console.log("üìã Retrieved organization repositories", {
        organization: this.organization,
        count: repositories.length,
        page,
        perPage,
      })

      return repositories
    } catch (error) {
      console.error("‚ùå Failed to list organization repositories", { error })
      throw error
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç "–æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ" —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ GitHub, –Ω–æ –Ω–µ—Ç –≤ –ë–î)
   */
  async findOrphanedRepositories(): Promise<GitHubRepository[]> {
    try {
      console.log("üîç Searching for orphaned repositories...")

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ phion-project-* –∏–∑ GitHub
      const allRepos = await this.listOrganizationRepositories()
      const phionRepos = allRepos.filter(
        (repo) => repo.name.startsWith("phion-project-") && repo.owner?.login === this.organization,
      )

      console.log(`üîç Found ${phionRepos.length} phion repositories in GitHub`)

      // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      // –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      return phionRepos
    } catch (error) {
      console.error("‚ùå Failed to find orphaned repositories", { error })
      throw error
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
   */
  async createOrUpdateFile(
    repoName: string,
    filePath: string,
    content: string,
    message: string,
    sha?: string,
  ): Promise<{ sha: string; commit: GitHubCommit }> {
    try {
      const base64Content = Buffer.from(content, "utf8").toString("base64")

      const requestBody: CreateFileRequest | UpdateFileRequest = {
        message,
        content: base64Content,
        branch: "main",
        committer: {
          name: "Phion Bot",
          email: "bot@phion.com",
        },
        author: {
          name: "Phion Bot",
          email: "bot@phion.com",
        },
        ...(sha ? { sha } : {}),
      }

      const response = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/contents/${filePath}`,
        {
          method: "PUT",
          body: JSON.stringify(requestBody),
        },
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Failed to create/update file: ${response.status} ${error}`)
      }

      const result = (await response.json()) as any

      console.log("üìù Created/updated file in GitHub", {
        repoName,
        filePath,
        sha: result.content.sha,
        commitSha: result.commit.sha,
      })

      return {
        sha: result.content.sha,
        commit: result.commit,
      }
    } catch (error) {
      console.error("‚ùå Failed to create/update file in GitHub", {
        repoName,
        filePath,
        error,
      })
      throw error
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  async downloadRepositoryZip(repoName: string, ref = "main"): Promise<Buffer> {
    try {
      const response = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/zipball/${ref}`,
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Failed to download repository ZIP: ${response.status} ${error}`)
      }

      const buffer = await response.buffer()

      console.log("üîÑ Downloaded repository ZIP", {
        repoName,
        ref,
        sizeBytes: buffer.length,
      })

      return buffer
    } catch (error) {
      console.error("‚ùå Failed to download repository ZIP", {
        repoName,
        ref,
        error,
      })
      throw error
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
   */
  async deleteRepository(repoName: string): Promise<void> {
    try {
      const response = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}`,
        {
          method: "DELETE",
        },
      )

      if (!response.ok) {
        const error = await response.text()

        // –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º
        if (response.status === 404) {
          console.log("‚ö†Ô∏è Repository already deleted or not found", {
            repoName,
          })
          return
        }

        throw new Error(`Failed to delete repository: ${response.status} ${error}`)
      }

      console.log("üóëÔ∏è Deleted GitHub repository", {
        repoName,
        fullName: `${this.organization}/${repoName}`,
      })
    } catch (error) {
      console.error("‚ùå Failed to delete GitHub repository", {
        repoName,
        error,
      })
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  async getFileContent(
    repoName: string,
    filePath: string,
    ref = "main",
  ): Promise<GitHubFileContent> {
    try {
      const response = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/contents/${filePath}?ref=${ref}`,
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Failed to get file content: ${response.status} ${error}`)
      }

      const fileContent = (await response.json()) as GitHubFileContent

      console.log("üìñ Retrieved file content from GitHub", {
        repoName,
        filePath,
        ref,
        encoding: fileContent.encoding,
        size: fileContent.size,
      })

      return fileContent
    } catch (error) {
      console.error("‚ùå Failed to get file content from GitHub", {
        repoName,
        filePath,
        ref,
        error,
      })
      throw error
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  async deleteFile(
    repoName: string,
    filePath: string,
    message: string,
    sha: string,
  ): Promise<{ commit: GitHubCommit }> {
    try {
      const requestBody = {
        message,
        sha,
        branch: "main",
        committer: {
          name: "Phion Bot",
          email: "bot@phion.com",
        },
        author: {
          name: "Phion Bot",
          email: "bot@phion.com",
        },
      }

      const response = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/contents/${filePath}`,
        {
          method: "DELETE",
          body: JSON.stringify(requestBody),
        },
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Failed to delete file: ${response.status} ${error}`)
      }

      const result = (await response.json()) as any

      console.log("üóëÔ∏è Deleted file from GitHub", {
        repoName,
        filePath,
        commitSha: result.commit.sha,
      })

      return {
        commit: result.commit,
      }
    } catch (error) {
      console.error("‚ùå Failed to delete file from GitHub", {
        repoName,
        filePath,
        error,
      })
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
   */
  async getCommits(repoName: string, ref = "main", perPage = 50): Promise<GitHubCommit[]> {
    try {
      const response = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/commits?sha=${ref}&per_page=${perPage}`,
      )

      if (!response.ok) {
        const error = await response.text()
        throw new Error(`Failed to get commits: ${response.status} ${error}`)
      }

      const commits = (await response.json()) as GitHubCommit[]

      console.log("üìã Retrieved commits from GitHub", {
        repoName,
        ref,
        count: commits.length,
      })

      return commits
    } catch (error) {
      console.error("‚ùå Failed to get commits from GitHub", {
        repoName,
        ref,
        error,
      })
      throw error
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è git –æ–ø–µ—Ä–∞—Ü–∏–π
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è git pull –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∞–≥–µ–Ω—Ç–µ
   */
  async createTemporaryToken(): Promise<{ token: string; expiresAt: string }> {
    try {
      const installationToken = await this.getInstallationToken()

      // Installation token —Å–∞–º –ø–æ —Å–µ–±–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π (60 –º–∏–Ω—É—Ç)
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è git –æ–ø–µ—Ä–∞—Ü–∏–π
      const expiresAt = new Date(Date.now() + 55 * 60 * 1000).toISOString()

      console.log("üîë Created temporary git token", { expiresAt })

      return {
        token: installationToken,
        expiresAt,
      }
    } catch (error) {
      console.error("‚ùå Failed to create temporary git token", error)
      throw error
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GitHub App
   */
  async healthCheck(): Promise<{
    status: "healthy" | "unhealthy"
    appId: string
    installationId: string
    organization: string
    tokenValid: boolean
    error?: string
  }> {
    try {
      const token = await this.getInstallationToken()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const response = await this.makeAuthenticatedRequest(`/orgs/${this.organization}`)

      const result = {
        status: response.ok ? ("healthy" as const) : ("unhealthy" as const),
        appId: this.appId,
        installationId: this.installationId,
        organization: this.organization,
        tokenValid: !!token,
        ...(response.ok ? {} : { error: `Org access failed: ${response.status}` }),
      }

      console.log("üè• GitHub App health check", result)
      return result
    } catch (error) {
      const result = {
        status: "unhealthy" as const,
        appId: this.appId,
        installationId: this.installationId,
        organization: this.organization,
        tokenValid: false,
        error: error instanceof Error ? error.message : "Unknown error",
      }

      console.error("‚ùå GitHub App health check failed", result)
      return result
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–¥–Ω–∏–º –∫–æ–º–º–∏—Ç–æ–º —á–µ—Ä–µ–∑ Git Tree API
   * –ò–∑–±–µ–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤
   */
  async createMultipleFiles(
    repoName: string,
    files: Record<string, string>,
    message: string,
  ): Promise<{ commitSha: string; treeSha: string }> {
    try {
      console.log(`üå≥ Creating ${Object.keys(files).length} files in one commit via Git Tree API`)

      // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π commit SHA –¥–ª—è parent
      const refsResponse = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/git/refs/heads/main`,
      )

      if (!refsResponse.ok) {
        const error = await refsResponse.text()
        throw new Error(`Failed to get main branch ref: ${refsResponse.status} ${error}`)
      }

      const mainRef = (await refsResponse.json()) as {
        object: { sha: string }
      }
      const parentCommitSha = mainRef.object.sha
      console.log(`üìç Parent commit SHA: ${parentCommitSha}`)

      // 2. –°–æ–∑–¥–∞–µ–º blobs –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º concurrency
      const fileEntries = Object.entries(files)
      const CHUNK_SIZE = 5 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑
      const treeItems: Array<{
        path: string
        mode: string
        type: "blob"
        sha: string
      }> = []

      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
      for (let i = 0; i < fileEntries.length; i += CHUNK_SIZE) {
        const chunk = fileEntries.slice(i, i + CHUNK_SIZE)
        console.log(
          `üì¶ Processing blob chunk ${Math.floor(i / CHUNK_SIZE) + 1}/${Math.ceil(
            fileEntries.length / CHUNK_SIZE,
          )} (${chunk.length} files)`,
        )

        const blobPromises = chunk.map(async ([filePath, content]) => {
          const base64Content = Buffer.from(content, "utf8").toString("base64")

          const response = await this.makeAuthenticatedRequest(
            `/repos/${this.organization}/${repoName}/git/blobs`,
            {
              method: "POST",
              body: JSON.stringify({
                content: base64Content,
                encoding: "base64",
              }),
            },
          )

          if (!response.ok) {
            const error = await response.text()
            throw new Error(`Failed to create blob for ${filePath}: ${response.status} ${error}`)
          }

          const blob = (await response.json()) as { sha: string }
          return {
            path: filePath,
            mode: "100644", // Regular file
            type: "blob" as const,
            sha: blob.sha,
          }
        })

        const chunkResults = await Promise.all(blobPromises)
        treeItems.push(...chunkResults)

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        if (i + CHUNK_SIZE < fileEntries.length) {
          await new Promise((resolve) => setTimeout(resolve, 100))
        }
      }
      console.log(`‚úÖ Created ${treeItems.length} blobs`)

      // 3. –°–æ–∑–¥–∞–µ–º tree —Å–æ –≤—Å–µ–º–∏ —Ñ–∞–π–ª–∞–º–∏
      const treeResponse = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/git/trees`,
        {
          method: "POST",
          body: JSON.stringify({
            tree: treeItems,
          }),
        },
      )

      if (!treeResponse.ok) {
        const error = await treeResponse.text()
        throw new Error(`Failed to create tree: ${treeResponse.status} ${error}`)
      }

      const tree = (await treeResponse.json()) as { sha: string }
      console.log(`üå≥ Created tree with SHA: ${tree.sha}`)

      // 4. –°–æ–∑–¥–∞–µ–º commit —Å —ç—Ç–∏–º tree –∏ parent commit
      const commitResponse = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/git/commits`,
        {
          method: "POST",
          body: JSON.stringify({
            message,
            tree: tree.sha,
            parents: [parentCommitSha], // –£–∫–∞–∑—ã–≤–∞–µ–º parent commit
            author: {
              name: "Phion Bot",
              email: "bot@phion.com",
            },
            committer: {
              name: "Phion Bot",
              email: "bot@phion.com",
            },
          }),
        },
      )

      if (!commitResponse.ok) {
        const error = await commitResponse.text()
        throw new Error(`Failed to create commit: ${commitResponse.status} ${error}`)
      }

      const commit = (await commitResponse.json()) as { sha: string }
      console.log(`üìù Created commit with SHA: ${commit.sha}`)

      // 5. –û–±–Ω–æ–≤–ª—è–µ–º main branch reference
      const refResponse = await this.makeAuthenticatedRequest(
        `/repos/${this.organization}/${repoName}/git/refs/heads/main`,
        {
          method: "PATCH",
          body: JSON.stringify({
            sha: commit.sha,
          }),
        },
      )

      if (!refResponse.ok) {
        const error = await refResponse.text()
        throw new Error(`Failed to update main branch: ${refResponse.status} ${error}`)
      }

      console.log(`üéâ Successfully created ${Object.keys(files).length} files in one commit`)

      return {
        commitSha: commit.sha,
        treeSha: tree.sha,
      }
    } catch (error) {
      console.error("‚ùå Failed to create multiple files via Git Tree API", {
        repoName,
        error,
      })
      throw error
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const githubAppService = new GitHubAppService()
