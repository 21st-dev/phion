// NgrokService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è webpack –æ—à–∏–±–æ–∫

export class NgrokService {
  private tunnelUrl: string | null = null;
  private isStarted = false;

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è websocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  async startTunnel(): Promise<string> {
    if (this.isStarted && this.tunnelUrl) {
      console.log(`üîó Ngrok tunnel already running: ${this.tunnelUrl}`);
      return this.tunnelUrl;
    }

    try {
      console.log("üöÄ Starting ngrok tunnel for port 8080...");

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ngrok —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω
      const ngrok = await import("@ngrok/ngrok");

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å –Ω–∞ –ø–æ—Ä—Ç websocket —Å–µ—Ä–≤–µ—Ä–∞
      const listener = await ngrok.default.forward({
        addr: 8080,
        authtoken_from_env: true, // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç NGROK_AUTHTOKEN –∏–∑ .env
      });

      this.tunnelUrl = listener.url();
      this.isStarted = true;

      console.log(`‚úÖ Ngrok tunnel started: ${this.tunnelUrl}`);
      console.log(`üåê Webhooks endpoint: ${this.tunnelUrl}/webhooks/netlify`);

      // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Netlify service
      process.env.WEBSOCKET_SERVER_URL = this.tunnelUrl || "";

      return this.tunnelUrl || "";
    } catch (error) {
      console.error("‚ùå Failed to start ngrok tunnel:", error);

      // Fallback –∫ localhost –µ—Å–ª–∏ ngrok –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      console.log("‚ö†Ô∏è Falling back to localhost:8080");
      this.tunnelUrl = "http://localhost:8080";
      process.env.WEBSOCKET_SERVER_URL = this.tunnelUrl || "";

      return this.tunnelUrl;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ngrok —Ç—É–Ω–Ω–µ–ª—å
   */
  async stopTunnel(): Promise<void> {
    if (!this.isStarted) {
      return;
    }

    try {
      console.log("üõë Stopping ngrok tunnel...");

      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ngrok —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω
      const ngrok = await import("@ngrok/ngrok");
      await ngrok.default.disconnect();
      await ngrok.default.kill();

      this.tunnelUrl = null;
      this.isStarted = false;

      console.log("‚úÖ Ngrok tunnel stopped");
    } catch (error) {
      console.error("‚ùå Error stopping ngrok tunnel:", error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π URL —Ç—É–Ω–Ω–µ–ª—è
   */
  getTunnelUrl(): string | null {
    return this.tunnelUrl;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ç—É–Ω–Ω–µ–ª—å
   */
  isRunning(): boolean {
    return this.isStarted && this.tunnelUrl !== null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const ngrokService = new NgrokService();

// Graceful shutdown
process.on("SIGINT", async () => {
  console.log("\nüõë Shutting down ngrok tunnel...");
  await ngrokService.stopTunnel();
  process.exit(0);
});

process.on("SIGTERM", async () => {
  console.log("\nüõë Shutting down ngrok tunnel...");
  await ngrokService.stopTunnel();
  process.exit(0);
});
