import fetch from 'node-fetch';

interface NetlifyCreateSiteRequest {
  name: string;
  repo?: {
    provider: "github";
    repo: string;
    private: boolean;
    branch: string;
    installation_id: number;
  };
  build_settings?: {
    cmd: string;
    dir: string;
    env?: Record<string, string>;
  };
}

interface NetlifyCreateSiteResponse {
  id: string;
  url: string;
  admin_url: string;
  name: string;
  ssl_url?: string;
  build_settings?: {
    repo_url?: string;
    repo_branch?: string;
    deploy_key_id?: string;
    cmd?: string;
    dir?: string;
  };
}

interface NetlifyWebhookResponse {
  id: string;
  site_id: string;
  type: string;
  event: string;
  data: {
    url: string;
  };
  created_at: string;
  updated_at: string;
}

export class NetlifyService {
  private accessToken: string;
  private baseUrl = 'https://api.netlify.com/api/v1';

  constructor() {
    this.accessToken = process.env.NETLIFY_ACCESS_TOKEN!;
    
    if (!this.accessToken) {
      throw new Error('NETLIFY_ACCESS_TOKEN environment variable is required');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Netlify —Å–∞–π—Ç —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
   */
  async createSiteWithGitHub(
    projectId: string,
    projectName: string,
    githubRepoName: string,
    githubOwner: string
  ): Promise<NetlifyCreateSiteResponse> {
    try {
              // GitHub App Installation ID –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ vybcel
      const installationId = parseInt(process.env.NETLIFY_GITHUB_INSTALLATION_ID!);
      
      if (!installationId || isNaN(installationId)) {
        throw new Error('NETLIFY_GITHUB_INSTALLATION_ID is required and must be a valid number');
      }

      const requestBody: NetlifyCreateSiteRequest = {
        name: `vybcel-${projectId.slice(0, 8)}`,
        repo: {
          provider: "github",
          repo: `${githubOwner}/${githubRepoName}`,
          private: true,
          branch: "main",
          installation_id: installationId
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∫–∏ –¥–ª—è Vite –ø—Ä–æ–µ–∫—Ç–∞
        build_settings: {
          cmd: "pnpm install && pnpm build",
          dir: "dist",
          env: {
            NODE_VERSION: "18",
            NPM_VERSION: "9"
          }
        }
      };

      console.log('üåê Creating Netlify site with GitHub integration:', {
        projectId,
        repoName: githubRepoName,
        installationId,
        buildCmd: requestBody.build_settings?.cmd
      });

      const response = await fetch(`${this.baseUrl}/sites`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Netlify API error:', errorText);
        throw new Error(`Failed to create Netlify site: ${response.status} ${errorText}`);
      }

      const data = await response.json() as NetlifyCreateSiteResponse;
      
      console.log('‚úÖ Created Netlify site with GitHub integration:', {
        siteId: data.id,
        name: data.name,
        adminUrl: data.admin_url,
        deployKeyId: data.build_settings?.deploy_key_id,
        repoUrl: data.build_settings?.repo_url
      });

      // –ù–ï –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –∑–¥–µ—Å—å - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
      // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º netlify_site_id
      
      return data;
    } catch (error) {
      console.error('‚ùå Error creating Netlify site with GitHub:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∞–π—Ç–∞
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è netlify_site_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async setupWebhookForSite(siteId: string, projectId: string): Promise<void> {
    await this.setupWebhook(siteId, projectId);
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è —Å–∞–π—Ç–∞
   */
  private async setupWebhook(siteId: string, projectId: string): Promise<void> {
    try {
      // –í development —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º ngrok
      let webhookUrl = process.env.WEBSOCKET_SERVER_URL;
      
      if (process.env.NODE_ENV === 'development' || !webhookUrl) {
        try {
          console.log('üîó Starting ngrok tunnel for development webhooks...');
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç ngrok —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ–ª—å–∫–æ –≤ development
          const { ngrokService } = await import('./ngrok-service');
          webhookUrl = await ngrokService.startTunnel();
        } catch (error) {
          console.error('‚ùå Failed to import/start ngrok:', error);
          console.log('‚ö†Ô∏è Falling back to localhost:8080 for webhooks');
          webhookUrl = 'http://localhost:8080';
        }
      }
      
      const webhookEndpoint = `${webhookUrl}/webhooks/netlify`;

      console.log(`üîó Setting up webhook for site ${siteId} ‚Üí ${webhookEndpoint}`);

      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Netlify Deploy Notifications
      // deploy_succeeded –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —É–±–∏—Ä–∞–µ–º –µ–≥–æ
      const events = ['deploy_created', 'deploy_building', 'deploy_failed'];
      const webhookPromises = [];

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π webhook –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
      for (const event of events) {
        const webhookPromise = fetch(`${this.baseUrl}/hooks`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${this.accessToken}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            type: 'url',
            event: event,
            data: {
              url: webhookEndpoint
            },
            site_id: siteId
          }),
        });
        
        webhookPromises.push(webhookPromise);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const responses = await Promise.all(webhookPromises);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results = [];
      for (let i = 0; i < responses.length; i++) {
        const response = responses[i];
        const event = events[i];
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error(`‚ùå Failed to setup webhook for event ${event}:`, errorText);
          continue;
        }

        const webhookData = await response.json() as NetlifyWebhookResponse;
        results.push({
          event,
          hookId: webhookData.id
        });
      }

      if (results.length > 0) {
        console.log(`‚úÖ Webhooks configured for site ${siteId}:`, {
          endpoint: webhookEndpoint,
          webhooks: results
        });
      } else {
        console.log('‚ö†Ô∏è No webhooks were successfully configured');
      }

    } catch (error) {
      console.error(`‚ùå Error setting up webhook for site ${siteId}:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ webhook
      console.log('‚ö†Ô∏è Continuing without webhook setup');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
   */
  async getSite(siteId: string): Promise<NetlifyCreateSiteResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Failed to get site info: ${response.status} ${error}`);
      }

      return await response.json() as NetlifyCreateSiteResponse;
    } catch (error) {
      console.error('‚ùå Error getting site info:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–∞–π—Ç
   */
  async deleteSite(siteId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/sites/${siteId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
        },
      });

      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Failed to delete site: ${response.status} ${error}`);
      }

      console.log(`‚úÖ Deleted Netlify site: ${siteId}`);
    } catch (error) {
      console.error('‚ùå Error deleting site:', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const netlifyService = new NetlifyService(); 