import { exec } from 'child_process'
import { promisify } from 'util'
import http from 'http'

const execAsync = promisify(exec)

export interface VSCodeConfig {
  autoOpen: boolean
  port: number
  url?: string
}

/**
 * –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ VS Code –∏–ª–∏ Cursor
 */
export function detectVSCode(): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VS Code –∏ Cursor
  return !!(
    process.env.VSCODE_PID ||
    process.env.TERM_PROGRAM === 'vscode' ||
    process.env.VSCODE_INJECTION === '1' ||
    process.env.TERM_PROGRAM === 'cursor' ||
    process.env.CURSOR_PID ||
    process.env.CURSOR_TRACE_ID // Cursor —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
  )
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ Cursor (–∞ –Ω–µ VS Code)
 */
export function isCursor(): boolean {
  // Cursor —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç CURSOR_TRACE_ID –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Cursor.app –≤ –ø—É—Ç—è—Ö
  return !!(
    process.env.CURSOR_TRACE_ID ||
    process.env.VSCODE_GIT_ASKPASS_NODE?.includes('Cursor.app')
  )
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã code/cursor –≤ PATH
 */
export async function isCodeCommandAvailable(): Promise<boolean> {
  const useCursor = isCursor()
  const command = useCursor ? 'cursor' : 'code'
  
  try {
    await execAsync(`${command} --version`)
    return true
  } catch {
    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é
    try {
      const altCommand = useCursor ? 'code' : 'cursor'
      await execAsync(`${altCommand} --version`)
      return true
    } catch {
      return false
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ dev-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
 */
export function checkDevServerReady(port: number): Promise<boolean> {
  return new Promise((resolve) => {
    const req = http.get(`http://localhost:${port}`, (res) => {
      resolve(res.statusCode === 200)
    })
    
    req.on('error', () => {
      resolve(false)
    })
    
    req.setTimeout(1000, () => {
      req.destroy()
      resolve(false)
    })
  })
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç Vite dev —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function findVitePort(): Promise<number | null> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã Vite –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –ø–æ—Ä—Ç—ã –ø–µ—Ä–≤—ã–º–∏)
  const commonPorts = [5177, 5176, 5175, 5174, 5173, 3001, 3000]
  
  for (const port of commonPorts) {
    if (await checkDevServerReady(port)) {
      return port
    }
  }
  
  return null
}

/**
 * –û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ dev-—Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 */
export async function waitForDevServer(port: number, timeout = 30000): Promise<boolean> {
  const startTime = Date.now()
  
  while (Date.now() - startTime < timeout) {
    if (await checkDevServerReady(port)) {
      return true
    }
    
    // –ñ–¥–µ–º 500ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 500))
  }
  
  return false
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –≤ VS Code/Cursor Simple Browser
 */
export async function openInVSCodeSimpleBrowser(url: string): Promise<boolean> {
  const useCursor = isCursor()
  const command = useCursor ? 'cursor' : 'code'
  
  try {
    // –ú–µ—Ç–æ–¥ 1: –î–ª—è Cursor –ø—Ä–æ–±—É–µ–º –∫–æ–º–∞–Ω–¥—É vscode.open
    if (useCursor) {
      await execAsync(`${command} --command "vscode.open" --command-args "${url}"`)
      return true
    } else {
      // –î–ª—è VS Code –∏—Å–ø–æ–ª—å–∑—É–µ–º simpleBrowser.show
      await execAsync(`${command} --command "simpleBrowser.show" --command-args "${url}"`)
      return true
    }
  } catch (error) {
    console.warn(`[${useCursor ? 'Cursor' : 'VS Code'}] Method 1 failed:`, (error as Error).message)
    
    try {
      // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–±—É–µ–º simpleBrowser.show –¥–ª—è –æ–±–æ–∏—Ö
      await execAsync(`${command} --command "simpleBrowser.show" --command-args "${url}"`)
      return true
    } catch (fallbackError) {
      console.warn(`[${useCursor ? 'Cursor' : 'VS Code'}] Method 2 failed:`, (fallbackError as Error).message)
      
      try {
        // –ú–µ—Ç–æ–¥ 3: Fallback —á–µ—Ä–µ–∑ vscode:// URI
        const encodedUrl = encodeURIComponent(url)
        await execAsync(`${command} --open-url "vscode://ms-vscode.vscode-simple-browser/show?url=${encodedUrl}"`)
        return true
      } catch (uriError) {
        console.warn(`[${useCursor ? 'Cursor' : 'VS Code'}] Method 3 failed:`, (uriError as Error).message)
        
        try {
          // –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ URL
          await execAsync(`${command} --open-url "${url}"`)
          return true
        } catch (finalError) {
          console.warn(`[${useCursor ? 'Cursor' : 'VS Code'}] All methods failed:`, (finalError as Error).message)
          return false
        }
      }
    }
  }
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –∫–∞–∫ fallback
 */
export async function openInSystemBrowser(url: string): Promise<boolean> {
  try {
    const platform = process.platform
    let command: string
    
    switch (platform) {
      case 'darwin':
        command = `open "${url}"`
        break
      case 'win32':
        command = `start "" "${url}"`
        break
      default:
        command = `xdg-open "${url}"`
        break
    }
    
    await execAsync(command)
    return true
  } catch (error) {
    console.warn('[System Browser] Failed to open:', (error as Error).message)
    return false
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–≤—å—é
 */
export async function openPreview(config: VSCodeConfig, debug = false): Promise<void> {
  if (!config.autoOpen) {
    if (debug) {
      console.log('üîß Auto-open disabled in config')
    }
    return
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç Vite
  let port = config.port
  let url = config.url
  
  if (!url) {
    const foundPort = await findVitePort()
    if (foundPort) {
      port = foundPort
      url = `http://localhost:${port}`
      if (debug) {
        console.log(`üîç Found Vite dev server on port ${port}`)
      }
    } else {
      url = `http://localhost:${port}`
      if (debug) {
        console.log(`‚ö†Ô∏è No active dev server found, using default port ${port}`)
      }
    }
  }
  
  if (debug) {
    console.log(`üåê Opening preview at ${url}...`)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  const isReady = await checkDevServerReady(port)
  if (!isReady) {
    console.warn(`‚ö†Ô∏è Dev server not ready at ${url}`)
    return
  }

  if (debug) {
    console.log('‚úÖ Dev server is ready')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º VS Code/Cursor
  const isVSCode = detectVSCode()
  const hasCodeCommand = await isCodeCommandAvailable()
  const useCursor = isCursor()

  if (debug) {
    console.log(`üîç ${useCursor ? 'Cursor' : 'VS Code'} detected: ${isVSCode}`)
    console.log(`üîç Code command available: ${hasCodeCommand}`)
    console.log(`üîç Environment check:`)
    console.log(`   - CURSOR_TRACE_ID: ${process.env.CURSOR_TRACE_ID ? 'present' : 'missing'}`)
    console.log(`   - VSCODE_GIT_ASKPASS_NODE: ${process.env.VSCODE_GIT_ASKPASS_NODE?.includes('Cursor.app') ? 'Cursor.app' : 'other'}`)
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  console.log('')
  console.log('üåê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
  console.log('üöÄ Your development server is ready!')
  console.log(`üîó Local preview: ${url}`)
  if (useCursor) {
    console.log('üí° To open in Cursor Simple Browser:')
    console.log('   1. Press Cmd+Shift+P')
    console.log('   2. Type "Simple Browser: Show"')
    console.log(`   3. Enter: ${url}`)
  }
  console.log('üåê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
  console.log('')

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Simple Browser –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω VS Code/Cursor
  if (isVSCode && hasCodeCommand) {
    if (debug) {
      console.log(`üöÄ Trying ${useCursor ? 'Cursor' : 'VS Code'} Simple Browser...`)
    }
    
    const success = await openInVSCodeSimpleBrowser(url)
    if (success) {
      if (debug) {
        console.log(`‚úÖ Successfully opened in ${useCursor ? 'Cursor' : 'VS Code'} Simple Browser`)
      }
      return
    }
  }

  // Fallback –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É –µ—Å–ª–∏ Simple Browser –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
  if (debug) {
    console.log(`üåê Opening ${url} in system browser as fallback...`)
  }
  
  const systemSuccess = await openInSystemBrowser(url)
  if (systemSuccess) {
    console.log('‚úÖ Preview opened in system browser')
    return
  }

  console.log('üí° Please manually open the URL above in your browser')
} 