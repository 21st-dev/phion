#!/usr/bin/env node

import { PhionAgent, AgentConfig } from "./agent.js"
import { checkForUpdates as checkVersionUpdates, getCurrentVersion } from "./version-checker.js"
import fs from "fs"
import path from "path"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function loadConfig(): AgentConfig {
  // 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ phion.config.json
  const configPath = path.join(process.cwd(), "phion.config.json")
  if (fs.existsSync(configPath)) {
    try {
      const config = JSON.parse(fs.readFileSync(configPath, "utf8"))
      return {
        projectId: config.projectId,
        wsUrl: config.wsUrl || process.env.PHION_WS_URL || "ws://localhost:8080",
        debug: config.debug || false,
        toolbar: config.toolbar || {
          enabled: true,
          position: "top",
          autoOpen: true,
        },
      }
    } catch (error) {
      console.error("‚ùå Error reading phion.config.json:", (error as Error).message)
    }
  }

  // 2. Fallback –Ω–∞ environment variables –∏–ª–∏ args
  const projectId = process.env.PHION_PROJECT_ID || process.argv[2]
  const wsUrl = process.env.PHION_WS_URL || "ws://localhost:8080"

  if (!projectId || projectId === "__PROJECT_ID__") {
    console.error("‚ùå Missing project ID!")
    console.log("Add project ID to phion.config.json or pass as argument")
    process.exit(1)
  }

  return {
    projectId,
    wsUrl,
    debug: false,
    toolbar: {
      enabled: true,
      position: "top",
      autoOpen: true,
    },
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
async function checkForUpdates(wsUrl: string, debug: boolean = false): Promise<void> {
  try {
    const currentVersion = getCurrentVersion()
    console.log(`üì¶ Phion v${currentVersion}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ debug —Ä–µ–∂–∏–º –∏–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (debug) {
      try {
        const versionInfo = await checkVersionUpdates(wsUrl)

        if (versionInfo.hasUpdate && versionInfo.latest) {
          console.log(`üÜï New version ${versionInfo.latest} available!`)
          console.log("üì• Run 'pnpm update phion' to update")
          console.log("")
        }
      } catch (updateCheckError) {
        console.debug("Update check failed:", updateCheckError)
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  }
}

async function main() {
  try {
    const config = loadConfig()
    await checkForUpdates(config.wsUrl, config.debug)
    const agent = new PhionAgent(config)

    // Graceful shutdown
    const shutdown = () => {
      agent.stop()
      process.exit(0)
    }

    process.on("SIGINT", shutdown)
    process.on("SIGTERM", shutdown)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç
    await agent.start()

    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    process.stdin.setRawMode?.(true)
    process.stdin.resume()
    process.stdin.on("data", (key) => {
      // Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞
      if (key[0] === 3) {
        shutdown()
      }
    })
  } catch (error) {
    console.error("‚ùå Failed to start Phion Agent:", (error as Error).message)
    process.exit(1)
  }
}

main()
